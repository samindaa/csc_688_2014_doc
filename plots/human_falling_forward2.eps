%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: human_falling_forward2.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: ds
%%CreationDate: 7/22/2015, 9:30:45 PM
%%BoundingBox: 0 0 907 487
%%HiResBoundingBox: 0 0 906.2328 486.2935
%%CropBox: 0 0 906.2328 486.2935
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 537 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -486.293 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 486.293 li
906.233 486.293 li
906.233 0 li
cp
clp
[1 0 0 1 -96.3497 0 ]ct
0 513.459 mo
1088 513.459 li
1088 -34.5405 li
0 -34.5405 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
0 513.459 mo
1088 513.459 li
1088 -34.5405 li
0 -34.5405 li
cp
f
142.398 7.06146 mo
988.8 7.06146 li
988.8 455.858 li
142.398 455.858 li
cp
f
.8 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
142.398 455.857 mo
988.801 455.857 li
.711879 .649958 .636652 .688777 cmyk
@
142.398 455.857 mo
142.398 447.397 li
@
283.465 455.857 mo
283.465 447.397 li
@
424.535 455.857 mo
424.535 447.397 li
@
565.602 455.857 mo
565.602 447.397 li
@
706.668 455.857 mo
706.668 447.397 li
@
847.734 455.857 mo
847.734 447.397 li
@
988.801 455.857 mo
988.801 447.397 li
@
139.23 466.811 mo
139.227 465.932 139.32 465.225 139.504 464.686 cv
139.684 464.154 139.953 463.74 140.313 463.443 cv
140.668 463.154 141.117 463.006 141.66 463.006 cv
142.059 463.006 142.406 463.088 142.711 463.248 cv
143.008 463.412 143.258 463.646 143.457 463.947 cv
143.652 464.252 143.805 464.619 143.918 465.053 cv
144.027 465.49 144.086 466.076 144.086 466.811 cv
144.086 467.689 143.996 468.396 143.816 468.928 cv
143.637 469.467 143.367 469.881 143.012 470.17 cv
142.652 470.463 142.203 470.604 141.66 470.607 cv
140.941 470.604 140.375 470.35 139.969 469.838 cv
139.473 469.221 139.227 468.213 139.23 466.811 cv
cp
140.172 466.811 mo
140.172 468.033 140.313 468.846 140.602 469.252 cv
140.883 469.658 141.238 469.861 141.66 469.857 cv
142.078 469.861 142.43 469.658 142.719 469.248 cv
143.004 468.846 143.148 468.033 143.148 466.811 cv
143.148 465.588 143.004 464.775 142.719 464.369 cv
142.43 463.971 142.074 463.768 141.648 463.764 cv
141.227 463.768 140.891 463.947 140.645 464.299 cv
140.328 464.756 140.172 465.592 140.172 466.811 cv
cp
f
277.098 468.533 mo
278.059 468.451 li
278.129 468.92 278.297 469.271 278.555 469.506 cv
278.813 469.744 279.125 469.861 279.492 469.857 cv
279.93 469.861 280.301 469.697 280.609 469.361 cv
280.91 469.033 281.063 468.592 281.066 468.041 cv
281.063 467.521 280.914 467.111 280.625 466.807 cv
280.328 466.51 279.945 466.357 279.477 466.354 cv
279.18 466.357 278.914 466.424 278.68 466.557 cv
278.438 466.689 278.254 466.865 278.121 467.076 cv
277.262 466.963 li
277.984 463.139 li
281.684 463.139 li
281.684 464.014 li
278.715 464.014 li
278.313 466.014 li
278.758 465.705 279.227 465.549 279.719 465.545 cv
280.367 465.549 280.914 465.775 281.363 466.221 cv
281.809 466.674 282.035 467.252 282.035 467.959 cv
282.035 468.635 281.836 469.217 281.445 469.705 cv
280.965 470.307 280.316 470.604 279.492 470.607 cv
278.813 470.604 278.258 470.42 277.832 470.041 cv
277.402 469.666 277.156 469.162 277.098 468.533 cv
cp
282.887 466.811 mo
282.883 465.932 282.977 465.225 283.16 464.686 cv
283.34 464.154 283.609 463.74 283.969 463.443 cv
284.324 463.154 284.773 463.006 285.316 463.006 cv
285.715 463.006 286.063 463.088 286.367 463.248 cv
286.664 463.412 286.914 463.646 287.113 463.947 cv
287.309 464.252 287.461 464.619 287.574 465.053 cv
287.684 465.49 287.742 466.076 287.742 466.811 cv
287.742 467.689 287.652 468.396 287.473 468.928 cv
287.293 469.467 287.023 469.881 286.668 470.17 cv
286.309 470.463 285.859 470.604 285.316 470.607 cv
284.598 470.604 284.031 470.35 283.625 469.838 cv
283.129 469.221 282.883 468.213 282.887 466.811 cv
cp
283.828 466.811 mo
283.828 468.033 283.969 468.846 284.258 469.252 cv
284.539 469.658 284.895 469.861 285.316 469.857 cv
285.734 469.861 286.086 469.658 286.375 469.248 cv
286.66 468.846 286.805 468.033 286.805 466.811 cv
286.805 465.588 286.66 464.775 286.375 464.369 cv
286.086 463.971 285.73 463.768 285.305 463.764 cv
284.883 463.768 284.547 463.947 284.301 464.299 cv
283.984 464.756 283.828 465.592 283.828 466.811 cv
cp
f
418.41 470.482 mo
417.496 470.482 li
417.496 464.658 li
417.27 464.869 416.98 465.08 416.629 465.291 cv
416.27 465.502 415.949 465.658 415.668 465.76 cv
415.668 464.877 li
416.176 464.639 416.625 464.346 417.008 464.002 cv
417.391 463.662 417.66 463.33 417.82 463.006 cv
418.41 463.006 li
cp
420.754 466.811 mo
420.75 465.932 420.844 465.225 421.027 464.686 cv
421.207 464.154 421.477 463.74 421.836 463.443 cv
422.191 463.154 422.641 463.006 423.184 463.006 cv
423.582 463.006 423.93 463.088 424.234 463.248 cv
424.531 463.412 424.781 463.646 424.98 463.947 cv
425.176 464.252 425.328 464.619 425.441 465.053 cv
425.551 465.49 425.609 466.076 425.609 466.811 cv
425.609 467.689 425.52 468.396 425.34 468.928 cv
425.16 469.467 424.891 469.881 424.535 470.17 cv
424.176 470.463 423.727 470.604 423.184 470.607 cv
422.465 470.604 421.898 470.35 421.492 469.838 cv
420.996 469.221 420.75 468.213 420.754 466.811 cv
cp
421.695 466.811 mo
421.695 468.033 421.836 468.846 422.125 469.252 cv
422.406 469.658 422.762 469.861 423.184 469.857 cv
423.602 469.861 423.953 469.658 424.242 469.248 cv
424.527 468.846 424.672 468.033 424.672 466.811 cv
424.672 465.588 424.527 464.775 424.242 464.369 cv
423.953 463.971 423.598 463.768 423.172 463.764 cv
422.75 463.768 422.414 463.947 422.168 464.299 cv
421.852 464.756 421.695 465.592 421.695 466.811 cv
cp
426.543 466.811 mo
426.539 465.932 426.633 465.225 426.816 464.686 cv
426.996 464.154 427.266 463.74 427.625 463.443 cv
427.98 463.154 428.43 463.006 428.973 463.006 cv
429.371 463.006 429.719 463.088 430.023 463.248 cv
430.32 463.412 430.57 463.646 430.77 463.947 cv
430.965 464.252 431.117 464.619 431.23 465.053 cv
431.34 465.49 431.398 466.076 431.398 466.811 cv
431.398 467.689 431.309 468.396 431.129 468.928 cv
430.949 469.467 430.68 469.881 430.324 470.17 cv
429.965 470.463 429.516 470.604 428.973 470.607 cv
428.254 470.604 427.688 470.35 427.281 469.838 cv
426.785 469.221 426.539 468.213 426.543 466.811 cv
cp
427.484 466.811 mo
427.484 468.033 427.625 468.846 427.914 469.252 cv
428.195 469.658 428.551 469.861 428.973 469.857 cv
429.391 469.861 429.742 469.658 430.031 469.248 cv
430.316 468.846 430.461 468.033 430.461 466.811 cv
430.461 465.588 430.316 464.775 430.031 464.369 cv
429.742 463.971 429.387 463.768 428.961 463.764 cv
428.539 463.768 428.203 463.947 427.957 464.299 cv
427.641 464.756 427.484 465.592 427.484 466.811 cv
cp
f
559.477 470.482 mo
558.563 470.482 li
558.563 464.658 li
558.336 464.869 558.047 465.08 557.695 465.291 cv
557.336 465.502 557.016 465.658 556.734 465.76 cv
556.734 464.877 li
557.242 464.639 557.691 464.346 558.074 464.002 cv
558.457 463.662 558.727 463.33 558.887 463.006 cv
559.477 463.006 li
cp
561.82 468.533 mo
562.781 468.451 li
562.852 468.92 563.02 469.271 563.277 469.506 cv
563.535 469.744 563.848 469.861 564.215 469.857 cv
564.652 469.861 565.023 469.697 565.332 469.361 cv
565.633 469.033 565.785 468.592 565.789 468.041 cv
565.785 467.521 565.637 467.111 565.348 466.807 cv
565.051 466.51 564.668 466.357 564.199 466.354 cv
563.902 466.357 563.637 466.424 563.402 466.557 cv
563.16 466.689 562.977 466.865 562.844 467.076 cv
561.984 466.963 li
562.707 463.139 li
566.406 463.139 li
566.406 464.014 li
563.438 464.014 li
563.035 466.014 li
563.48 465.705 563.949 465.549 564.441 465.545 cv
565.09 465.549 565.637 465.775 566.086 466.221 cv
566.531 466.674 566.758 467.252 566.758 467.959 cv
566.758 468.635 566.559 469.217 566.168 469.705 cv
565.688 470.307 565.039 470.604 564.215 470.607 cv
563.535 470.604 562.98 470.42 562.555 470.041 cv
562.125 469.666 561.879 469.162 561.82 468.533 cv
cp
567.609 466.811 mo
567.605 465.932 567.699 465.225 567.883 464.686 cv
568.063 464.154 568.332 463.74 568.691 463.443 cv
569.047 463.154 569.496 463.006 570.039 463.006 cv
570.438 463.006 570.785 463.088 571.09 463.248 cv
571.387 463.412 571.637 463.646 571.836 463.947 cv
572.031 464.252 572.184 464.619 572.297 465.053 cv
572.406 465.49 572.465 466.076 572.465 466.811 cv
572.465 467.689 572.375 468.396 572.195 468.928 cv
572.016 469.467 571.746 469.881 571.391 470.17 cv
571.031 470.463 570.582 470.604 570.039 470.607 cv
569.32 470.604 568.754 470.35 568.348 469.838 cv
567.852 469.221 567.605 468.213 567.609 466.811 cv
cp
568.551 466.811 mo
568.551 468.033 568.691 468.846 568.98 469.252 cv
569.262 469.658 569.617 469.861 570.039 469.857 cv
570.457 469.861 570.809 469.658 571.098 469.248 cv
571.383 468.846 571.527 468.033 571.527 466.811 cv
571.527 465.588 571.383 464.775 571.098 464.369 cv
570.809 463.971 570.453 463.768 570.027 463.764 cv
569.605 463.768 569.27 463.947 569.023 464.299 cv
568.707 464.756 568.551 465.592 568.551 466.811 cv
cp
f
701.902 469.604 mo
701.902 470.482 li
696.984 470.482 li
696.977 470.264 697.012 470.053 697.09 469.85 cv
697.215 469.514 697.414 469.186 697.691 468.857 cv
697.965 468.537 698.363 468.158 698.887 467.729 cv
699.695 467.068 700.242 466.545 700.527 466.154 cv
700.809 465.768 700.949 465.4 700.953 465.053 cv
700.949 464.693 700.82 464.389 700.563 464.139 cv
700.301 463.893 699.965 463.768 699.551 463.764 cv
699.109 463.768 698.758 463.9 698.496 464.162 cv
698.23 464.428 698.094 464.791 698.094 465.256 cv
697.156 465.162 li
697.219 464.459 697.461 463.924 697.883 463.557 cv
698.297 463.189 698.863 463.006 699.574 463.006 cv
700.285 463.006 700.848 463.205 701.27 463.604 cv
701.684 464.002 701.895 464.494 701.895 465.076 cv
701.895 465.377 701.832 465.67 701.711 465.955 cv
701.586 466.244 701.383 466.545 701.102 466.861 cv
700.816 467.182 700.348 467.619 699.695 468.17 cv
699.145 468.635 698.793 468.947 698.637 469.107 cv
698.48 469.275 698.352 469.439 698.254 469.604 cv
cp
702.887 466.811 mo
702.883 465.932 702.977 465.225 703.16 464.686 cv
703.34 464.154 703.609 463.74 703.969 463.443 cv
704.324 463.154 704.773 463.006 705.316 463.006 cv
705.715 463.006 706.063 463.088 706.367 463.248 cv
706.664 463.412 706.914 463.646 707.113 463.947 cv
707.309 464.252 707.461 464.619 707.574 465.053 cv
707.684 465.49 707.742 466.076 707.742 466.811 cv
707.742 467.689 707.652 468.396 707.473 468.928 cv
707.293 469.467 707.023 469.881 706.668 470.17 cv
706.309 470.463 705.859 470.604 705.316 470.607 cv
704.598 470.604 704.031 470.35 703.625 469.838 cv
703.129 469.221 702.883 468.213 702.887 466.811 cv
cp
703.828 466.811 mo
703.828 468.033 703.969 468.846 704.258 469.252 cv
704.539 469.658 704.895 469.861 705.316 469.857 cv
705.734 469.861 706.086 469.658 706.375 469.248 cv
706.66 468.846 706.805 468.033 706.805 466.811 cv
706.805 465.588 706.66 464.775 706.375 464.369 cv
706.086 463.971 705.73 463.768 705.305 463.764 cv
704.883 463.768 704.547 463.947 704.301 464.299 cv
703.984 464.756 703.828 465.592 703.828 466.811 cv
cp
708.676 466.811 mo
708.672 465.932 708.766 465.225 708.949 464.686 cv
709.129 464.154 709.398 463.74 709.758 463.443 cv
710.113 463.154 710.563 463.006 711.105 463.006 cv
711.504 463.006 711.852 463.088 712.156 463.248 cv
712.453 463.412 712.703 463.646 712.902 463.947 cv
713.098 464.252 713.25 464.619 713.363 465.053 cv
713.473 465.49 713.531 466.076 713.531 466.811 cv
713.531 467.689 713.441 468.396 713.262 468.928 cv
713.082 469.467 712.813 469.881 712.457 470.17 cv
712.098 470.463 711.648 470.604 711.105 470.607 cv
710.387 470.604 709.82 470.35 709.414 469.838 cv
708.918 469.221 708.672 468.213 708.676 466.811 cv
cp
709.617 466.811 mo
709.617 468.033 709.758 468.846 710.047 469.252 cv
710.328 469.658 710.684 469.861 711.105 469.857 cv
711.523 469.861 711.875 469.658 712.164 469.248 cv
712.449 468.846 712.594 468.033 712.594 466.811 cv
712.594 465.588 712.449 464.775 712.164 464.369 cv
711.875 463.971 711.52 463.768 711.094 463.764 cv
710.672 463.768 710.336 463.947 710.09 464.299 cv
709.773 464.756 709.617 465.592 709.617 466.811 cv
cp
f
842.969 469.604 mo
842.969 470.482 li
838.051 470.482 li
838.043 470.264 838.078 470.053 838.156 469.85 cv
838.281 469.514 838.48 469.186 838.758 468.857 cv
839.031 468.537 839.43 468.158 839.953 467.729 cv
840.762 467.068 841.309 466.545 841.594 466.154 cv
841.875 465.768 842.016 465.4 842.02 465.053 cv
842.016 464.693 841.887 464.389 841.629 464.139 cv
841.367 463.893 841.031 463.768 840.617 463.764 cv
840.176 463.768 839.824 463.9 839.563 464.162 cv
839.297 464.428 839.16 464.791 839.16 465.256 cv
838.223 465.162 li
838.285 464.459 838.527 463.924 838.949 463.557 cv
839.363 463.189 839.93 463.006 840.641 463.006 cv
841.352 463.006 841.914 463.205 842.336 463.604 cv
842.75 464.002 842.961 464.494 842.961 465.076 cv
842.961 465.377 842.898 465.67 842.777 465.955 cv
842.652 466.244 842.449 466.545 842.168 466.861 cv
841.883 467.182 841.414 467.619 840.762 468.17 cv
840.211 468.635 839.859 468.947 839.703 469.107 cv
839.547 469.275 839.418 469.439 839.32 469.604 cv
cp
843.953 468.533 mo
844.914 468.451 li
844.984 468.92 845.152 469.271 845.41 469.506 cv
845.668 469.744 845.98 469.861 846.348 469.857 cv
846.785 469.861 847.156 469.697 847.465 469.361 cv
847.766 469.033 847.918 468.592 847.922 468.041 cv
847.918 467.521 847.77 467.111 847.48 466.807 cv
847.184 466.51 846.801 466.357 846.332 466.354 cv
846.035 466.357 845.77 466.424 845.535 466.557 cv
845.293 466.689 845.109 466.865 844.977 467.076 cv
844.117 466.963 li
844.84 463.139 li
848.539 463.139 li
848.539 464.014 li
845.57 464.014 li
845.168 466.014 li
845.613 465.705 846.082 465.549 846.574 465.545 cv
847.223 465.549 847.77 465.775 848.219 466.221 cv
848.664 466.674 848.891 467.252 848.891 467.959 cv
848.891 468.635 848.691 469.217 848.301 469.705 cv
847.82 470.307 847.172 470.604 846.348 470.607 cv
845.668 470.604 845.113 470.42 844.688 470.041 cv
844.258 469.666 844.012 469.162 843.953 468.533 cv
cp
849.742 466.811 mo
849.738 465.932 849.832 465.225 850.016 464.686 cv
850.195 464.154 850.465 463.74 850.824 463.443 cv
851.18 463.154 851.629 463.006 852.172 463.006 cv
852.57 463.006 852.918 463.088 853.223 463.248 cv
853.52 463.412 853.77 463.646 853.969 463.947 cv
854.164 464.252 854.316 464.619 854.43 465.053 cv
854.539 465.49 854.598 466.076 854.598 466.811 cv
854.598 467.689 854.508 468.396 854.328 468.928 cv
854.148 469.467 853.879 469.881 853.523 470.17 cv
853.164 470.463 852.715 470.604 852.172 470.607 cv
851.453 470.604 850.887 470.35 850.48 469.838 cv
849.984 469.221 849.738 468.213 849.742 466.811 cv
cp
850.684 466.811 mo
850.684 468.033 850.824 468.846 851.113 469.252 cv
851.395 469.658 851.75 469.861 852.172 469.857 cv
852.59 469.861 852.941 469.658 853.23 469.248 cv
853.516 468.846 853.66 468.033 853.66 466.811 cv
853.66 465.588 853.516 464.775 853.23 464.369 cv
852.941 463.971 852.586 463.768 852.16 463.764 cv
851.738 463.768 851.402 463.947 851.156 464.299 cv
850.84 464.756 850.684 465.592 850.684 466.811 cv
cp
f
979.238 468.518 mo
980.152 468.396 li
980.254 468.916 980.434 469.291 980.688 469.518 cv
980.938 469.748 981.242 469.861 981.609 469.857 cv
982.035 469.861 982.398 469.713 982.699 469.412 cv
982.992 469.115 983.141 468.744 983.145 468.303 cv
983.141 467.885 983.004 467.541 982.73 467.268 cv
982.453 466.998 982.105 466.861 981.684 466.857 cv
981.512 466.861 981.297 466.896 981.039 466.959 cv
981.141 466.154 li
981.199 466.166 981.25 466.17 981.289 466.166 cv
981.676 466.17 982.027 466.068 982.34 465.861 cv
982.652 465.662 982.809 465.35 982.809 464.92 cv
982.809 464.592 982.695 464.314 982.469 464.092 cv
982.242 463.873 981.949 463.764 981.59 463.76 cv
981.23 463.764 980.934 463.873 980.699 464.096 cv
980.461 464.318 980.309 464.654 980.242 465.1 cv
979.328 464.936 li
979.438 464.326 979.691 463.854 980.09 463.514 cv
980.484 463.178 980.977 463.006 981.566 463.006 cv
981.973 463.006 982.344 463.096 982.688 463.268 cv
983.027 463.447 983.289 463.686 983.473 463.982 cv
983.652 464.287 983.746 464.607 983.746 464.943 cv
983.746 465.268 983.66 465.561 983.488 465.822 cv
983.316 466.088 983.059 466.295 982.723 466.451 cv
983.16 466.553 983.504 466.764 983.746 467.084 cv
983.988 467.404 984.109 467.807 984.113 468.283 cv
984.109 468.939 983.871 469.49 983.402 469.939 cv
982.926 470.389 982.328 470.611 981.605 470.615 cv
980.949 470.611 980.406 470.42 979.977 470.033 cv
979.543 469.646 979.297 469.143 979.238 468.518 cv
cp
985.02 466.811 mo
985.016 465.932 985.109 465.225 985.293 464.686 cv
985.473 464.154 985.742 463.74 986.102 463.443 cv
986.457 463.154 986.906 463.006 987.449 463.006 cv
987.848 463.006 988.195 463.088 988.5 463.248 cv
988.797 463.412 989.047 463.646 989.246 463.947 cv
989.441 464.252 989.594 464.619 989.707 465.053 cv
989.816 465.49 989.875 466.076 989.875 466.811 cv
989.875 467.689 989.785 468.396 989.605 468.928 cv
989.426 469.467 989.156 469.881 988.801 470.17 cv
988.441 470.463 987.992 470.604 987.449 470.607 cv
986.73 470.604 986.164 470.35 985.758 469.838 cv
985.262 469.221 985.016 468.213 985.02 466.811 cv
cp
985.961 466.811 mo
985.961 468.033 986.102 468.846 986.391 469.252 cv
986.672 469.658 987.027 469.861 987.449 469.857 cv
987.867 469.861 988.219 469.658 988.508 469.248 cv
988.793 468.846 988.938 468.033 988.938 466.811 cv
988.938 465.588 988.793 464.775 988.508 464.369 cv
988.219 463.971 987.863 463.768 987.438 463.764 cv
987.016 463.768 986.68 463.947 986.434 464.299 cv
986.117 464.756 985.961 465.592 985.961 466.811 cv
cp
990.809 466.811 mo
990.805 465.932 990.898 465.225 991.082 464.686 cv
991.262 464.154 991.531 463.74 991.891 463.443 cv
992.246 463.154 992.695 463.006 993.238 463.006 cv
993.637 463.006 993.984 463.088 994.289 463.248 cv
994.586 463.412 994.836 463.646 995.035 463.947 cv
995.23 464.252 995.383 464.619 995.496 465.053 cv
995.605 465.49 995.664 466.076 995.664 466.811 cv
995.664 467.689 995.574 468.396 995.395 468.928 cv
995.215 469.467 994.945 469.881 994.59 470.17 cv
994.23 470.463 993.781 470.604 993.238 470.607 cv
992.52 470.604 991.953 470.35 991.547 469.838 cv
991.051 469.221 990.805 468.213 990.809 466.811 cv
cp
991.75 466.811 mo
991.75 468.033 991.891 468.846 992.18 469.252 cv
992.461 469.658 992.816 469.861 993.238 469.857 cv
993.656 469.861 994.008 469.658 994.297 469.248 cv
994.582 468.846 994.727 468.033 994.727 466.811 cv
994.727 465.588 994.582 464.775 994.297 464.369 cv
994.008 463.971 993.652 463.768 993.227 463.764 cv
992.805 463.768 992.469 463.947 992.223 464.299 cv
991.906 464.756 991.75 465.592 991.75 466.811 cv
cp
f
142.398 455.857 mo
142.398 7.06149 li
@
142.398 436.346 mo
150.863 436.346 li
@
142.398 397.318 mo
150.863 397.318 li
@
142.398 358.295 mo
150.863 358.295 li
@
142.398 319.268 mo
150.863 319.268 li
@
142.398 280.24 mo
150.863 280.24 li
@
142.398 241.217 mo
150.863 241.217 li
@
142.398 202.189 mo
150.863 202.189 li
@
142.398 163.162 mo
150.863 163.162 li
@
142.398 124.139 mo
150.863 124.139 li
@
142.398 85.1115 mo
150.863 85.1115 li
@
142.398 46.0845 mo
150.863 46.0845 li
@
111.305 437.713 mo
111.305 436.795 li
114.113 436.795 li
114.113 437.713 li
cp
114.883 436.275 mo
114.879 435.396 114.973 434.689 115.156 434.15 cv
115.336 433.619 115.605 433.205 115.965 432.908 cv
116.32 432.619 116.77 432.471 117.313 432.471 cv
117.711 432.471 118.059 432.553 118.363 432.713 cv
118.66 432.877 118.91 433.111 119.109 433.412 cv
119.305 433.717 119.457 434.084 119.57 434.518 cv
119.68 434.955 119.738 435.541 119.738 436.275 cv
119.738 437.154 119.648 437.861 119.469 438.393 cv
119.289 438.932 119.02 439.346 118.664 439.635 cv
118.305 439.928 117.855 440.068 117.313 440.072 cv
116.594 440.068 116.027 439.814 115.621 439.303 cv
115.125 438.686 114.879 437.678 114.883 436.275 cv
cp
115.824 436.275 mo
115.824 437.498 115.965 438.311 116.254 438.717 cv
116.535 439.123 116.891 439.326 117.313 439.322 cv
117.73 439.326 118.082 439.123 118.371 438.713 cv
118.656 438.311 118.801 437.498 118.801 436.275 cv
118.801 435.053 118.656 434.24 118.371 433.834 cv
118.082 433.436 117.727 433.232 117.301 433.229 cv
116.879 433.232 116.543 433.412 116.297 433.764 cv
115.98 434.221 115.824 435.057 115.824 436.275 cv
cp
121.188 439.947 mo
121.188 438.908 li
122.227 438.908 li
122.227 439.947 li
cp
123.555 436.275 mo
123.551 435.396 123.645 434.689 123.828 434.15 cv
124.008 433.619 124.277 433.205 124.637 432.908 cv
124.992 432.619 125.441 432.471 125.984 432.471 cv
126.383 432.471 126.73 432.553 127.035 432.713 cv
127.332 432.877 127.582 433.111 127.781 433.412 cv
127.977 433.717 128.129 434.084 128.242 434.518 cv
128.352 434.955 128.41 435.541 128.41 436.275 cv
128.41 437.154 128.32 437.861 128.141 438.393 cv
127.961 438.932 127.691 439.346 127.336 439.635 cv
126.977 439.928 126.527 440.068 125.984 440.072 cv
125.266 440.068 124.699 439.814 124.293 439.303 cv
123.797 438.686 123.551 437.678 123.555 436.275 cv
cp
124.496 436.275 mo
124.496 437.498 124.637 438.311 124.926 438.717 cv
125.207 439.123 125.563 439.326 125.984 439.322 cv
126.402 439.326 126.754 439.123 127.043 438.713 cv
127.328 438.311 127.473 437.498 127.473 436.275 cv
127.473 435.053 127.328 434.24 127.043 433.834 cv
126.754 433.436 126.398 433.232 125.973 433.229 cv
125.551 433.232 125.215 433.412 124.969 433.764 cv
124.652 434.221 124.496 435.057 124.496 436.275 cv
cp
132.277 439.947 mo
132.277 438.166 li
129.047 438.166 li
129.047 437.326 li
132.445 432.502 li
133.191 432.502 li
133.191 437.326 li
134.195 437.326 li
134.195 438.166 li
133.191 438.166 li
133.191 439.947 li
cp
132.277 437.326 mo
132.277 433.971 li
129.945 437.326 li
cp
f
111.305 398.686 mo
111.305 397.768 li
114.113 397.768 li
114.113 398.686 li
cp
114.883 397.248 mo
114.879 396.369 114.973 395.662 115.156 395.123 cv
115.336 394.592 115.605 394.178 115.965 393.881 cv
116.32 393.592 116.77 393.443 117.313 393.443 cv
117.711 393.443 118.059 393.525 118.363 393.686 cv
118.66 393.85 118.91 394.084 119.109 394.385 cv
119.305 394.689 119.457 395.057 119.57 395.49 cv
119.68 395.928 119.738 396.514 119.738 397.248 cv
119.738 398.127 119.648 398.834 119.469 399.365 cv
119.289 399.904 119.02 400.318 118.664 400.607 cv
118.305 400.9 117.855 401.041 117.313 401.045 cv
116.594 401.041 116.027 400.787 115.621 400.275 cv
115.125 399.658 114.879 398.65 114.883 397.248 cv
cp
115.824 397.248 mo
115.824 398.471 115.965 399.283 116.254 399.689 cv
116.535 400.096 116.891 400.299 117.313 400.295 cv
117.73 400.299 118.082 400.096 118.371 399.686 cv
118.656 399.283 118.801 398.471 118.801 397.248 cv
118.801 396.025 118.656 395.213 118.371 394.807 cv
118.082 394.408 117.727 394.205 117.301 394.201 cv
116.879 394.205 116.543 394.385 116.297 394.736 cv
115.98 395.193 115.824 396.029 115.824 397.248 cv
cp
121.188 400.92 mo
121.188 399.881 li
122.227 399.881 li
122.227 400.92 li
cp
123.555 397.248 mo
123.551 396.369 123.645 395.662 123.828 395.123 cv
124.008 394.592 124.277 394.178 124.637 393.881 cv
124.992 393.592 125.441 393.443 125.984 393.443 cv
126.383 393.443 126.73 393.525 127.035 393.686 cv
127.332 393.85 127.582 394.084 127.781 394.385 cv
127.977 394.689 128.129 395.057 128.242 395.49 cv
128.352 395.928 128.41 396.514 128.41 397.248 cv
128.41 398.127 128.32 398.834 128.141 399.365 cv
127.961 399.904 127.691 400.318 127.336 400.607 cv
126.977 400.9 126.527 401.041 125.984 401.045 cv
125.266 401.041 124.699 400.787 124.293 400.275 cv
123.797 399.658 123.551 398.65 123.555 397.248 cv
cp
124.496 397.248 mo
124.496 398.471 124.637 399.283 124.926 399.689 cv
125.207 400.096 125.563 400.299 125.984 400.295 cv
126.402 400.299 126.754 400.096 127.043 399.686 cv
127.328 399.283 127.473 398.471 127.473 397.248 cv
127.473 396.025 127.328 395.213 127.043 394.807 cv
126.754 394.408 126.398 394.205 125.973 394.201 cv
125.551 394.205 125.215 394.385 124.969 394.736 cv
124.652 395.193 124.496 396.029 124.496 397.248 cv
cp
134.148 400.041 mo
134.148 400.92 li
129.23 400.92 li
129.223 400.701 129.258 400.49 129.336 400.287 cv
129.461 399.951 129.66 399.623 129.938 399.295 cv
130.211 398.975 130.609 398.596 131.133 398.166 cv
131.941 397.506 132.488 396.982 132.773 396.592 cv
133.055 396.205 133.195 395.838 133.199 395.49 cv
133.195 395.131 133.066 394.826 132.809 394.576 cv
132.547 394.33 132.211 394.205 131.797 394.201 cv
131.355 394.205 131.004 394.338 130.742 394.6 cv
130.477 394.865 130.34 395.229 130.34 395.693 cv
129.402 395.6 li
129.465 394.896 129.707 394.361 130.129 393.994 cv
130.543 393.627 131.109 393.443 131.82 393.443 cv
132.531 393.443 133.094 393.643 133.516 394.041 cv
133.93 394.439 134.141 394.932 134.141 395.514 cv
134.141 395.814 134.078 396.107 133.957 396.393 cv
133.832 396.682 133.629 396.982 133.348 397.299 cv
133.063 397.619 132.594 398.057 131.941 398.607 cv
131.391 399.072 131.039 399.385 130.883 399.545 cv
130.727 399.713 130.598 399.877 130.5 400.041 cv
cp
f
131.406 358.221 mo
131.402 357.342 131.496 356.635 131.68 356.096 cv
131.859 355.564 132.129 355.15 132.488 354.854 cv
132.844 354.564 133.293 354.416 133.836 354.416 cv
134.234 354.416 134.582 354.498 134.887 354.658 cv
135.184 354.822 135.434 355.057 135.633 355.357 cv
135.828 355.662 135.98 356.029 136.094 356.463 cv
136.203 356.9 136.262 357.486 136.262 358.221 cv
136.262 359.1 136.172 359.807 135.992 360.338 cv
135.813 360.877 135.543 361.291 135.188 361.58 cv
134.828 361.873 134.379 362.014 133.836 362.018 cv
133.117 362.014 132.551 361.76 132.145 361.248 cv
131.648 360.631 131.402 359.623 131.406 358.221 cv
cp
132.348 358.221 mo
132.348 359.443 132.488 360.256 132.777 360.662 cv
133.059 361.068 133.414 361.271 133.836 361.268 cv
134.254 361.271 134.605 361.068 134.895 360.658 cv
135.18 360.256 135.324 359.443 135.324 358.221 cv
135.324 356.998 135.18 356.186 134.895 355.779 cv
134.605 355.381 134.25 355.178 133.824 355.174 cv
133.402 355.178 133.066 355.357 132.82 355.709 cv
132.504 356.166 132.348 357.002 132.348 358.221 cv
cp
f
115.406 319.197 mo
115.402 318.318 115.496 317.611 115.68 317.072 cv
115.859 316.541 116.129 316.127 116.488 315.83 cv
116.844 315.541 117.293 315.393 117.836 315.393 cv
118.234 315.393 118.582 315.475 118.887 315.635 cv
119.184 315.799 119.434 316.033 119.633 316.334 cv
119.828 316.639 119.98 317.006 120.094 317.439 cv
120.203 317.877 120.262 318.463 120.262 319.197 cv
120.262 320.076 120.172 320.783 119.992 321.314 cv
119.813 321.854 119.543 322.268 119.188 322.557 cv
118.828 322.85 118.379 322.99 117.836 322.994 cv
117.117 322.99 116.551 322.736 116.145 322.225 cv
115.648 321.607 115.402 320.6 115.406 319.197 cv
cp
116.348 319.197 mo
116.348 320.42 116.488 321.232 116.777 321.639 cv
117.059 322.045 117.414 322.248 117.836 322.244 cv
118.254 322.248 118.605 322.045 118.895 321.635 cv
119.18 321.232 119.324 320.42 119.324 319.197 cv
119.324 317.975 119.18 317.162 118.895 316.756 cv
118.605 316.357 118.25 316.154 117.824 316.15 cv
117.402 316.154 117.066 316.334 116.82 316.686 cv
116.504 317.143 116.348 317.979 116.348 319.197 cv
cp
121.711 322.869 mo
121.711 321.83 li
122.75 321.83 li
122.75 322.869 li
cp
124.082 319.197 mo
124.078 318.318 124.172 317.611 124.355 317.072 cv
124.535 316.541 124.805 316.127 125.164 315.83 cv
125.52 315.541 125.969 315.393 126.512 315.393 cv
126.91 315.393 127.258 315.475 127.563 315.635 cv
127.859 315.799 128.109 316.033 128.309 316.334 cv
128.504 316.639 128.656 317.006 128.77 317.439 cv
128.879 317.877 128.938 318.463 128.938 319.197 cv
128.938 320.076 128.848 320.783 128.668 321.314 cv
128.488 321.854 128.219 322.268 127.863 322.557 cv
127.504 322.85 127.055 322.99 126.512 322.994 cv
125.793 322.99 125.227 322.736 124.82 322.225 cv
124.324 321.607 124.078 320.6 124.082 319.197 cv
cp
125.023 319.197 mo
125.023 320.42 125.164 321.232 125.453 321.639 cv
125.734 322.045 126.09 322.248 126.512 322.244 cv
126.93 322.248 127.281 322.045 127.57 321.635 cv
127.855 321.232 128 320.42 128 319.197 cv
128 317.975 127.855 317.162 127.57 316.756 cv
127.281 316.357 126.926 316.154 126.5 316.15 cv
126.078 316.154 125.742 316.334 125.496 316.686 cv
125.18 317.143 125.023 317.979 125.023 319.197 cv
cp
134.676 321.99 mo
134.676 322.869 li
129.758 322.869 li
129.75 322.65 129.785 322.439 129.863 322.236 cv
129.988 321.9 130.188 321.572 130.465 321.244 cv
130.738 320.924 131.137 320.545 131.66 320.115 cv
132.469 319.455 133.016 318.932 133.301 318.541 cv
133.582 318.154 133.723 317.787 133.727 317.439 cv
133.723 317.08 133.594 316.775 133.336 316.525 cv
133.074 316.279 132.738 316.154 132.324 316.15 cv
131.883 316.154 131.531 316.287 131.27 316.549 cv
131.004 316.814 130.867 317.178 130.867 317.643 cv
129.93 317.549 li
129.992 316.846 130.234 316.311 130.656 315.943 cv
131.07 315.576 131.637 315.393 132.348 315.393 cv
133.059 315.393 133.621 315.592 134.043 315.99 cv
134.457 316.389 134.668 316.881 134.668 317.463 cv
134.668 317.764 134.605 318.057 134.484 318.342 cv
134.359 318.631 134.156 318.932 133.875 319.248 cv
133.59 319.568 133.121 320.006 132.469 320.557 cv
131.918 321.021 131.566 321.334 131.41 321.494 cv
131.254 321.662 131.125 321.826 131.027 321.99 cv
cp
f
115.406 280.17 mo
115.402 279.291 115.496 278.584 115.68 278.045 cv
115.859 277.514 116.129 277.1 116.488 276.803 cv
116.844 276.514 117.293 276.365 117.836 276.365 cv
118.234 276.365 118.582 276.447 118.887 276.607 cv
119.184 276.771 119.434 277.006 119.633 277.307 cv
119.828 277.611 119.98 277.979 120.094 278.412 cv
120.203 278.85 120.262 279.436 120.262 280.17 cv
120.262 281.049 120.172 281.756 119.992 282.287 cv
119.813 282.826 119.543 283.24 119.188 283.529 cv
118.828 283.822 118.379 283.963 117.836 283.967 cv
117.117 283.963 116.551 283.709 116.145 283.197 cv
115.648 282.58 115.402 281.572 115.406 280.17 cv
cp
116.348 280.17 mo
116.348 281.393 116.488 282.205 116.777 282.611 cv
117.059 283.018 117.414 283.221 117.836 283.217 cv
118.254 283.221 118.605 283.018 118.895 282.607 cv
119.18 282.205 119.324 281.393 119.324 280.17 cv
119.324 278.947 119.18 278.135 118.895 277.729 cv
118.605 277.33 118.25 277.127 117.824 277.123 cv
117.402 277.127 117.066 277.307 116.82 277.658 cv
116.504 278.115 116.348 278.951 116.348 280.17 cv
cp
121.711 283.842 mo
121.711 282.803 li
122.75 282.803 li
122.75 283.842 li
cp
124.082 280.17 mo
124.078 279.291 124.172 278.584 124.355 278.045 cv
124.535 277.514 124.805 277.1 125.164 276.803 cv
125.52 276.514 125.969 276.365 126.512 276.365 cv
126.91 276.365 127.258 276.447 127.563 276.607 cv
127.859 276.771 128.109 277.006 128.309 277.307 cv
128.504 277.611 128.656 277.979 128.77 278.412 cv
128.879 278.85 128.938 279.436 128.938 280.17 cv
128.938 281.049 128.848 281.756 128.668 282.287 cv
128.488 282.826 128.219 283.24 127.863 283.529 cv
127.504 283.822 127.055 283.963 126.512 283.967 cv
125.793 283.963 125.227 283.709 124.82 283.197 cv
124.324 282.58 124.078 281.572 124.082 280.17 cv
cp
125.023 280.17 mo
125.023 281.393 125.164 282.205 125.453 282.611 cv
125.734 283.018 126.09 283.221 126.512 283.217 cv
126.93 283.221 127.281 283.018 127.57 282.607 cv
127.855 282.205 128 281.393 128 280.17 cv
128 278.947 127.855 278.135 127.57 277.729 cv
127.281 277.33 126.926 277.127 126.5 277.123 cv
126.078 277.127 125.742 277.307 125.496 277.658 cv
125.18 278.115 125.023 278.951 125.023 280.17 cv
cp
132.805 283.842 mo
132.805 282.061 li
129.574 282.061 li
129.574 281.221 li
132.973 276.396 li
133.719 276.396 li
133.719 281.221 li
134.723 281.221 li
134.723 282.061 li
133.719 282.061 li
133.719 283.842 li
cp
132.805 281.221 mo
132.805 277.865 li
130.473 281.221 li
cp
f
115.406 241.143 mo
115.402 240.264 115.496 239.557 115.68 239.018 cv
115.859 238.486 116.129 238.072 116.488 237.775 cv
116.844 237.486 117.293 237.338 117.836 237.338 cv
118.234 237.338 118.582 237.42 118.887 237.58 cv
119.184 237.744 119.434 237.979 119.633 238.279 cv
119.828 238.584 119.98 238.951 120.094 239.385 cv
120.203 239.822 120.262 240.408 120.262 241.143 cv
120.262 242.021 120.172 242.729 119.992 243.26 cv
119.813 243.799 119.543 244.213 119.188 244.502 cv
118.828 244.795 118.379 244.936 117.836 244.939 cv
117.117 244.936 116.551 244.682 116.145 244.17 cv
115.648 243.553 115.402 242.545 115.406 241.143 cv
cp
116.348 241.143 mo
116.348 242.365 116.488 243.178 116.777 243.584 cv
117.059 243.99 117.414 244.193 117.836 244.189 cv
118.254 244.193 118.605 243.99 118.895 243.58 cv
119.18 243.178 119.324 242.365 119.324 241.143 cv
119.324 239.92 119.18 239.107 118.895 238.701 cv
118.605 238.303 118.25 238.1 117.824 238.096 cv
117.402 238.1 117.066 238.279 116.82 238.631 cv
116.504 239.088 116.348 239.924 116.348 241.143 cv
cp
121.711 244.814 mo
121.711 243.775 li
122.75 243.775 li
122.75 244.814 li
cp
124.082 241.143 mo
124.078 240.264 124.172 239.557 124.355 239.018 cv
124.535 238.486 124.805 238.072 125.164 237.775 cv
125.52 237.486 125.969 237.338 126.512 237.338 cv
126.91 237.338 127.258 237.42 127.563 237.58 cv
127.859 237.744 128.109 237.979 128.309 238.279 cv
128.504 238.584 128.656 238.951 128.77 239.385 cv
128.879 239.822 128.938 240.408 128.938 241.143 cv
128.938 242.021 128.848 242.729 128.668 243.26 cv
128.488 243.799 128.219 244.213 127.863 244.502 cv
127.504 244.795 127.055 244.936 126.512 244.939 cv
125.793 244.936 125.227 244.682 124.82 244.17 cv
124.324 243.553 124.078 242.545 124.082 241.143 cv
cp
125.023 241.143 mo
125.023 242.365 125.164 243.178 125.453 243.584 cv
125.734 243.99 126.09 244.193 126.512 244.189 cv
126.93 244.193 127.281 243.99 127.57 243.58 cv
127.855 243.178 128 242.365 128 241.143 cv
128 239.92 127.855 239.107 127.57 238.701 cv
127.281 238.303 126.926 238.1 126.5 238.096 cv
126.078 238.1 125.742 238.279 125.496 238.631 cv
125.18 239.088 125.023 239.924 125.023 241.143 cv
cp
134.617 239.193 mo
133.707 239.264 li
133.625 238.908 133.508 238.646 133.363 238.482 cv
133.113 238.225 132.809 238.096 132.449 238.092 cv
132.152 238.096 131.898 238.174 131.68 238.334 cv
131.391 238.545 131.164 238.854 131 239.256 cv
130.832 239.658 130.746 240.232 130.742 240.975 cv
130.961 240.643 131.227 240.393 131.547 240.229 cv
131.863 240.068 132.199 239.986 132.551 239.986 cv
133.156 239.986 133.676 240.213 134.105 240.658 cv
134.531 241.111 134.742 241.689 134.746 242.396 cv
134.742 242.869 134.645 243.303 134.445 243.701 cv
134.242 244.104 133.965 244.412 133.613 244.623 cv
133.262 244.834 132.863 244.936 132.418 244.939 cv
131.652 244.936 131.027 244.658 130.551 244.1 cv
130.066 243.541 129.828 242.619 129.832 241.33 cv
129.828 239.896 130.094 238.85 130.629 238.193 cv
131.09 237.623 131.715 237.338 132.504 237.338 cv
133.086 237.338 133.566 237.506 133.941 237.834 cv
134.316 238.166 134.539 238.619 134.617 239.193 cv
cp
130.883 242.4 mo
130.883 242.717 130.949 243.021 131.082 243.307 cv
131.215 243.596 131.402 243.814 131.645 243.963 cv
131.883 244.119 132.133 244.193 132.402 244.189 cv
132.785 244.193 133.117 244.037 133.395 243.725 cv
133.672 243.412 133.813 242.99 133.813 242.455 cv
133.813 241.943 133.676 241.537 133.402 241.236 cv
133.129 240.943 132.781 240.795 132.367 240.791 cv
131.949 240.795 131.598 240.943 131.313 241.236 cv
131.023 241.537 130.883 241.924 130.883 242.4 cv
cp
f
115.406 202.119 mo
115.402 201.24 115.496 200.533 115.68 199.994 cv
115.859 199.463 116.129 199.049 116.488 198.752 cv
116.844 198.463 117.293 198.314 117.836 198.314 cv
118.234 198.314 118.582 198.396 118.887 198.557 cv
119.184 198.721 119.434 198.955 119.633 199.256 cv
119.828 199.561 119.98 199.928 120.094 200.361 cv
120.203 200.799 120.262 201.385 120.262 202.119 cv
120.262 202.998 120.172 203.705 119.992 204.236 cv
119.813 204.775 119.543 205.189 119.188 205.479 cv
118.828 205.771 118.379 205.912 117.836 205.916 cv
117.117 205.912 116.551 205.658 116.145 205.146 cv
115.648 204.529 115.402 203.521 115.406 202.119 cv
cp
116.348 202.119 mo
116.348 203.342 116.488 204.154 116.777 204.561 cv
117.059 204.967 117.414 205.17 117.836 205.166 cv
118.254 205.17 118.605 204.967 118.895 204.557 cv
119.18 204.154 119.324 203.342 119.324 202.119 cv
119.324 200.896 119.18 200.084 118.895 199.678 cv
118.605 199.279 118.25 199.076 117.824 199.072 cv
117.402 199.076 117.066 199.256 116.82 199.607 cv
116.504 200.064 116.348 200.9 116.348 202.119 cv
cp
121.711 205.791 mo
121.711 204.752 li
122.75 204.752 li
122.75 205.791 li
cp
124.082 202.119 mo
124.078 201.24 124.172 200.533 124.355 199.994 cv
124.535 199.463 124.805 199.049 125.164 198.752 cv
125.52 198.463 125.969 198.314 126.512 198.314 cv
126.91 198.314 127.258 198.396 127.563 198.557 cv
127.859 198.721 128.109 198.955 128.309 199.256 cv
128.504 199.561 128.656 199.928 128.77 200.361 cv
128.879 200.799 128.938 201.385 128.938 202.119 cv
128.938 202.998 128.848 203.705 128.668 204.236 cv
128.488 204.775 128.219 205.189 127.863 205.479 cv
127.504 205.771 127.055 205.912 126.512 205.916 cv
125.793 205.912 125.227 205.658 124.82 205.146 cv
124.324 204.529 124.078 203.521 124.082 202.119 cv
cp
125.023 202.119 mo
125.023 203.342 125.164 204.154 125.453 204.561 cv
125.734 204.967 126.09 205.17 126.512 205.166 cv
126.93 205.17 127.281 204.967 127.57 204.557 cv
127.855 204.154 128 203.342 128 202.119 cv
128 200.896 127.855 200.084 127.57 199.678 cv
127.281 199.279 126.926 199.076 126.5 199.072 cv
126.078 199.076 125.742 199.256 125.496 199.607 cv
125.18 200.064 125.023 200.9 125.023 202.119 cv
cp
131.281 201.752 mo
130.898 201.619 130.617 201.42 130.438 201.162 cv
130.254 200.904 130.16 200.596 130.164 200.236 cv
130.16 199.697 130.355 199.244 130.746 198.869 cv
131.133 198.502 131.652 198.314 132.301 198.314 cv
132.949 198.314 133.473 198.506 133.871 198.881 cv
134.266 199.264 134.461 199.721 134.465 200.26 cv
134.461 200.607 134.371 200.908 134.191 201.162 cv
134.008 201.42 133.734 201.619 133.367 201.752 cv
133.82 201.908 134.168 202.146 134.41 202.475 cv
134.648 202.807 134.766 203.205 134.77 203.662 cv
134.766 204.303 134.543 204.838 134.094 205.268 cv
133.641 205.701 133.047 205.912 132.316 205.916 cv
131.578 205.912 130.984 205.697 130.539 205.264 cv
130.086 204.83 129.863 204.291 129.863 203.639 cv
129.863 203.158 129.984 202.752 130.23 202.424 cv
130.473 202.1 130.824 201.877 131.281 201.752 cv
cp
131.098 200.205 mo
131.094 200.561 131.207 200.846 131.438 201.068 cv
131.66 201.295 131.953 201.408 132.32 201.404 cv
132.668 201.408 132.957 201.299 133.184 201.072 cv
133.406 200.854 133.52 200.58 133.523 200.256 cv
133.52 199.924 133.402 199.643 133.176 199.412 cv
132.941 199.186 132.652 199.072 132.309 199.068 cv
131.957 199.072 131.668 199.182 131.441 199.404 cv
131.207 199.627 131.094 199.896 131.098 200.205 cv
cp
130.801 203.643 mo
130.801 203.904 130.859 204.158 130.984 204.4 cv
131.105 204.646 131.289 204.834 131.535 204.967 cv
131.777 205.104 132.043 205.17 132.324 205.166 cv
132.762 205.17 133.121 205.029 133.406 204.744 cv
133.688 204.467 133.828 204.111 133.832 203.674 cv
133.828 203.236 133.684 202.873 133.395 202.584 cv
133.102 202.299 132.734 202.154 132.297 202.15 cv
131.863 202.154 131.508 202.295 131.227 202.576 cv
130.941 202.861 130.801 203.217 130.801 203.643 cv
cp
f
121.809 163.092 mo
121.805 162.213 121.898 161.506 122.082 160.967 cv
122.262 160.436 122.531 160.021 122.891 159.725 cv
123.246 159.436 123.695 159.287 124.238 159.287 cv
124.637 159.287 124.984 159.369 125.289 159.529 cv
125.586 159.693 125.836 159.928 126.035 160.229 cv
126.23 160.533 126.383 160.9 126.496 161.334 cv
126.605 161.771 126.664 162.357 126.664 163.092 cv
126.664 163.971 126.574 164.678 126.395 165.209 cv
126.215 165.748 125.945 166.162 125.59 166.451 cv
125.23 166.744 124.781 166.885 124.238 166.889 cv
123.52 166.885 122.953 166.631 122.547 166.119 cv
122.051 165.502 121.805 164.494 121.809 163.092 cv
cp
122.75 163.092 mo
122.75 164.314 122.891 165.127 123.18 165.533 cv
123.461 165.939 123.816 166.143 124.238 166.139 cv
124.656 166.143 125.008 165.939 125.297 165.529 cv
125.582 165.127 125.727 164.314 125.727 163.092 cv
125.727 161.869 125.582 161.057 125.297 160.65 cv
125.008 160.252 124.652 160.049 124.227 160.045 cv
123.805 160.049 123.469 160.229 123.223 160.58 cv
122.906 161.037 122.75 161.873 122.75 163.092 cv
cp
128.113 166.764 mo
128.113 165.725 li
129.152 165.725 li
129.152 166.764 li
cp
133.926 166.764 mo
133.012 166.764 li
133.012 160.939 li
132.785 161.15 132.496 161.361 132.145 161.572 cv
131.785 161.783 131.465 161.939 131.184 162.041 cv
131.184 161.158 li
131.691 160.92 132.141 160.627 132.523 160.283 cv
132.906 159.943 133.176 159.611 133.336 159.287 cv
133.926 159.287 li
cp
f
115.406 124.064 mo
115.402 123.186 115.496 122.479 115.68 121.939 cv
115.859 121.408 116.129 120.994 116.488 120.697 cv
116.844 120.408 117.293 120.26 117.836 120.26 cv
118.234 120.26 118.582 120.342 118.887 120.502 cv
119.184 120.666 119.434 120.9 119.633 121.201 cv
119.828 121.506 119.98 121.873 120.094 122.307 cv
120.203 122.744 120.262 123.33 120.262 124.064 cv
120.262 124.943 120.172 125.65 119.992 126.182 cv
119.813 126.721 119.543 127.135 119.188 127.424 cv
118.828 127.717 118.379 127.857 117.836 127.861 cv
117.117 127.857 116.551 127.604 116.145 127.092 cv
115.648 126.475 115.402 125.467 115.406 124.064 cv
cp
116.348 124.064 mo
116.348 125.287 116.488 126.1 116.777 126.506 cv
117.059 126.912 117.414 127.115 117.836 127.111 cv
118.254 127.115 118.605 126.912 118.895 126.502 cv
119.18 126.1 119.324 125.287 119.324 124.064 cv
119.324 122.842 119.18 122.029 118.895 121.623 cv
118.605 121.225 118.25 121.021 117.824 121.018 cv
117.402 121.021 117.066 121.201 116.82 121.553 cv
116.504 122.01 116.348 122.846 116.348 124.064 cv
cp
121.711 127.736 mo
121.711 126.697 li
122.75 126.697 li
122.75 127.736 li
cp
127.527 127.736 mo
126.613 127.736 li
126.613 121.912 li
126.387 122.123 126.098 122.334 125.746 122.545 cv
125.387 122.756 125.066 122.912 124.785 123.014 cv
124.785 122.131 li
125.293 121.893 125.742 121.6 126.125 121.256 cv
126.508 120.916 126.777 120.584 126.938 120.26 cv
127.527 120.26 li
cp
134.676 126.857 mo
134.676 127.736 li
129.758 127.736 li
129.75 127.518 129.785 127.307 129.863 127.104 cv
129.988 126.768 130.188 126.439 130.465 126.111 cv
130.738 125.791 131.137 125.412 131.66 124.982 cv
132.469 124.322 133.016 123.799 133.301 123.408 cv
133.582 123.021 133.723 122.654 133.727 122.307 cv
133.723 121.947 133.594 121.643 133.336 121.393 cv
133.074 121.146 132.738 121.021 132.324 121.018 cv
131.883 121.021 131.531 121.154 131.27 121.416 cv
131.004 121.682 130.867 122.045 130.867 122.51 cv
129.93 122.416 li
129.992 121.713 130.234 121.178 130.656 120.811 cv
131.07 120.443 131.637 120.26 132.348 120.26 cv
133.059 120.26 133.621 120.459 134.043 120.857 cv
134.457 121.256 134.668 121.748 134.668 122.33 cv
134.668 122.631 134.605 122.924 134.484 123.209 cv
134.359 123.498 134.156 123.799 133.875 124.115 cv
133.59 124.436 133.121 124.873 132.469 125.424 cv
131.918 125.889 131.566 126.201 131.41 126.361 cv
131.254 126.529 131.125 126.693 131.027 126.857 cv
cp
f
115.406 85.0415 mo
115.402 84.1625 115.496 83.4555 115.68 82.9165 cv
115.859 82.3855 116.129 81.9715 116.488 81.6745 cv
116.844 81.3855 117.293 81.2365 117.836 81.2365 cv
118.234 81.2365 118.582 81.3185 118.887 81.4795 cv
119.184 81.6435 119.434 81.8775 119.633 82.1785 cv
119.828 82.4825 119.98 82.8505 120.094 83.2835 cv
120.203 83.7215 120.262 84.3075 120.262 85.0415 cv
120.262 85.9205 120.172 86.6275 119.992 87.1585 cv
119.813 87.6975 119.543 88.1115 119.188 88.4005 cv
118.828 88.6935 118.379 88.8345 117.836 88.8385 cv
117.117 88.8345 116.551 88.5805 116.145 88.0685 cv
115.648 87.4515 115.402 86.4435 115.406 85.0415 cv
cp
116.348 85.0415 mo
116.348 86.2645 116.488 87.0765 116.777 87.4825 cv
117.059 87.8895 117.414 88.0925 117.836 88.0885 cv
118.254 88.0925 118.605 87.8895 118.895 87.4795 cv
119.18 87.0765 119.324 86.2645 119.324 85.0415 cv
119.324 83.8185 119.18 83.0065 118.895 82.6005 cv
118.605 82.2015 118.25 81.9985 117.824 81.9945 cv
117.402 81.9985 117.066 82.1785 116.82 82.5295 cv
116.504 82.9865 116.348 83.8225 116.348 85.0415 cv
cp
121.711 88.7135 mo
121.711 87.6745 li
122.75 87.6745 li
122.75 88.7135 li
cp
127.527 88.7135 mo
126.613 88.7135 li
126.613 82.8895 li
126.387 83.1005 126.098 83.3115 125.746 83.5215 cv
125.387 83.7325 125.066 83.8895 124.785 83.9905 cv
124.785 83.1075 li
125.293 82.8695 125.742 82.5765 126.125 82.2325 cv
126.508 81.8935 126.777 81.5615 126.938 81.2365 cv
127.527 81.2365 li
cp
132.805 88.7135 mo
132.805 86.9325 li
129.574 86.9325 li
129.574 86.0925 li
132.973 81.2685 li
133.719 81.2685 li
133.719 86.0925 li
134.723 86.0925 li
134.723 86.9325 li
133.719 86.9325 li
133.719 88.7135 li
cp
132.805 86.0925 mo
132.805 82.7365 li
130.473 86.0925 li
cp
f
115.406 46.0145 mo
115.402 45.1355 115.496 44.4285 115.68 43.8895 cv
115.859 43.3575 116.129 42.9435 116.488 42.6465 cv
116.844 42.3575 117.293 42.2095 117.836 42.2095 cv
118.234 42.2095 118.582 42.2915 118.887 42.4515 cv
119.184 42.6155 119.434 42.8505 119.633 43.1505 cv
119.828 43.4555 119.98 43.8225 120.094 44.2565 cv
120.203 44.6935 120.262 45.2795 120.262 46.0145 cv
120.262 46.8935 120.172 47.6005 119.992 48.1315 cv
119.813 48.6705 119.543 49.0845 119.188 49.3735 cv
118.828 49.6665 118.379 49.8075 117.836 49.8115 cv
117.117 49.8075 116.551 49.5535 116.145 49.0415 cv
115.648 48.4245 115.402 47.4165 115.406 46.0145 cv
cp
116.348 46.0145 mo
116.348 47.2365 116.488 48.0495 116.777 48.4555 cv
117.059 48.8615 117.414 49.0645 117.836 49.0615 cv
118.254 49.0645 118.605 48.8615 118.895 48.4515 cv
119.18 48.0495 119.324 47.2365 119.324 46.0145 cv
119.324 44.7915 119.18 43.9795 118.895 43.5725 cv
118.605 43.1745 118.25 42.9715 117.824 42.9675 cv
117.402 42.9715 117.066 43.1505 116.82 43.5025 cv
116.504 43.9595 116.348 44.7955 116.348 46.0145 cv
cp
121.711 49.6865 mo
121.711 48.6465 li
122.75 48.6465 li
122.75 49.6865 li
cp
127.527 49.6865 mo
126.613 49.6865 li
126.613 43.8615 li
126.387 44.0725 126.098 44.2835 125.746 44.4945 cv
125.387 44.7055 125.066 44.8615 124.785 44.9635 cv
124.785 44.0805 li
125.293 43.8425 125.742 43.5495 126.125 43.2055 cv
126.508 42.8655 126.777 42.5335 126.938 42.2095 cv
127.527 42.2095 li
cp
134.617 44.0645 mo
133.707 44.1355 li
133.625 43.7795 133.508 43.5185 133.363 43.3545 cv
133.113 43.0965 132.809 42.9675 132.449 42.9635 cv
132.152 42.9675 131.898 43.0455 131.68 43.2055 cv
131.391 43.4165 131.164 43.7255 131 44.1275 cv
130.832 44.5295 130.746 45.1045 130.742 45.8465 cv
130.961 45.5145 131.227 45.2645 131.547 45.1005 cv
131.863 44.9395 132.199 44.8575 132.551 44.8575 cv
133.156 44.8575 133.676 45.0845 134.105 45.5295 cv
134.531 45.9825 134.742 46.5615 134.746 47.2685 cv
134.742 47.7405 134.645 48.1745 134.445 48.5725 cv
134.242 48.9755 133.965 49.2835 133.613 49.4945 cv
133.262 49.7055 132.863 49.8075 132.418 49.8115 cv
131.652 49.8075 131.027 49.5295 130.551 48.9715 cv
130.066 48.4125 129.828 47.4905 129.832 46.2015 cv
129.828 44.7685 130.094 43.7215 130.629 43.0645 cv
131.09 42.4945 131.715 42.2095 132.504 42.2095 cv
133.086 42.2095 133.566 42.3775 133.941 42.7055 cv
134.316 43.0375 134.539 43.4905 134.617 44.0645 cv
cp
130.883 47.2715 mo
130.883 47.5885 130.949 47.8935 131.082 48.1785 cv
131.215 48.4675 131.402 48.6865 131.645 48.8345 cv
131.883 48.9905 132.133 49.0645 132.402 49.0615 cv
132.785 49.0645 133.117 48.9085 133.395 48.5965 cv
133.672 48.2835 133.813 47.8615 133.813 47.3265 cv
133.813 46.8145 133.676 46.4085 133.402 46.1075 cv
133.129 45.8145 132.781 45.6665 132.367 45.6625 cv
131.949 45.6665 131.598 45.8145 131.313 46.1075 cv
131.023 46.4085 130.883 46.7955 130.883 47.2715 cv
cp
f
0 lc
2 lj
145.223 314.4 mo
148.043 365.662 li
150.863 427.666 li
153.684 390.963 li
156.508 316.705 li
159.328 302.881 li
162.148 387.799 li
164.969 434.986 li
167.793 341.764 li
170.613 293.01 li
173.434 335.42 li
176.258 415.186 li
179.078 431.631 li
181.898 335.283 li
184.719 282.002 li
187.543 327.479 li
190.363 391.084 li
193.184 403.147 li
196.004 355.525 li
198.828 330.701 li
201.648 368.885 li
204.469 400.6 li
207.289 354.717 li
210.113 328.42 li
212.934 357.596 li
215.754 314.897 li
218.574 286.744 li
221.398 349.701 li
224.219 364.764 li
227.039 348.385 li
229.863 330.51 li
232.684 329.025 li
235.504 338.639 li
238.324 340.123 li
241.148 343.314 li
243.969 334.26 li
246.789 334.318 li
249.609 337.232 li
252.434 337.135 li
255.254 337.443 li
258.074 336.904 li
260.895 336.369 li
263.719 336.373 li
266.539 336.049 li
269.359 337.459 li
272.18 326.631 li
275.004 321.381 li
277.824 357.604 li
280.645 407.873 li
283.465 404.037 li
.875212 .526726 .00314336 .000793469 cmyk
@
283.465 404.037 mo
286.289 332.217 li
289.109 308.811 li
291.93 364.045 li
294.754 406.807 li
297.574 403.693 li
300.395 341.389 li
303.215 311.482 li
306.039 361.799 li
308.859 414.252 li
311.68 412.229 li
314.5 338.346 li
317.324 311.022 li
320.145 348.857 li
322.965 404.467 li
325.785 413.186 li
328.609 351.002 li
331.43 328.924 li
334.25 363.756 li
337.07 379.088 li
339.895 362.725 li
342.715 356.4 li
345.535 363.654 li
348.355 319.26 li
351.18 284.787 li
354 300.424 li
356.82 323.147 li
359.645 336.041 li
362.465 327.174 li
365.285 332.639 li
368.105 333.67 li
370.93 334.275 li
373.75 336.15 li
376.57 335.709 li
379.391 335.107 li
382.215 336.545 li
385.035 336.666 li
387.855 335.857 li
390.676 335.92 li
393.5 336.158 li
396.32 336.549 li
399.141 336.869 li
401.961 336.397 li
404.785 335.424 li
407.605 329.893 li
410.426 352.143 li
413.246 399.6 li
416.07 394.35 li
418.891 334.58 li
421.711 315.772 li
@
421.711 315.772 mo
424.535 362.522 li
427.355 406.99 li
430.176 387.83 li
432.996 329.408 li
435.82 320.807 li
438.641 365.572 li
441.461 410.299 li
444.281 394.197 li
447.105 327.787 li
449.926 319.561 li
452.746 366.756 li
455.566 395.967 li
458.391 380.494 li
461.211 330.67 li
464.031 325.701 li
466.852 376.842 li
469.676 387.818 li
472.496 365.057 li
475.316 352.033 li
478.137 351.51 li
480.961 383.041 li
483.781 365.076 li
486.602 322.838 li
489.426 345.994 li
492.246 351.049 li
495.066 320.904 li
497.887 334.268 li
500.711 359.936 li
503.531 348.854 li
506.352 331.123 li
509.172 327.963 li
511.996 333.057 li
514.816 333.736 li
517.637 338.643 li
520.457 346.092 li
523.281 346.979 li
526.102 344.647 li
528.922 342.357 li
531.742 344.068 li
534.566 345.311 li
537.387 343.416 li
540.207 343.455 li
543.031 344.275 li
545.852 343.486 li
548.672 343.725 li
551.492 343.885 li
554.316 343.654 li
557.137 344.08 li
559.957 344.143 li
@
559.957 344.143 mo
562.777 344.189 li
565.602 344.15 li
568.422 343.443 li
571.242 343.229 li
574.063 343.682 li
576.887 343.838 li
579.707 379.205 li
582.527 388.764 li
585.348 343.318 li
588.172 334.408 li
590.992 368.514 li
593.813 388.295 li
596.633 361.834 li
599.457 334.115 li
602.277 342.33 li
605.098 382.982 li
607.922 399.775 li
610.742 364.963 li
613.563 336.432 li
616.383 340.928 li
619.207 378.311 li
622.027 390.822 li
624.848 363.256 li
627.668 352.814 li
630.492 350.522 li
633.313 359.022 li
636.133 350.6 li
638.953 329.326 li
641.777 346.4 li
644.598 355.979 li
647.418 338.912 li
650.238 341.611 li
653.063 356.678 li
655.883 354.471 li
658.703 346.244 li
661.523 348.365 li
664.348 353.139 li
667.168 352.689 li
669.988 352.268 li
672.813 352.369 li
675.633 352.213 li
678.453 351.709 li
681.273 351.189 li
684.098 351.529 li
686.918 351.24 li
689.738 349.588 li
692.559 346.986 li
695.383 347.131 li
698.203 343.772 li
@
698.203 343.772 mo
701.023 330.838 li
703.844 327.58 li
706.668 336.088 li
709.488 335.783 li
712.309 334.662 li
715.129 341.01 li
717.953 349.807 li
720.773 354.834 li
723.594 356.389 li
726.414 372.643 li
729.238 376.158 li
732.059 358.975 li
734.879 353.928 li
737.703 352.693 li
740.523 351.705 li
743.344 353.314 li
746.164 351.994 li
748.988 343.225 li
751.809 353.139 li
754.629 379.084 li
757.449 383.654 li
760.273 350.248 li
763.094 335.025 li
765.914 366.092 li
768.734 391.35 li
771.559 374.131 li
774.379 339.463 li
777.199 341.193 li
780.02 367.705 li
782.844 384.873 li
785.664 367.725 li
788.484 341.045 li
791.309 341.381 li
794.129 371.494 li
796.949 378.572 li
799.77 358.357 li
802.594 356.967 li
805.414 350.225 li
808.234 325.15 li
811.055 320.592 li
813.879 335.811 li
816.699 339.588 li
819.52 329.627 li
822.34 327.08 li
825.164 333.307 li
827.984 331.408 li
830.805 326.865 li
833.625 323.838 li
836.449 324.643 li
@
836.449 324.643 mo
839.27 328.689 li
842.09 330.643 li
844.91 329.451 li
847.734 327.588 li
850.555 326.432 li
853.375 331.533 li
856.199 354.162 li
859.02 381.779 li
861.84 384.174 li
864.66 353.166 li
867.484 334.904 li
870.305 358.682 li
873.125 379.022 li
875.945 373.147 li
878.77 345.939 li
881.59 336.338 li
884.41 360.779 li
887.23 383.025 li
890.055 366.256 li
892.875 332.889 li
895.695 337.361 li
898.516 364.627 li
901.34 382.877 li
904.16 363.916 li
906.98 340.311 li
909.801 347.314 li
912.625 364.537 li
915.445 364.959 li
918.266 356.647 li
921.09 361.916 li
923.91 357.639 li
926.73 348.193 li
929.551 354.248 li
932.375 342.541 li
935.195 334.381 li
938.016 343.432 li
940.836 344.604 li
943.66 350.49 li
946.48 355.389 li
949.301 356.143 li
952.121 356.318 li
954.945 356.756 li
957.766 356.881 li
960.586 357.045 li
963.406 356.951 li
966.23 357.045 li
969.051 357.061 li
971.871 357.037 li
974.695 357.049 li
@
974.695 357.049 mo
977.516 362.861 li
980.336 370.838 li
983.156 374.522 li
985.98 355.9 li
988.801 340.1 li
988.883 340.693 li
@
145.223 94.2485 mo
148.043 41.6785 li
150.863 31.3145 li
153.684 54.6625 li
156.508 24.4125 li
159.328 51.9945 li
162.148 77.5575 li
164.969 31.6475 li
167.793 49.5965 li
170.613 54.2755 li
173.434 68.9325 li
176.258 112.385 li
179.078 79.7325 li
181.898 60.7725 li
184.719 59.7835 li
187.543 49.7215 li
190.363 47.8345 li
193.184 38.9985 li
196.004 52.6705 li
198.828 97.6045 li
201.648 102.76 li
204.469 68.0725 li
207.289 118.654 li
210.113 204.111 li
212.934 262.912 li
215.754 275.482 li
218.574 356.932 li
221.398 397.193 li
224.219 318.264 li
227.039 302.658 li
229.863 298.162 li
232.684 303.662 li
235.504 310.482 li
238.324 305.029 li
241.148 307.74 li
243.969 315.998 li
246.789 318.279 li
249.609 313.951 li
252.434 314.307 li
255.254 313.9 li
258.074 312.357 li
260.895 313.326 li
263.719 313.732 li
266.539 313.213 li
269.359 313.959 li
272.18 259.869 li
275.004 170.678 li
277.824 138.928 li
280.645 140.279 li
283.465 118.674 li
.0951247 .812772 1 .0193484 cmyk
@
283.465 118.674 mo
286.289 115.1 li
289.109 125.709 li
291.93 131.963 li
294.754 142.83 li
297.574 119.322 li
300.395 119.018 li
303.215 133.971 li
306.039 142.975 li
308.859 165.998 li
311.68 155.83 li
314.5 133.51 li
317.324 137.197 li
320.145 138.299 li
322.965 153.932 li
325.785 142.924 li
328.609 135.768 li
331.43 182.811 li
334.25 209.865 li
337.07 184.635 li
339.895 223.135 li
342.715 275.635 li
345.535 261.482 li
348.355 285.58 li
351.18 304.627 li
354 322.201 li
356.82 328.205 li
359.645 307.189 li
362.465 327.666 li
365.285 349.471 li
368.105 339.439 li
370.93 331.932 li
373.75 330.197 li
376.57 336.338 li
379.391 340.916 li
382.215 340.549 li
385.035 337.428 li
387.855 335.162 li
390.676 336.584 li
393.5 337.4 li
396.32 336.76 li
399.141 337.225 li
401.961 339.268 li
404.785 341.869 li
407.605 266.533 li
410.426 176.67 li
413.246 180.393 li
416.07 181.748 li
418.891 179.932 li
421.711 187.846 li
@
421.711 187.846 mo
424.535 175.037 li
427.355 181.4 li
430.176 173.643 li
432.996 176.252 li
435.82 194.451 li
438.641 178.416 li
441.461 190.326 li
444.281 188.143 li
447.105 187.307 li
449.926 201.689 li
452.746 184.088 li
455.566 175.85 li
458.391 188.787 li
461.211 199.959 li
464.031 198.689 li
466.852 197.049 li
469.676 195.182 li
472.496 196.553 li
475.316 188.291 li
478.137 190.088 li
480.961 213.436 li
483.781 231.342 li
486.602 291.166 li
489.426 301.791 li
492.246 289.416 li
495.066 323.131 li
497.887 321.193 li
500.711 311.424 li
503.531 303.209 li
506.352 320.74 li
509.172 347.506 li
511.996 354.451 li
514.816 350.775 li
517.637 339.436 li
520.457 332.947 li
523.281 338.522 li
526.102 346.975 li
528.922 352.068 li
531.742 348.772 li
534.566 345.955 li
537.387 349.572 li
540.207 350.58 li
543.031 349.666 li
545.852 349.365 li
548.672 349.627 li
551.492 349.908 li
554.316 350.475 li
557.137 350.451 li
559.957 350.295 li
@
559.957 350.295 mo
562.777 350.412 li
565.602 350.123 li
568.422 349.822 li
571.242 350.193 li
574.063 350.045 li
576.887 350.338 li
579.707 279.83 li
582.527 231.291 li
585.348 236.623 li
588.172 229.314 li
590.992 245.404 li
593.813 230.201 li
596.633 222.107 li
599.457 220.666 li
602.277 214.24 li
605.098 229.834 li
607.922 228.99 li
610.742 224.189 li
613.563 215.002 li
616.383 223.26 li
619.207 227.76 li
622.027 231.975 li
624.848 252.607 li
627.668 244.818 li
630.492 254.775 li
633.313 265.158 li
636.133 282.838 li
638.953 312.311 li
641.777 312.486 li
644.598 313.717 li
647.418 331.803 li
650.238 340.471 li
653.063 330.51 li
655.883 332.678 li
658.703 345.08 li
661.523 348.74 li
664.348 350.443 li
667.168 352.736 li
669.988 352.217 li
672.813 352.275 li
675.633 351.857 li
678.453 351.775 li
681.273 352.311 li
684.098 353.209 li
686.918 353.67 li
689.738 352.158 li
692.559 346.518 li
695.383 341.455 li
698.203 344.104 li
@
698.203 344.104 mo
701.023 340.615 li
703.844 327.373 li
706.668 308.564 li
709.488 284.018 li
712.309 264.666 li
715.129 252.736 li
717.953 244.729 li
720.773 238.857 li
723.594 233.514 li
726.414 233.268 li
729.238 236.459 li
732.059 238.846 li
734.879 241.096 li
737.703 241.166 li
740.523 241.311 li
743.344 241.123 li
746.164 240.834 li
748.988 240.408 li
751.809 245.592 li
754.629 260.748 li
757.449 250.842 li
760.273 248.795 li
763.094 258.658 li
765.914 250.611 li
768.734 240.736 li
771.559 235.854 li
774.379 248.041 li
777.199 253.057 li
780.02 249.4 li
782.844 249.971 li
785.664 242.9 li
788.484 241.908 li
791.309 248.299 li
794.129 256.822 li
796.949 269.697 li
799.77 281.459 li
802.594 288.232 li
805.414 312.51 li
808.234 338.119 li
811.055 329.647 li
813.879 328.404 li
816.699 330.885 li
819.52 332.088 li
822.34 337.377 li
825.164 337.049 li
827.984 345.615 li
830.805 354.877 li
833.625 353.561 li
836.449 348.232 li
@
836.449 348.232 mo
839.27 343.635 li
842.09 341.959 li
844.91 344.951 li
847.734 348.924 li
850.555 349.982 li
853.375 331.885 li
856.199 282.764 li
859.02 253.814 li
861.84 251.037 li
864.66 246.107 li
867.484 255.775 li
870.305 254.357 li
873.125 259.338 li
875.945 247.834 li
878.77 246.904 li
881.59 270.869 li
884.41 257.393 li
887.23 249.732 li
890.055 243.658 li
892.875 257.604 li
895.695 270.588 li
898.516 254.131 li
901.34 251.369 li
904.16 253.545 li
906.98 259.092 li
909.801 261.357 li
912.625 254.662 li
915.445 259.561 li
918.266 286.904 li
921.09 298.178 li
923.91 318.033 li
926.73 325.596 li
929.551 321.533 li
932.375 342.033 li
935.195 342.529 li
938.016 370.814 li
940.836 379.4 li
943.66 355.014 li
946.48 353.35 li
949.301 353.654 li
952.121 353.756 li
954.945 353.479 li
957.766 353.561 li
960.586 353.693 li
963.406 353.584 li
966.23 353.311 li
969.051 353.428 li
971.871 353.467 li
974.695 353.236 li
@
974.695 353.236 mo
977.516 349.658 li
980.336 308.584 li
983.156 272.104 li
985.98 267.455 li
988.801 265.115 li
988.883 265.166 li
@
145.223 304.963 mo
148.043 402.557 li
150.863 405.932 li
153.684 361.322 li
156.508 366.154 li
159.328 404.932 li
162.148 430.986 li
164.969 425.713 li
167.793 427.822 li
170.613 410.549 li
173.434 387.498 li
176.258 419.15 li
179.078 406.947 li
181.898 397.975 li
184.719 403.346 li
187.543 381.064 li
190.363 414.959 li
193.184 446.143 li
196.004 415.311 li
198.828 363.369 li
201.648 320.584 li
204.469 290.436 li
207.289 243.342 li
210.113 158.432 li
212.934 124.756 li
215.754 67.9595 li
218.574 17.6005 li
221.398 97.2175 li
224.219 148.135 li
227.039 128.397 li
229.863 89.2795 li
232.684 76.4475 li
235.504 101.822 li
238.324 114.971 li
241.148 112.213 li
243.969 104.127 li
246.789 104.201 li
249.609 112.881 li
252.434 114.885 li
255.254 115.072 li
258.074 118.186 li
260.895 119.045 li
263.719 120.303 li
266.539 122.006 li
269.359 122.51 li
272.18 197.982 li
275.004 316.471 li
277.824 374.604 li
280.645 396.279 li
283.465 379.709 li
.0729076 .314366 1 0 cmyk
@
283.465 379.709 mo
286.289 355.928 li
289.109 359.127 li
291.93 366.412 li
294.754 384.807 li
297.574 389.779 li
300.395 373.67 li
303.215 360.982 li
306.039 371.189 li
308.859 394.725 li
311.68 390.623 li
314.5 371.561 li
317.324 373.76 li
320.145 387.428 li
322.965 418.002 li
325.785 427.615 li
328.609 406.885 li
331.43 380.74 li
334.25 336.729 li
337.07 281.893 li
339.895 226.982 li
342.715 201.377 li
345.535 187.678 li
348.355 166.662 li
351.18 143.197 li
354 144.439 li
356.82 170.799 li
359.645 174.147 li
362.465 162.975 li
365.285 156.568 li
368.105 160.397 li
370.93 169.479 li
373.75 170.283 li
376.57 168.67 li
379.391 166.951 li
382.215 167.115 li
385.035 169.897 li
387.855 172.986 li
390.676 173.393 li
393.5 173.471 li
396.32 175.307 li
399.141 176.869 li
401.961 176.877 li
404.785 175.783 li
407.605 279.986 li
410.426 368.123 li
413.246 376.533 li
416.07 384.846 li
418.891 378.939 li
421.711 372.74 li
@
421.711 372.74 mo
424.535 372.553 li
427.355 394.662 li
430.176 386.803 li
432.996 382.236 li
435.82 376.729 li
438.641 368.592 li
441.461 387.564 li
444.281 382.463 li
447.105 378.643 li
449.926 377.533 li
452.746 381.088 li
455.566 386.037 li
458.391 380.979 li
461.211 386.432 li
464.031 373.686 li
466.852 392.178 li
469.676 418.705 li
472.496 401.397 li
475.316 364.209 li
478.137 334.975 li
480.961 320.451 li
483.781 299.037 li
486.602 256.869 li
489.426 211.076 li
492.246 201.772 li
495.066 196.471 li
497.887 188.85 li
500.711 212.861 li
503.531 220.193 li
506.352 200.049 li
509.172 190.061 li
511.996 191.818 li
514.816 202.799 li
517.637 212.467 li
520.457 211.643 li
523.281 207.525 li
526.102 204.9 li
528.922 205.463 li
531.742 209.213 li
534.566 210.006 li
537.387 208.65 li
540.207 210.115 li
543.031 210.6 li
545.852 210.967 li
548.672 212.135 li
551.492 212.639 li
554.316 213.303 li
557.137 214.01 li
559.957 214.373 li
@
559.957 214.373 mo
562.777 215.002 li
565.602 215.377 li
568.422 216.166 li
571.242 216.916 li
574.063 217.049 li
576.887 217.381 li
579.707 293.557 li
582.527 378.787 li
585.348 377.115 li
588.172 362.713 li
590.992 371.412 li
593.813 370.772 li
596.633 357.857 li
599.457 356.424 li
602.277 361.076 li
605.098 382.932 li
607.922 382.787 li
610.742 378.178 li
613.563 373.541 li
616.383 383.865 li
619.207 408.869 li
622.027 382.936 li
624.848 343.822 li
627.668 326.022 li
630.492 309.049 li
633.313 292.182 li
636.133 256.588 li
638.953 219.498 li
641.777 239.119 li
644.598 248.643 li
647.418 218.705 li
650.238 214.846 li
653.063 232.658 li
655.883 228.045 li
658.703 220.604 li
661.523 229.529 li
664.348 233.275 li
667.168 231.865 li
669.988 232.658 li
672.813 233.35 li
675.633 233.072 li
678.453 233.385 li
681.273 233.76 li
684.098 232.814 li
686.918 232.307 li
689.738 233.354 li
692.559 236.545 li
695.383 232.041 li
698.203 221.166 li
@
698.203 221.166 mo
701.023 218.951 li
703.844 236.662 li
706.668 267.686 li
709.488 296.209 li
712.309 317.041 li
715.129 332.092 li
717.953 344.768 li
720.773 351.881 li
723.594 355.252 li
726.414 365.959 li
729.238 379.147 li
732.059 373.889 li
734.879 358.334 li
737.703 357.623 li
740.523 368.264 li
743.344 368.443 li
746.164 360.709 li
748.988 359.17 li
751.809 360.744 li
754.629 371.701 li
757.449 381.111 li
760.273 379.404 li
763.094 368.178 li
765.914 372.326 li
768.734 378.068 li
771.559 366.088 li
774.379 367.936 li
777.199 364.65 li
780.02 373.522 li
782.844 388.162 li
785.664 388.787 li
788.484 390.221 li
791.309 371.791 li
794.129 349.361 li
796.949 329.982 li
799.77 308.842 li
802.594 291.428 li
805.414 269.451 li
808.234 252.756 li
811.055 232.041 li
813.879 244.772 li
816.699 264.725 li
819.52 259.342 li
822.34 259.326 li
825.164 258.678 li
827.984 255.889 li
830.805 251.686 li
833.625 255.072 li
836.449 259.002 li
@
836.449 259.002 mo
839.27 261.307 li
842.09 262.072 li
844.91 260.307 li
847.734 257.854 li
850.555 257.932 li
853.375 280.439 li
856.199 331.975 li
859.02 362.283 li
861.84 360.572 li
864.66 360.701 li
867.484 360.803 li
870.305 359.447 li
873.125 370.283 li
875.945 366.393 li
878.77 366.791 li
881.59 374.236 li
884.41 367.275 li
887.23 369.658 li
890.055 362.854 li
892.875 366.814 li
895.695 368.369 li
898.516 362.686 li
901.34 366.217 li
904.16 364.756 li
906.98 374.369 li
909.801 377.275 li
912.625 364.186 li
915.445 352.709 li
918.266 335.572 li
921.09 299.17 li
923.91 270.924 li
926.73 256.279 li
929.551 246.885 li
932.375 256.604 li
935.195 268.611 li
938.016 260.494 li
940.836 256.189 li
943.66 263.08 li
946.48 263.721 li
949.301 263.451 li
952.121 263.619 li
954.945 264.248 li
957.766 264.33 li
960.586 264.451 li
963.406 264.682 li
966.23 264.967 li
969.051 265.283 li
971.871 265.549 li
974.695 265.705 li
@
974.695 265.705 mo
977.516 276.412 li
980.336 328.889 li
983.156 366.854 li
985.98 361.244 li
988.801 360.123 li
988.883 360.272 li
@
145.223 354.693 mo
148.043 349.303 li
150.863 346.404 li
153.684 350.498 li
156.508 350.221 li
159.328 349.553 li
162.148 351.814 li
164.969 350.557 li
167.793 347.049 li
170.613 350.365 li
173.434 354.084 li
176.258 352.522 li
179.078 350.865 li
181.898 350.033 li
184.719 353.455 li
187.543 355.045 li
190.363 354.377 li
193.184 360.775 li
196.004 387.404 li
198.828 383.432 li
201.648 380.213 li
204.469 411.936 li
207.289 425.088 li
210.113 414.975 li
212.934 411.795 li
215.754 417.799 li
218.574 386.572 li
221.398 339.522 li
224.219 330.803 li
227.039 345.006 li
229.863 348.678 li
232.684 351.963 li
235.504 356.303 li
238.324 356.67 li
241.148 355.455 li
243.969 355.162 li
246.789 356.783 li
249.609 357.811 li
252.434 357.775 li
255.254 357.857 li
258.074 357.943 li
260.895 357.799 li
263.719 357.877 li
266.539 357.717 li
269.359 357.818 li
272.18 356.143 li
275.004 353.654 li
277.824 354.123 li
280.645 355.439 li
283.465 353.779 li
.613703 .976837 .0447395 .00808728 cmyk
@
283.465 353.779 mo
286.289 351.127 li
289.109 352.236 li
291.93 354.576 li
294.754 355.279 li
297.574 353.432 li
300.395 349.752 li
303.215 352.201 li
306.039 354.967 li
308.859 355.115 li
311.68 354.713 li
314.5 354.361 li
317.324 352.846 li
320.145 351.178 li
322.965 354.397 li
325.785 360.318 li
328.609 381.092 li
331.43 391.936 li
334.25 392.939 li
337.07 403.178 li
339.895 391.451 li
342.715 375.26 li
345.535 385.127 li
348.355 372.951 li
351.18 357.432 li
354 360.67 li
356.82 352.67 li
359.645 351.299 li
362.465 349.533 li
365.285 350.799 li
368.105 356.283 li
370.93 356.787 li
373.75 356.115 li
376.57 354.893 li
379.391 355.861 li
382.215 357.283 li
385.035 357.604 li
387.855 357.666 li
390.676 357.643 li
393.5 357.705 li
396.32 357.65 li
399.141 356.928 li
401.961 356.189 li
404.785 356.111 li
407.605 355.772 li
410.426 353.076 li
413.246 352.662 li
416.07 354.279 li
418.891 354.799 li
421.711 354.814 li
@
421.711 354.814 mo
424.535 355.221 li
427.355 354.498 li
430.176 353.959 li
432.996 355.607 li
435.82 356.104 li
438.641 354.518 li
441.461 353.076 li
444.281 353.037 li
447.105 353.705 li
449.926 354.404 li
452.746 354.889 li
455.566 355.057 li
458.391 352.572 li
461.211 352.775 li
464.031 355.361 li
466.852 355.186 li
469.676 353.967 li
472.496 369.865 li
475.316 384.713 li
478.137 374.932 li
480.961 379.174 li
483.781 393.564 li
486.602 389.604 li
489.426 382.072 li
492.246 369.58 li
495.066 358.252 li
497.887 356.623 li
500.711 352.225 li
503.531 349.881 li
506.352 357.143 li
509.172 359.588 li
511.996 355.752 li
514.816 354.807 li
517.637 354.229 li
520.457 355.326 li
523.281 354.553 li
526.102 354.088 li
528.922 356.272 li
531.742 357.689 li
534.566 357.397 li
537.387 357.408 li
540.207 357.83 li
543.031 357.846 li
545.852 357.842 li
551.492 357.857 li
554.316 357.846 li
557.137 357.861 li
559.957 357.861 li
@
559.957 357.861 mo
562.777 357.857 li
568.422 357.857 li
571.242 357.873 li
574.063 357.877 li
576.887 357.877 li
579.707 356.451 li
582.527 353.49 li
585.348 354.365 li
588.172 355.994 li
590.992 354.459 li
593.813 355.557 li
596.633 355.822 li
599.457 352.463 li
602.277 351.33 li
605.098 353.623 li
607.922 354.775 li
610.742 352.803 li
613.563 354.076 li
616.383 354.482 li
619.207 365.459 li
622.027 378.623 li
624.848 378.029 li
627.668 378.674 li
630.492 379.428 li
633.313 383.342 li
636.133 381.904 li
638.953 362.916 li
641.777 351.08 li
644.598 363.924 li
647.418 373.217 li
650.238 363.334 li
653.063 353.279 li
655.883 357.854 li
658.703 360.361 li
661.523 356.908 li
664.348 357.943 li
667.168 357.982 li
669.988 357.904 li
672.813 357.939 li
675.633 357.928 li
678.453 357.975 li
681.273 358.127 li
684.098 358.029 li
686.918 357.014 li
689.738 355.322 li
692.559 354.658 li
695.383 355.127 li
698.203 350.928 li
@
698.203 350.928 mo
701.023 344.014 li
703.844 339.705 li
706.668 335.299 li
709.488 334.018 li
712.309 337.736 li
715.129 341.314 li
717.953 344.025 li
720.773 347.299 li
723.594 349.404 li
726.414 351.022 li
729.238 353.967 li
732.059 356.131 li
734.879 357.025 li
737.703 357.549 li
740.523 357.865 li
743.344 357.92 li
746.164 357.811 li
748.988 355.982 li
751.809 355.514 li
754.629 355.775 li
757.449 355.275 li
760.273 355.893 li
763.094 355.951 li
765.914 355.994 li
768.734 355.74 li
771.559 354.986 li
774.379 355.701 li
777.199 357.088 li
780.02 356.873 li
782.844 355.846 li
785.664 352.244 li
788.484 360.154 li
791.309 374.014 li
794.129 377.045 li
796.949 377.354 li
799.77 376.311 li
802.594 376.389 li
805.414 376.803 li
808.234 374.834 li
811.055 362.647 li
813.879 353.314 li
816.699 355.057 li
819.52 353.057 li
822.34 352.717 li
825.164 352.955 li
827.984 352.088 li
830.805 354.4 li
833.625 355.83 li
836.449 355.647 li
@
836.449 355.647 mo
839.27 356.596 li
842.09 357.084 li
844.91 356.463 li
847.734 356.459 li
850.555 357.49 li
853.375 357.436 li
856.199 356.424 li
859.02 356.354 li
861.84 355.486 li
864.66 355.596 li
867.484 356.463 li
870.305 356.104 li
873.125 355.201 li
875.945 355.17 li
878.77 356.139 li
881.59 356.436 li
884.41 355.994 li
887.23 355.846 li
890.055 355.861 li
892.875 356.189 li
895.695 356.889 li
898.516 356.467 li
901.34 356.479 li
904.16 355.537 li
906.98 354.131 li
909.801 359.061 li
912.625 369.854 li
915.445 375.459 li
918.266 377.787 li
921.09 381.963 li
923.91 377.549 li
926.73 370.252 li
929.551 362.67 li
932.375 354.252 li
935.195 351.951 li
938.016 357.236 li
940.836 360.01 li
943.66 357.561 li
946.48 357.955 li
949.301 358.002 li
952.121 358.025 li
954.945 358.033 li
960.586 358.033 li
963.406 358.029 li
966.23 358.025 li
969.051 358.022 li
971.871 358.029 li
974.695 358.033 li
@
974.695 358.033 mo
977.516 357.553 li
980.336 356.65 li
983.156 355.768 li
985.98 356.029 li
988.801 356.022 li
988.883 356.025 li
@
145.223 349.803 mo
148.043 347.674 li
150.863 350.225 li
153.684 349.096 li
156.508 349.533 li
159.328 350.357 li
162.148 348.631 li
164.969 345.295 li
167.793 347.045 li
170.613 347.186 li
173.434 348.674 li
176.258 352.037 li
179.078 350.885 li
181.898 360.279 li
184.719 356.189 li
187.543 348.397 li
190.363 351.494 li
193.184 350.346 li
196.004 351.088 li
198.828 350.014 li
201.648 344.869 li
204.469 345.971 li
207.289 350.713 li
210.113 351.334 li
212.934 348.725 li
215.754 358.982 li
218.574 358.783 li
221.398 347.174 li
224.219 347.525 li
227.039 347.291 li
229.863 350.17 li
232.684 354.26 li
235.504 356.107 li
238.324 356.416 li
241.148 356.365 li
243.969 356.182 li
246.789 357.1 li
249.609 357.826 li
252.434 358.15 li
255.254 358.205 li
258.074 358.162 li
260.895 358.076 li
263.719 358.119 li
269.359 358.15 li
272.18 356.986 li
275.004 353.869 li
277.824 353.479 li
280.645 354.752 li
283.465 353.232 li
.598047 .119753 1 .00653086 cmyk
@
283.465 353.232 mo
286.289 349.787 li
289.109 349.662 li
291.93 353.346 li
294.754 355.248 li
297.574 354.397 li
300.395 350.6 li
303.215 350.01 li
306.039 352.854 li
308.859 355.033 li
311.68 355.557 li
314.5 353.65 li
317.324 351.502 li
320.145 352.064 li
322.965 352.873 li
325.785 348.514 li
328.609 350.986 li
331.43 351.557 li
334.25 346.381 li
337.07 350.482 li
339.895 352.838 li
342.715 351.143 li
345.535 353.947 li
348.355 355.709 li
351.18 353.795 li
354 353.725 li
356.82 355.158 li
359.645 356.436 li
362.465 356.057 li
365.285 355.514 li
368.105 356.545 li
370.93 357.533 li
373.75 357.846 li
376.57 357.943 li
379.391 358.014 li
382.215 358.006 li
385.035 358.08 li
387.855 358.123 li
390.676 358.189 li
393.5 358.209 li
396.32 358.17 li
399.141 358.045 li
401.961 357.9 li
404.785 357.803 li
407.605 354.455 li
410.426 352.955 li
413.246 355.01 li
416.07 354.65 li
418.891 353.338 li
421.711 352.045 li
@
421.711 352.045 mo
424.535 353.17 li
427.355 354.666 li
430.176 352.721 li
432.996 352.061 li
435.82 352.213 li
438.641 352.889 li
441.461 354.299 li
444.281 353.799 li
447.105 355.986 li
449.926 355.416 li
452.746 352.834 li
455.566 353.064 li
458.391 355.557 li
461.211 355.729 li
464.031 352.904 li
466.852 352.932 li
469.676 353.99 li
472.496 355.6 li
475.316 356.287 li
478.137 354.17 li
480.961 352.635 li
483.781 351.033 li
486.602 352.709 li
489.426 352.861 li
492.246 350.947 li
495.066 349.045 li
497.887 349.959 li
500.711 354.275 li
503.531 353.389 li
506.352 353.486 li
509.172 355.268 li
511.996 356.357 li
514.816 355.178 li
517.637 353.979 li
520.457 354.963 li
523.281 356.643 li
526.102 357.303 li
528.922 357.486 li
531.742 357.807 li
534.566 357.772 li
537.387 357.979 li
540.207 358.107 li
543.031 358.158 li
545.852 358.189 li
548.672 358.162 li
551.492 358.193 li
554.316 358.248 li
557.137 358.26 li
559.957 358.244 li
@
559.957 358.244 mo
562.777 358.229 li
565.602 358.232 li
568.422 358.209 li
571.242 358.213 li
574.063 358.213 li
576.887 358.205 li
579.707 356.166 li
582.527 353.623 li
585.348 353.893 li
588.172 354.971 li
590.992 355.385 li
593.813 355.834 li
596.633 356.111 li
599.457 356.045 li
602.277 355.432 li
605.098 354.549 li
607.922 353.791 li
610.742 353.158 li
613.563 353.635 li
616.383 355.768 li
619.207 355.908 li
622.027 353.115 li
624.848 353.732 li
627.668 353.33 li
630.492 353.514 li
633.313 356.322 li
636.133 354.459 li
638.953 350.189 li
641.777 347.475 li
644.598 350.182 li
647.418 351.709 li
650.238 352.604 li
653.063 355.9 li
655.883 356.857 li
658.703 356.65 li
661.523 356.064 li
664.348 356.979 li
667.168 358.068 li
669.988 358.154 li
672.813 358.217 li
675.633 358.189 li
678.453 358.143 li
681.273 358.127 li
684.098 358.018 li
686.918 357.787 li
689.738 357.15 li
692.559 355.967 li
695.383 353.525 li
698.203 352.318 li
@
698.203 352.318 mo
701.023 352.647 li
703.844 354.619 li
706.668 354.951 li
709.488 351.092 li
712.309 351.842 li
715.129 355.647 li
717.953 356.861 li
720.773 355.689 li
723.594 355.58 li
726.414 356.158 li
729.238 356.553 li
732.059 357.342 li
734.879 357.549 li
737.703 357.932 li
740.523 357.939 li
743.344 357.943 li
746.164 357.85 li
748.988 356.658 li
751.809 355.682 li
754.629 356.119 li
757.449 355.939 li
760.273 354.748 li
763.094 353.924 li
765.914 354.236 li
768.734 354.951 li
771.559 356.033 li
774.379 356.049 li
777.199 355.397 li
780.02 355.248 li
782.844 354.912 li
785.664 354.361 li
788.484 354.604 li
791.309 352.322 li
794.129 352.08 li
796.949 354.846 li
799.77 355.506 li
802.594 356.01 li
805.414 352.869 li
808.234 351.541 li
811.055 352.014 li
813.879 352.943 li
816.699 354.959 li
819.52 354.951 li
822.34 355.967 li
825.164 357.268 li
827.984 357.014 li
830.805 356.678 li
833.625 357.279 li
836.449 357.061 li
@
836.449 357.061 mo
839.27 356.932 li
842.09 357.666 li
844.91 357.713 li
847.734 357.482 li
850.555 357.807 li
853.375 357.236 li
856.199 356.217 li
859.02 356.057 li
861.84 355.873 li
864.66 355.354 li
867.484 355.131 li
870.305 355.893 li
873.125 356.924 li
875.945 356.557 li
878.77 355.412 li
881.59 354.553 li
884.41 354.479 li
887.23 355.225 li
890.055 355.022 li
892.875 355.299 li
895.695 355.713 li
898.516 355.6 li
901.34 355.752 li
904.16 356.002 li
906.98 356.412 li
909.801 353.572 li
912.625 353.611 li
915.445 356.522 li
918.266 355.689 li
921.09 356.822 li
923.91 359.959 li
926.73 358.522 li
929.551 355.166 li
932.375 356.068 li
935.195 355.881 li
938.016 354.502 li
940.836 355.244 li
943.66 356.287 li
946.48 357.283 li
949.301 357.721 li
952.121 358.045 li
954.945 358.076 li
957.766 358.127 li
960.586 358.189 li
963.406 358.217 li
966.23 358.229 li
971.871 358.236 li
974.695 358.244 li
@
974.695 358.244 mo
977.516 358.002 li
980.336 357.221 li
983.156 356.447 li
985.98 355.623 li
988.801 355.049 li
988.883 355.068 li
@
145.223 352.686 mo
148.043 350.318 li
150.863 349.143 li
153.684 351.17 li
156.508 353.256 li
159.328 353.357 li
162.148 352.994 li
164.969 351.287 li
167.793 350.033 li
170.613 352.522 li
173.434 351.838 li
176.258 352.123 li
179.078 350.057 li
181.898 349.479 li
184.719 353.123 li
187.543 351.436 li
190.363 351.51 li
193.184 352.654 li
196.004 353.377 li
198.828 355.803 li
201.648 352.022 li
204.469 348.232 li
207.289 349.818 li
210.113 351.689 li
212.934 344.639 li
215.754 339.154 li
218.574 347.865 li
221.398 348.963 li
224.219 345.068 li
227.039 346.115 li
229.863 349.482 li
232.684 354.553 li
235.504 356.514 li
238.324 357.439 li
241.148 357.814 li
243.969 357.783 li
246.789 357.904 li
249.609 358.068 li
252.434 358.186 li
255.254 358.162 li
258.074 358.076 li
260.895 358.131 li
263.719 358.17 li
266.539 358.147 li
269.359 358.131 li
272.18 355.822 li
275.004 354.752 li
277.824 353.658 li
280.645 352.924 li
283.465 351.564 li
.600824 .0568551 3.0518e-5 0 cmyk
@
283.465 351.564 mo
286.289 350.494 li
289.109 354.482 li
291.93 354.045 li
294.754 353.217 li
297.574 351.799 li
300.395 351.068 li
303.215 355.682 li
306.039 355.084 li
308.859 353.537 li
311.68 352.994 li
314.5 352.404 li
317.324 354.596 li
320.145 352.369 li
322.965 353.264 li
325.785 354.314 li
328.609 353.514 li
331.43 353.736 li
334.25 350.943 li
337.07 350.803 li
339.895 352.705 li
342.715 350.721 li
345.535 342.744 li
348.355 340.979 li
351.18 348.779 li
354 351.647 li
356.82 351.607 li
359.645 352.49 li
362.465 354.412 li
365.285 357.494 li
368.105 357.486 li
370.93 357.533 li
373.75 357.682 li
376.57 357.514 li
379.391 357.705 li
382.215 358.115 li
385.035 358.213 li
387.855 358.213 li
390.676 358.15 li
393.5 358.15 li
396.32 358.131 li
399.141 358.072 li
401.961 358.057 li
404.785 358.053 li
407.605 356.99 li
410.426 354.1 li
413.246 354.654 li
416.07 355.143 li
418.891 355.182 li
421.711 356.647 li
@
421.711 356.647 mo
424.535 354.775 li
427.355 354.893 li
430.176 354.58 li
432.996 354.721 li
435.82 356.225 li
438.641 354.436 li
441.461 355.1 li
444.281 354.654 li
447.105 354.588 li
449.926 356.412 li
452.746 354.951 li
455.566 355.514 li
458.391 354.861 li
461.211 354.717 li
464.031 356.689 li
466.852 355.772 li
469.676 355.572 li
472.496 356.354 li
475.316 356.545 li
478.137 354.869 li
480.961 351.135 li
483.781 352.322 li
486.602 354.264 li
489.426 347.623 li
492.246 340.311 li
495.066 343.861 li
497.887 351.764 li
500.711 354.373 li
503.531 354.045 li
506.352 353.568 li
509.172 355.045 li
511.996 356.814 li
514.816 357.291 li
517.637 357.439 li
520.457 357.49 li
523.281 357.545 li
526.102 357.76 li
528.922 358.01 li
531.742 357.971 li
534.566 358.057 li
537.387 358.182 li
540.207 358.201 li
543.031 358.213 li
545.852 358.217 li
548.672 358.205 li
551.492 358.201 li
554.316 358.217 li
557.137 358.201 li
559.957 358.197 li
@
559.957 358.197 mo
562.777 358.189 li
568.422 358.189 li
571.242 358.17 li
574.063 358.189 li
576.887 358.217 li
579.707 357.346 li
582.527 355.314 li
585.348 354.939 li
588.172 355.115 li
590.992 354.732 li
593.813 355.326 li
596.633 356.412 li
599.457 357.166 li
602.277 356.049 li
605.098 355.846 li
607.922 355.955 li
610.742 355.006 li
613.563 355.518 li
616.383 355.6 li
619.207 356.064 li
622.027 357.139 li
624.848 356.346 li
627.668 353.127 li
630.492 349.154 li
633.313 347.729 li
636.133 352.248 li
638.953 355.084 li
641.777 349.799 li
644.598 345.697 li
647.418 350.193 li
650.238 354.6 li
653.063 355.479 li
655.883 357.236 li
658.703 357.748 li
661.523 357.764 li
664.348 358.018 li
667.168 358.201 li
669.988 358.162 li
672.813 358.162 li
675.633 358.178 li
678.453 358.232 li
681.273 358.264 li
684.098 358.256 li
686.918 358.111 li
689.738 357.611 li
692.559 356.326 li
695.383 355.127 li
698.203 355.502 li
@
698.203 355.502 mo
701.023 355.631 li
703.844 354.857 li
706.668 353.689 li
709.488 351.299 li
712.309 350.041 li
715.129 351.174 li
717.953 351.92 li
720.773 351.564 li
723.594 351.936 li
726.414 354.143 li
729.238 356.35 li
732.059 356.572 li
734.879 357.061 li
737.703 357.963 li
740.523 357.936 li
743.344 358.018 li
746.164 358.178 li
748.988 357.088 li
751.809 355.541 li
754.629 355.314 li
757.449 355.4 li
760.273 355.748 li
763.094 356.635 li
765.914 356.514 li
768.734 356.436 li
771.559 355.818 li
774.379 355.908 li
777.199 356.522 li
780.02 356.463 li
782.844 356.783 li
785.664 355.928 li
788.484 356.486 li
791.309 357.607 li
794.129 357.666 li
796.949 356.818 li
799.77 355.834 li
802.594 351.162 li
805.414 344.428 li
808.234 343.439 li
811.055 348.791 li
813.879 354.221 li
816.699 355.721 li
819.52 356.861 li
822.34 357.408 li
825.164 356.584 li
827.984 356.439 li
830.805 357.518 li
833.625 357.857 li
836.449 357.881 li
@
836.449 357.881 mo
839.27 358.154 li
842.09 358.096 li
844.91 357.959 li
847.734 358.022 li
850.555 358.154 li
853.375 357.924 li
856.199 356.272 li
859.02 355.686 li
861.84 356.096 li
864.66 355.775 li
867.484 356.244 li
870.305 356.072 li
873.125 356.248 li
875.945 356.389 li
878.77 356.412 li
881.59 356.873 li
884.41 356.213 li
887.23 356.455 li
890.055 356.236 li
892.875 356.147 li
895.695 356.772 li
898.516 356.272 li
901.34 356.619 li
904.16 356.482 li
906.98 356.385 li
909.801 357.104 li
912.625 357.287 li
915.445 356.643 li
918.266 355.619 li
921.09 355.068 li
923.91 352.99 li
926.73 352.6 li
929.551 355.498 li
932.375 357.096 li
935.195 356.17 li
938.016 355.51 li
940.836 356.877 li
943.66 357.924 li
946.48 358.088 li
949.301 358.205 li
952.121 358.213 li
954.945 358.232 li
957.766 358.213 li
960.586 358.182 li
963.406 358.205 li
966.23 358.24 li
969.051 358.248 li
971.871 358.24 li
974.695 358.232 li
@
974.695 358.232 mo
977.516 358.182 li
980.336 357.053 li
983.156 356.143 li
985.98 356.627 li
988.801 357.084 li
988.883 357.068 li
@
206.398 261.061 mo
213.602 261.061 li
.627314 0 1 0 cmyk
@
210 264.658 mo
210 257.459 li
@
209.602 261.061 mo
216.801 261.061 li
@
213.199 264.658 mo
213.199 257.459 li
@
212 261.061 mo
219.199 261.061 li
@
215.602 264.658 mo
215.602 257.459 li
@
215.199 261.061 mo
222.398 261.061 li
@
218.801 264.658 mo
218.801 257.459 li
@
217.602 261.061 mo
224.801 261.061 li
@
221.199 264.658 mo
221.199 257.459 li
@
220.801 261.061 mo
228 261.061 li
@
224.398 264.658 mo
224.398 257.459 li
@
223.199 261.061 mo
230.398 261.061 li
@
226.801 264.658 mo
226.801 257.459 li
@
226.398 261.061 mo
233.602 261.061 li
@
230 264.658 mo
230 257.459 li
@
228.801 261.061 mo
236 261.061 li
@
232.398 264.658 mo
232.398 257.459 li
@
232 261.061 mo
239.199 261.061 li
@
235.602 264.658 mo
235.602 257.459 li
@
234.398 261.061 mo
241.602 261.061 li
@
238 264.658 mo
238 257.459 li
@
237.602 261.061 mo
244.801 261.061 li
@
241.199 264.658 mo
241.199 257.459 li
@
240 261.061 mo
247.199 261.061 li
@
243.602 264.658 mo
243.602 257.459 li
@
243.199 261.061 mo
250.398 261.061 li
@
246.801 264.658 mo
246.801 257.459 li
@
246.398 261.061 mo
253.602 261.061 li
@
250 264.658 mo
250 257.459 li
@
248.801 261.061 mo
256 261.061 li
@
252.398 264.658 mo
252.398 257.459 li
@
252 261.061 mo
259.199 261.061 li
@
255.602 264.658 mo
255.602 257.459 li
@
254.398 261.061 mo
261.602 261.061 li
@
258 264.658 mo
258 257.459 li
@
257.602 261.061 mo
264.801 261.061 li
@
261.199 264.658 mo
261.199 257.459 li
@
260 261.061 mo
267.199 261.061 li
@
263.602 264.658 mo
263.602 257.459 li
@
263.199 261.061 mo
270.398 261.061 li
@
266.801 264.658 mo
266.801 257.459 li
@
265.602 261.061 mo
272.801 261.061 li
@
269.199 264.658 mo
269.199 257.459 li
@
268.801 261.061 mo
276 261.061 li
@
272.398 264.658 mo
272.398 257.459 li
@
336 261.061 mo
343.199 261.061 li
@
339.602 264.658 mo
339.602 257.459 li
@
339.199 261.061 mo
346.398 261.061 li
@
342.801 264.658 mo
342.801 257.459 li
@
341.602 261.061 mo
348.801 261.061 li
@
345.199 264.658 mo
345.199 257.459 li
@
344.801 261.061 mo
352 261.061 li
@
348.398 264.658 mo
348.398 257.459 li
@
347.199 261.061 mo
354.398 261.061 li
@
350.801 264.658 mo
350.801 257.459 li
@
350.398 261.061 mo
357.602 261.061 li
@
354 264.658 mo
354 257.459 li
@
353.602 261.061 mo
360.801 261.061 li
@
357.199 264.658 mo
357.199 257.459 li
@
356 261.061 mo
363.199 261.061 li
@
359.602 264.658 mo
359.602 257.459 li
@
359.199 261.061 mo
366.398 261.061 li
@
362.801 264.658 mo
362.801 257.459 li
@
361.602 261.061 mo
368.801 261.061 li
@
365.199 264.658 mo
365.199 257.459 li
@
364.801 261.061 mo
372 261.061 li
@
368.398 264.658 mo
368.398 257.459 li
@
367.199 261.061 mo
374.398 261.061 li
@
370.801 264.658 mo
370.801 257.459 li
@
370.398 261.061 mo
377.602 261.061 li
@
374 264.658 mo
374 257.459 li
@
372.801 261.061 mo
380 261.061 li
@
376.398 264.658 mo
376.398 257.459 li
@
376 261.061 mo
383.199 261.061 li
@
379.602 264.658 mo
379.602 257.459 li
@
378.398 261.061 mo
385.602 261.061 li
@
382 264.658 mo
382 257.459 li
@
381.602 261.061 mo
388.801 261.061 li
@
385.199 264.658 mo
385.199 257.459 li
@
384 261.061 mo
391.199 261.061 li
@
387.602 264.658 mo
387.602 257.459 li
@
387.199 261.061 mo
394.398 261.061 li
@
390.801 264.658 mo
390.801 257.459 li
@
389.602 261.061 mo
396.801 261.061 li
@
393.199 264.658 mo
393.199 257.459 li
@
392.801 261.061 mo
400 261.061 li
@
396.398 264.658 mo
396.398 257.459 li
@
395.199 261.061 mo
402.398 261.061 li
@
398.801 264.658 mo
398.801 257.459 li
@
398.398 261.061 mo
405.602 261.061 li
@
402 264.658 mo
402 257.459 li
@
400.801 261.061 mo
408 261.061 li
@
404.398 264.658 mo
404.398 257.459 li
@
404 261.061 mo
411.199 261.061 li
@
407.602 264.658 mo
407.602 257.459 li
@
483.199 261.061 mo
490.398 261.061 li
@
486.801 264.658 mo
486.801 257.459 li
@
485.602 261.061 mo
492.801 261.061 li
@
489.199 264.658 mo
489.199 257.459 li
@
488.801 261.061 mo
496 261.061 li
@
492.398 264.658 mo
492.398 257.459 li
@
491.199 261.061 mo
498.398 261.061 li
@
494.801 264.658 mo
494.801 257.459 li
@
494.398 261.061 mo
501.602 261.061 li
@
498 264.658 mo
498 257.459 li
@
496.801 261.061 mo
504 261.061 li
@
500.398 264.658 mo
500.398 257.459 li
@
500 261.061 mo
507.199 261.061 li
@
503.602 264.658 mo
503.602 257.459 li
@
502.398 261.061 mo
509.602 261.061 li
@
506 264.658 mo
506 257.459 li
@
505.602 261.061 mo
512.801 261.061 li
@
509.199 264.658 mo
509.199 257.459 li
@
508 261.061 mo
515.199 261.061 li
@
511.602 264.658 mo
511.602 257.459 li
@
511.199 261.061 mo
518.398 261.061 li
@
514.801 264.658 mo
514.801 257.459 li
@
514.398 261.061 mo
521.602 261.061 li
@
518 264.658 mo
518 257.459 li
@
516.801 261.061 mo
524 261.061 li
@
520.398 264.658 mo
520.398 257.459 li
@
520 261.061 mo
527.199 261.061 li
@
523.602 264.658 mo
523.602 257.459 li
@
522.398 261.061 mo
529.602 261.061 li
@
526 264.658 mo
526 257.459 li
@
525.602 261.061 mo
532.801 261.061 li
@
529.199 264.658 mo
529.199 257.459 li
@
528 261.061 mo
535.199 261.061 li
@
531.602 264.658 mo
531.602 257.459 li
@
531.199 261.061 mo
538.398 261.061 li
@
534.801 264.658 mo
534.801 257.459 li
@
533.602 261.061 mo
540.801 261.061 li
@
537.199 264.658 mo
537.199 257.459 li
@
536.801 261.061 mo
544 261.061 li
@
540.398 264.658 mo
540.398 257.459 li
@
539.199 261.061 mo
546.398 261.061 li
@
542.801 264.658 mo
542.801 257.459 li
@
542.398 261.061 mo
549.602 261.061 li
@
546 264.658 mo
546 257.459 li
@
544.801 261.061 mo
552 261.061 li
@
548.398 264.658 mo
548.398 257.459 li
@
548 261.061 mo
555.199 261.061 li
@
551.602 264.658 mo
551.602 257.459 li
@
550.398 261.061 mo
557.602 261.061 li
@
554 264.658 mo
554 257.459 li
@
553.602 261.061 mo
560.801 261.061 li
@
557.199 264.658 mo
557.199 257.459 li
@
556 261.061 mo
563.199 261.061 li
@
559.602 264.658 mo
559.602 257.459 li
@
559.199 261.061 mo
566.398 261.061 li
@
562.801 264.658 mo
562.801 257.459 li
@
562.398 261.061 mo
569.602 261.061 li
@
566 264.658 mo
566 257.459 li
@
564.801 261.061 mo
572 261.061 li
@
568.398 264.658 mo
568.398 257.459 li
@
568 261.061 mo
575.199 261.061 li
@
571.602 264.658 mo
571.602 257.459 li
@
570.398 261.061 mo
577.602 261.061 li
@
574 264.658 mo
574 257.459 li
@
573.602 261.061 mo
580.801 261.061 li
@
577.199 264.658 mo
577.199 257.459 li
@
576 261.061 mo
583.199 261.061 li
@
579.602 264.658 mo
579.602 257.459 li
@
632.801 261.061 mo
640 261.061 li
@
636.398 264.658 mo
636.398 257.459 li
@
635.199 261.061 mo
642.398 261.061 li
@
638.801 264.658 mo
638.801 257.459 li
@
638.398 261.061 mo
645.602 261.061 li
@
642 264.658 mo
642 257.459 li
@
640.801 261.061 mo
648 261.061 li
@
644.398 264.658 mo
644.398 257.459 li
@
644 261.061 mo
651.199 261.061 li
@
647.602 264.658 mo
647.602 257.459 li
@
646.398 261.061 mo
653.602 261.061 li
@
650 264.658 mo
650 257.459 li
@
649.602 261.061 mo
656.801 261.061 li
@
653.199 264.658 mo
653.199 257.459 li
@
652 261.061 mo
659.199 261.061 li
@
655.602 264.658 mo
655.602 257.459 li
@
655.199 261.061 mo
662.398 261.061 li
@
658.801 264.658 mo
658.801 257.459 li
@
657.602 261.061 mo
664.801 261.061 li
@
661.199 264.658 mo
661.199 257.459 li
@
660.801 261.061 mo
668 261.061 li
@
664.398 264.658 mo
664.398 257.459 li
@
663.199 261.061 mo
670.398 261.061 li
@
666.801 264.658 mo
666.801 257.459 li
@
666.398 261.061 mo
673.602 261.061 li
@
670 264.658 mo
670 257.459 li
@
669.602 261.061 mo
676.801 261.061 li
@
673.199 264.658 mo
673.199 257.459 li
@
672 261.061 mo
679.199 261.061 li
@
675.602 264.658 mo
675.602 257.459 li
@
675.199 261.061 mo
682.398 261.061 li
@
678.801 264.658 mo
678.801 257.459 li
@
677.602 261.061 mo
684.801 261.061 li
@
681.199 264.658 mo
681.199 257.459 li
@
680.801 261.061 mo
688 261.061 li
@
684.398 264.658 mo
684.398 257.459 li
@
683.199 261.061 mo
690.398 261.061 li
@
686.801 264.658 mo
686.801 257.459 li
@
686.398 261.061 mo
693.602 261.061 li
@
690 264.658 mo
690 257.459 li
@
688.801 261.061 mo
696 261.061 li
@
692.398 264.658 mo
692.398 257.459 li
@
692 261.061 mo
699.199 261.061 li
@
695.602 264.658 mo
695.602 257.459 li
@
694.398 261.061 mo
701.602 261.061 li
@
698 264.658 mo
698 257.459 li
@
697.602 261.061 mo
704.801 261.061 li
@
701.199 264.658 mo
701.199 257.459 li
@
700 261.061 mo
707.199 261.061 li
@
703.602 264.658 mo
703.602 257.459 li
@
703.199 261.061 mo
710.398 261.061 li
@
706.801 264.658 mo
706.801 257.459 li
@
705.602 261.061 mo
712.801 261.061 li
@
709.199 264.658 mo
709.199 257.459 li
@
799.199 261.061 mo
806.398 261.061 li
@
802.801 264.658 mo
802.801 257.459 li
@
801.602 261.061 mo
808.801 261.061 li
@
805.199 264.658 mo
805.199 257.459 li
@
804.801 261.061 mo
812 261.061 li
@
808.398 264.658 mo
808.398 257.459 li
@
807.199 261.061 mo
814.398 261.061 li
@
810.801 264.658 mo
810.801 257.459 li
@
810.398 261.061 mo
817.602 261.061 li
@
814 264.658 mo
814 257.459 li
@
812.801 261.061 mo
820 261.061 li
@
816.398 264.658 mo
816.398 257.459 li
@
816 261.061 mo
823.199 261.061 li
@
819.602 264.658 mo
819.602 257.459 li
@
818.398 261.061 mo
825.602 261.061 li
@
822 264.658 mo
822 257.459 li
@
821.602 261.061 mo
828.801 261.061 li
@
825.199 264.658 mo
825.199 257.459 li
@
824 261.061 mo
831.199 261.061 li
@
827.602 264.658 mo
827.602 257.459 li
@
827.199 261.061 mo
834.398 261.061 li
@
830.801 264.658 mo
830.801 257.459 li
@
830.398 261.061 mo
837.602 261.061 li
@
834 264.658 mo
834 257.459 li
@
832.801 261.061 mo
840 261.061 li
@
836.398 264.658 mo
836.398 257.459 li
@
836 261.061 mo
843.199 261.061 li
@
839.602 264.658 mo
839.602 257.459 li
@
838.398 261.061 mo
845.602 261.061 li
@
842 264.658 mo
842 257.459 li
@
841.602 261.061 mo
848.801 261.061 li
@
845.199 264.658 mo
845.199 257.459 li
@
844 261.061 mo
851.199 261.061 li
@
847.602 264.658 mo
847.602 257.459 li
@
847.199 261.061 mo
854.398 261.061 li
@
850.801 264.658 mo
850.801 257.459 li
@
849.602 261.061 mo
856.801 261.061 li
@
853.199 264.658 mo
853.199 257.459 li
@
917.602 261.061 mo
924.801 261.061 li
@
921.199 264.658 mo
921.199 257.459 li
@
920 261.061 mo
927.199 261.061 li
@
923.602 264.658 mo
923.602 257.459 li
@
923.199 261.061 mo
930.398 261.061 li
@
926.801 264.658 mo
926.801 257.459 li
@
925.602 261.061 mo
932.801 261.061 li
@
929.199 264.658 mo
929.199 257.459 li
@
928.801 261.061 mo
936 261.061 li
@
932.398 264.658 mo
932.398 257.459 li
@
931.199 261.061 mo
938.398 261.061 li
@
934.801 264.658 mo
934.801 257.459 li
@
934.398 261.061 mo
941.602 261.061 li
@
938 264.658 mo
938 257.459 li
@
937.602 261.061 mo
944.801 261.061 li
@
941.199 264.658 mo
941.199 257.459 li
@
940 261.061 mo
947.199 261.061 li
@
943.602 264.658 mo
943.602 257.459 li
@
943.199 261.061 mo
950.398 261.061 li
@
946.801 264.658 mo
946.801 257.459 li
@
945.602 261.061 mo
952.801 261.061 li
@
949.199 264.658 mo
949.199 257.459 li
@
948.801 261.061 mo
956 261.061 li
@
952.398 264.658 mo
952.398 257.459 li
@
951.199 261.061 mo
958.398 261.061 li
@
954.801 264.658 mo
954.801 257.459 li
@
954.398 261.061 mo
961.602 261.061 li
@
958 264.658 mo
958 257.459 li
@
956.801 261.061 mo
964 261.061 li
@
960.398 264.658 mo
960.398 257.459 li
@
960 261.061 mo
967.199 261.061 li
@
963.602 264.658 mo
963.602 257.459 li
@
962.398 261.061 mo
969.602 261.061 li
@
966 264.658 mo
966 257.459 li
@
965.602 261.061 mo
972.801 261.061 li
@
969.199 264.658 mo
969.199 257.459 li
@
968 261.061 mo
975.199 261.061 li
@
971.602 264.658 mo
971.602 257.459 li
@
971.199 261.061 mo
978.398 261.061 li
@
974.801 264.658 mo
974.801 257.459 li
@
973.602 261.061 mo
980.801 261.061 li
@
977.199 264.658 mo
977.199 257.459 li
@
142.398 166.26 mo
148 160.658 li
.750179 .679652 .670191 .901488 cmyk
@
142.398 160.658 mo
148 166.26 li
@
145.602 166.26 mo
151.199 160.658 li
@
145.602 160.658 mo
151.199 166.26 li
@
148 166.26 mo
153.602 160.658 li
@
148 160.658 mo
153.602 166.26 li
@
151.199 166.26 mo
156.801 160.658 li
@
151.199 160.658 mo
156.801 166.26 li
@
153.602 166.26 mo
159.199 160.658 li
@
153.602 160.658 mo
159.199 166.26 li
@
156.801 166.26 mo
162.398 160.658 li
@
156.801 160.658 mo
162.398 166.26 li
@
159.199 166.26 mo
164.801 160.658 li
@
159.199 160.658 mo
164.801 166.26 li
@
162.398 166.26 mo
168 160.658 li
@
162.398 160.658 mo
168 166.26 li
@
164.801 166.26 mo
170.398 160.658 li
@
164.801 160.658 mo
170.398 166.26 li
@
168 166.26 mo
173.602 160.658 li
@
168 160.658 mo
173.602 166.26 li
@
170.398 166.26 mo
176 160.658 li
@
170.398 160.658 mo
176 166.26 li
@
173.602 166.26 mo
179.199 160.658 li
@
173.602 160.658 mo
179.199 166.26 li
@
176 166.26 mo
181.602 160.658 li
@
176 160.658 mo
181.602 166.26 li
@
179.199 166.26 mo
184.801 160.658 li
@
179.199 160.658 mo
184.801 166.26 li
@
181.602 166.26 mo
187.199 160.658 li
@
181.602 160.658 mo
187.199 166.26 li
@
184.801 166.26 mo
190.398 160.658 li
@
184.801 160.658 mo
190.398 166.26 li
@
187.199 166.26 mo
192.801 160.658 li
@
187.199 160.658 mo
192.801 166.26 li
@
190.398 166.26 mo
196 160.658 li
@
190.398 160.658 mo
196 166.26 li
@
193.602 166.26 mo
199.199 160.658 li
@
193.602 160.658 mo
199.199 166.26 li
@
196 166.26 mo
201.602 160.658 li
@
196 160.658 mo
201.602 166.26 li
@
199.199 166.26 mo
204.801 160.658 li
@
199.199 160.658 mo
204.801 166.26 li
@
201.602 166.26 mo
207.199 160.658 li
@
201.602 160.658 mo
207.199 166.26 li
@
204.801 166.26 mo
210.398 160.658 li
@
204.801 160.658 mo
210.398 166.26 li
@
272 166.26 mo
277.602 160.658 li
@
272 160.658 mo
277.602 166.26 li
@
275.199 166.26 mo
280.801 160.658 li
@
275.199 160.658 mo
280.801 166.26 li
@
277.602 166.26 mo
283.199 160.658 li
@
277.602 160.658 mo
283.199 166.26 li
@
280.801 166.26 mo
286.398 160.658 li
@
280.801 160.658 mo
286.398 166.26 li
@
283.199 166.26 mo
288.801 160.658 li
@
283.199 160.658 mo
288.801 166.26 li
@
286.398 166.26 mo
292 160.658 li
@
286.398 160.658 mo
292 166.26 li
@
288.801 166.26 mo
294.398 160.658 li
@
288.801 160.658 mo
294.398 166.26 li
@
292 166.26 mo
297.602 160.658 li
@
292 160.658 mo
297.602 166.26 li
@
294.398 166.26 mo
300 160.658 li
@
294.398 160.658 mo
300 166.26 li
@
297.602 166.26 mo
303.199 160.658 li
@
297.602 160.658 mo
303.199 166.26 li
@
300.801 166.26 mo
306.398 160.658 li
@
300.801 160.658 mo
306.398 166.26 li
@
303.199 166.26 mo
308.801 160.658 li
@
303.199 160.658 mo
308.801 166.26 li
@
306.398 166.26 mo
312 160.658 li
@
306.398 160.658 mo
312 166.26 li
@
308.801 166.26 mo
314.398 160.658 li
@
308.801 160.658 mo
314.398 166.26 li
@
312 166.26 mo
317.602 160.658 li
@
312 160.658 mo
317.602 166.26 li
@
314.398 166.26 mo
320 160.658 li
@
314.398 160.658 mo
320 166.26 li
@
317.602 166.26 mo
323.199 160.658 li
@
317.602 160.658 mo
323.199 166.26 li
@
320 166.26 mo
325.602 160.658 li
@
320 160.658 mo
325.602 166.26 li
@
323.199 166.26 mo
328.801 160.658 li
@
323.199 160.658 mo
328.801 166.26 li
@
325.602 166.26 mo
331.199 160.658 li
@
325.602 160.658 mo
331.199 166.26 li
@
328.801 166.26 mo
334.398 160.658 li
@
328.801 160.658 mo
334.398 166.26 li
@
331.199 166.26 mo
336.801 160.658 li
@
331.199 160.658 mo
336.801 166.26 li
@
334.398 166.26 mo
340 160.658 li
@
334.398 160.658 mo
340 166.26 li
@
408 166.26 mo
413.602 160.658 li
@
408 160.658 mo
413.602 166.26 li
@
410.398 166.26 mo
416 160.658 li
@
410.398 160.658 mo
416 166.26 li
@
413.602 166.26 mo
419.199 160.658 li
@
413.602 160.658 mo
419.199 166.26 li
@
416 166.26 mo
421.602 160.658 li
@
416 160.658 mo
421.602 166.26 li
@
419.199 166.26 mo
424.801 160.658 li
@
419.199 160.658 mo
424.801 166.26 li
@
421.602 166.26 mo
427.199 160.658 li
@
421.602 160.658 mo
427.199 166.26 li
@
424.801 166.26 mo
430.398 160.658 li
@
424.801 160.658 mo
430.398 166.26 li
@
427.199 166.26 mo
432.801 160.658 li
@
427.199 160.658 mo
432.801 166.26 li
@
430.398 166.26 mo
436 160.658 li
@
430.398 160.658 mo
436 166.26 li
@
432.801 166.26 mo
438.398 160.658 li
@
432.801 160.658 mo
438.398 166.26 li
@
436 166.26 mo
441.602 160.658 li
@
436 160.658 mo
441.602 166.26 li
@
438.398 166.26 mo
444 160.658 li
@
438.398 160.658 mo
444 166.26 li
@
441.602 166.26 mo
447.199 160.658 li
@
441.602 160.658 mo
447.199 166.26 li
@
444 166.26 mo
449.602 160.658 li
@
444 160.658 mo
449.602 166.26 li
@
447.199 166.26 mo
452.801 160.658 li
@
447.199 160.658 mo
452.801 166.26 li
@
449.602 166.26 mo
455.199 160.658 li
@
449.602 160.658 mo
455.199 166.26 li
@
452.801 166.26 mo
458.398 160.658 li
@
452.801 160.658 mo
458.398 166.26 li
@
455.199 166.26 mo
460.801 160.658 li
@
455.199 160.658 mo
460.801 166.26 li
@
458.398 166.26 mo
464 160.658 li
@
458.398 160.658 mo
464 166.26 li
@
461.602 166.26 mo
467.199 160.658 li
@
461.602 160.658 mo
467.199 166.26 li
@
464 166.26 mo
469.602 160.658 li
@
464 160.658 mo
469.602 166.26 li
@
467.199 166.26 mo
472.801 160.658 li
@
467.199 160.658 mo
472.801 166.26 li
@
469.602 166.26 mo
475.199 160.658 li
@
469.602 160.658 mo
475.199 166.26 li
@
472.801 166.26 mo
478.398 160.658 li
@
472.801 160.658 mo
478.398 166.26 li
@
475.199 166.26 mo
480.801 160.658 li
@
475.199 160.658 mo
480.801 166.26 li
@
478.398 166.26 mo
484 160.658 li
@
478.398 160.658 mo
484 166.26 li
@
480.801 166.26 mo
486.398 160.658 li
@
480.801 160.658 mo
486.398 166.26 li
@
580 166.26 mo
585.602 160.658 li
@
580 160.658 mo
585.602 166.26 li
@
582.398 166.26 mo
588 160.658 li
@
582.398 160.658 mo
588 166.26 li
@
585.602 166.26 mo
591.199 160.658 li
@
585.602 160.658 mo
591.199 166.26 li
@
588 166.26 mo
593.602 160.658 li
@
588 160.658 mo
593.602 166.26 li
@
591.199 166.26 mo
596.801 160.658 li
@
591.199 160.658 mo
596.801 166.26 li
@
593.602 166.26 mo
599.199 160.658 li
@
593.602 160.658 mo
599.199 166.26 li
@
596.801 166.26 mo
602.398 160.658 li
@
596.801 160.658 mo
602.398 166.26 li
@
599.199 166.26 mo
604.801 160.658 li
@
599.199 160.658 mo
604.801 166.26 li
@
602.398 166.26 mo
608 160.658 li
@
602.398 160.658 mo
608 166.26 li
@
604.801 166.26 mo
610.398 160.658 li
@
604.801 160.658 mo
610.398 166.26 li
@
608 166.26 mo
613.602 160.658 li
@
608 160.658 mo
613.602 166.26 li
@
610.398 166.26 mo
616 160.658 li
@
610.398 160.658 mo
616 166.26 li
@
613.602 166.26 mo
619.199 160.658 li
@
613.602 160.658 mo
619.199 166.26 li
@
616.801 166.26 mo
622.398 160.658 li
@
616.801 160.658 mo
622.398 166.26 li
@
619.199 166.26 mo
624.801 160.658 li
@
619.199 160.658 mo
624.801 166.26 li
@
622.398 166.26 mo
628 160.658 li
@
622.398 160.658 mo
628 166.26 li
@
624.801 166.26 mo
630.398 160.658 li
@
624.801 160.658 mo
630.398 166.26 li
@
628 166.26 mo
633.602 160.658 li
@
628 160.658 mo
633.602 166.26 li
@
630.398 166.26 mo
636 160.658 li
@
630.398 160.658 mo
636 166.26 li
@
709.602 166.26 mo
715.199 160.658 li
@
709.602 160.658 mo
715.199 166.26 li
@
712 166.26 mo
717.602 160.658 li
@
712 160.658 mo
717.602 166.26 li
@
715.199 166.26 mo
720.801 160.658 li
@
715.199 160.658 mo
720.801 166.26 li
@
717.602 166.26 mo
723.199 160.658 li
@
717.602 160.658 mo
723.199 166.26 li
@
720.801 166.26 mo
726.398 160.658 li
@
720.801 160.658 mo
726.398 166.26 li
@
724 166.26 mo
729.602 160.658 li
@
724 160.658 mo
729.602 166.26 li
@
726.398 166.26 mo
732 160.658 li
@
726.398 160.658 mo
732 166.26 li
@
729.602 166.26 mo
735.199 160.658 li
@
729.602 160.658 mo
735.199 166.26 li
@
732 166.26 mo
737.602 160.658 li
@
732 160.658 mo
737.602 166.26 li
@
735.199 166.26 mo
740.801 160.658 li
@
735.199 160.658 mo
740.801 166.26 li
@
737.602 166.26 mo
743.199 160.658 li
@
737.602 160.658 mo
743.199 166.26 li
@
740.801 166.26 mo
746.398 160.658 li
@
740.801 160.658 mo
746.398 166.26 li
@
743.199 166.26 mo
748.801 160.658 li
@
743.199 160.658 mo
748.801 166.26 li
@
746.398 166.26 mo
752 160.658 li
@
746.398 160.658 mo
752 166.26 li
@
748.801 166.26 mo
754.398 160.658 li
@
748.801 160.658 mo
754.398 166.26 li
@
752 166.26 mo
757.602 160.658 li
@
752 160.658 mo
757.602 166.26 li
@
754.398 166.26 mo
760 160.658 li
@
754.398 160.658 mo
760 166.26 li
@
757.602 166.26 mo
763.199 160.658 li
@
757.602 160.658 mo
763.199 166.26 li
@
760 166.26 mo
765.602 160.658 li
@
760 160.658 mo
765.602 166.26 li
@
763.199 166.26 mo
768.801 160.658 li
@
763.199 160.658 mo
768.801 166.26 li
@
765.602 166.26 mo
771.199 160.658 li
@
765.602 160.658 mo
771.199 166.26 li
@
768.801 166.26 mo
774.398 160.658 li
@
768.801 160.658 mo
774.398 166.26 li
@
771.199 166.26 mo
776.801 160.658 li
@
771.199 160.658 mo
776.801 166.26 li
@
774.398 166.26 mo
780 160.658 li
@
774.398 160.658 mo
780 166.26 li
@
777.602 166.26 mo
783.199 160.658 li
@
777.602 160.658 mo
783.199 166.26 li
@
780 166.26 mo
785.602 160.658 li
@
780 160.658 mo
785.602 166.26 li
@
783.199 166.26 mo
788.801 160.658 li
@
783.199 160.658 mo
788.801 166.26 li
@
785.602 166.26 mo
791.199 160.658 li
@
785.602 160.658 mo
791.199 166.26 li
@
788.801 166.26 mo
794.398 160.658 li
@
788.801 160.658 mo
794.398 166.26 li
@
791.199 166.26 mo
796.801 160.658 li
@
791.199 160.658 mo
796.801 166.26 li
@
794.398 166.26 mo
800 160.658 li
@
794.398 160.658 mo
800 166.26 li
@
796.801 166.26 mo
802.398 160.658 li
@
796.801 160.658 mo
802.398 166.26 li
@
853.602 166.26 mo
859.199 160.658 li
@
853.602 160.658 mo
859.199 166.26 li
@
856 166.26 mo
861.602 160.658 li
@
856 160.658 mo
861.602 166.26 li
@
859.199 166.26 mo
864.801 160.658 li
@
859.199 160.658 mo
864.801 166.26 li
@
861.602 166.26 mo
867.199 160.658 li
@
861.602 160.658 mo
867.199 166.26 li
@
864.801 166.26 mo
870.398 160.658 li
@
864.801 160.658 mo
870.398 166.26 li
@
867.199 166.26 mo
872.801 160.658 li
@
867.199 160.658 mo
872.801 166.26 li
@
870.398 166.26 mo
876 160.658 li
@
870.398 160.658 mo
876 166.26 li
@
872.801 166.26 mo
878.398 160.658 li
@
872.801 160.658 mo
878.398 166.26 li
@
876 166.26 mo
881.602 160.658 li
@
876 160.658 mo
881.602 166.26 li
@
878.398 166.26 mo
884 160.658 li
@
878.398 160.658 mo
884 166.26 li
@
881.602 166.26 mo
887.199 160.658 li
@
881.602 160.658 mo
887.199 166.26 li
@
884.801 166.26 mo
890.398 160.658 li
@
884.801 160.658 mo
890.398 166.26 li
@
887.199 166.26 mo
892.801 160.658 li
@
887.199 160.658 mo
892.801 166.26 li
@
890.398 166.26 mo
896 160.658 li
@
890.398 160.658 mo
896 166.26 li
@
892.801 166.26 mo
898.398 160.658 li
@
892.801 160.658 mo
898.398 166.26 li
@
896 166.26 mo
901.602 160.658 li
@
896 160.658 mo
901.602 166.26 li
@
898.398 166.26 mo
904 160.658 li
@
898.398 160.658 mo
904 166.26 li
@
901.602 166.26 mo
907.199 160.658 li
@
901.602 160.658 mo
907.199 166.26 li
@
904 166.26 mo
909.602 160.658 li
@
904 160.658 mo
909.602 166.26 li
@
907.199 166.26 mo
912.801 160.658 li
@
907.199 160.658 mo
912.801 166.26 li
@
909.602 166.26 mo
915.199 160.658 li
@
909.602 160.658 mo
915.199 166.26 li
@
912.801 166.26 mo
918.398 160.658 li
@
912.801 160.658 mo
918.398 166.26 li
@
915.199 166.26 mo
920.801 160.658 li
@
915.199 160.658 mo
920.801 166.26 li
@
977.602 166.26 mo
983.199 160.658 li
@
977.602 160.658 mo
983.199 166.26 li
@
980 166.26 mo
985.602 160.658 li
@
980 160.658 mo
985.602 166.26 li
@
983.199 166.26 mo
988.801 160.658 li
@
983.199 160.658 mo
988.801 166.26 li
@
986.398 166.26 mo
992 160.658 li
@
986.398 160.658 mo
992 166.26 li
@
0 lj
483.23 250.26 mo
581.566 250.26 li
@
486.434 250.26 mo
488.031 248.662 li
482.434 250.26 li
488.031 251.861 li
cp
ef
.4 lw
2 lc
486.434 250.26 mo
488.031 248.662 li
482.434 250.26 li
488.031 251.861 li
cp
@
578.367 250.26 mo
576.766 251.861 li
582.367 250.26 li
576.766 248.662 li
cp
ef
578.367 250.26 mo
576.766 251.861 li
582.367 250.26 li
576.766 248.662 li
cp
gsave
[-1 1.22e-16 -1.22e-16 -1 0 -34.5405 ]ct
@
grestore newpath
.8 lw
0 lc
530.328 247.951 mo
530.328 97.1825 li
@
530.328 244.749 mo
528.73 243.151 li
530.328 248.749 li
531.93 243.151 li
cp
ef
530.328 244.748 mo
528.73 243.15 li
530.328 248.748 li
531.93 243.15 li
cp
.4 lw
2 lc
gsave
[6.1e-17 -1 1 6.1e-17 0 -34.5405 ]ct
@
grestore newpath
.8 lw
0 lc
303.199 160.658 mo
303.199 96.4675 li
@
303.199 157.46 mo
301.602 155.857 li
303.199 161.46 li
304.801 155.857 li
cp
ef
303.199 157.459 mo
301.602 155.857 li
303.199 161.459 li
304.801 155.857 li
cp
.4 lw
2 lc
gsave
[6.1e-17 -1 1 6.1e-17 0 -34.5405 ]ct
@
grestore newpath
.8 lw
0 lc
822 259.33 mo
822 96.4675 li
@
822 256.128 mo
820.398 254.53 li
822 260.128 li
823.602 254.53 li
cp
ef
822 256.127 mo
820.398 254.529 li
822 260.127 li
823.602 254.529 li
cp
.4 lw
2 lc
gsave
[6.1e-17 -1 1 6.1e-17 0 -34.5405 ]ct
@
grestore newpath
530.563 84.6745 mo
530.563 95.7875 li
528.531 95.7875 li
528.531 96.6665 li
536.625 96.6665 li
540.32 96.6665 543.137 94.3615 543.137 90.3385 cv
543.137 86.2095 540.32 83.7915 536.602 83.7915 cv
535.852 84.6745 li
537.094 84.6745 538.652 85.0255 539.566 86.3385 cv
540.227 87.2995 540.375 88.5765 540.375 90.3225 cv
540.375 92.3695 540.152 93.3655 539.551 94.2095 cv
538.652 95.4865 536.996 95.7875 535.852 95.7875 cv
533.109 95.7875 li
533.109 84.6745 li
535.852 84.6745 li
536.602 83.7915 li
528.531 83.7915 li
528.531 84.6745 li
cp
f
552.578 95.3145 mo
552.578 96.7795 li
555.895 96.6665 li
555.895 95.7875 li
554.727 95.7875 554.602 95.7875 554.602 95.0575 cv
554.602 88.2215 li
551.164 88.3735 li
551.164 89.2565 li
552.328 89.2565 552.457 89.2565 552.457 89.9865 cv
552.457 93.5685 li
552.457 95.1075 551.504 96.1045 550.129 96.1045 cv
548.688 96.1045 548.629 95.6395 548.629 94.6195 cv
548.629 88.2215 li
545.191 88.3735 li
545.191 89.2565 li
546.359 89.2565 546.488 89.2565 546.488 89.9865 cv
546.488 94.3615 li
546.488 96.3655 548.012 96.7795 549.867 96.7795 cv
550.355 96.7795 551.711 96.7795 552.578 95.3145 cv
cp
f
560.141 90.3385 mo
560.141 88.2215 li
557.027 88.3735 li
557.027 89.2565 li
558.191 89.2565 558.324 89.2565 558.324 89.9865 cv
558.324 95.7875 li
557.027 95.7875 li
557.027 96.6665 li
557.688 96.6505 558.527 96.6075 559.395 96.6075 cv
560.105 96.6075 561.309 96.6075 561.98 96.6665 cv
561.98 95.7875 li
560.348 95.7875 li
560.348 92.4985 li
560.348 91.1865 560.816 88.8965 562.695 88.8965 cv
562.68 88.9125 562.336 89.2135 562.336 89.7605 cv
562.336 90.5255 562.941 90.9005 563.484 90.9005 cv
564.027 90.9005 564.629 90.5105 564.629 89.7605 cv
564.629 88.7645 563.613 88.2215 562.637 88.2215 cv
561.324 88.2215 560.578 89.1625 560.141 90.3385 cv
cp
f
572.262 95.2215 mo
572.262 95.3345 li
572.266 95.4515 li
572.27 95.5105 li
572.277 95.5725 li
572.285 95.6315 li
572.293 95.6935 li
572.324 95.8115 li
572.34 95.8735 li
572.363 95.9325 li
572.395 95.9945 li
572.43 96.0495 li
572.461 96.1075 li
572.555 96.2175 li
572.609 96.2685 li
572.668 96.3185 li
572.703 96.3425 li
572.738 96.3615 li
572.773 96.3855 li
572.813 96.4085 li
572.855 96.4325 li
572.895 96.4515 li
572.941 96.4675 li
572.984 96.4865 li
573.086 96.5255 li
573.137 96.5415 li
573.195 96.5575 li
573.25 96.5685 li
573.309 96.5845 li
573.434 96.6075 li
573.5 96.6195 li
573.57 96.6315 li
573.641 96.6395 li
573.789 96.6545 li
573.867 96.6585 li
573.949 96.6665 li
575.113 96.6665 li
575.488 96.6665 575.715 96.6665 575.715 96.2175 cv
575.715 95.7875 575.473 95.7875 575.223 95.7875 cv
574.082 95.7685 574.082 95.5185 574.082 95.0885 cv
574.082 91.0575 li
574.082 89.3855 572.746 88.1665 569.949 88.1665 cv
568.883 88.1665 566.594 88.2365 566.594 89.8935 cv
566.594 90.7135 567.246 91.0765 567.75 91.0765 cv
568.336 91.0765 568.934 90.6825 568.934 89.8935 cv
568.934 89.3265 568.586 89.0065 568.523 88.9755 cv
569.047 88.8615 569.648 88.8385 569.879 88.8385 cv
571.285 88.8385 571.938 89.6235 571.938 91.0575 cv
571.938 94.0615 li
571.938 95.8615 570.211 96.1045 569.742 96.1045 cv
568.789 96.1045 568.035 95.4515 568.035 94.6195 cv
568.035 92.5965 571.004 92.3305 571.938 92.2755 cv
571.938 91.6935 li
570.609 91.7525 565.84 91.9165 565.84 94.6435 cv
565.84 96.4475 568.168 96.7795 569.457 96.7795 cv
570.965 96.7795 571.844 96.0105 572.262 95.2215 cv
cp
f
577.664 89.2135 mo
577.664 94.3615 li
577.664 96.3655 579.297 96.7795 580.629 96.7795 cv
582.059 96.7795 582.902 95.7055 582.902 94.3425 cv
582.902 93.3505 li
582.02 93.3505 li
582.02 94.3035 li
582.02 95.5805 581.418 96.0295 580.891 96.0295 cv
579.805 96.0295 579.805 94.8345 579.805 94.3965 cv
579.805 89.2135 li
582.543 89.2135 li
582.543 88.3345 li
579.805 88.3345 li
579.805 84.7445 li
578.922 84.7445 li
578.902 86.6235 577.988 88.4825 576.125 88.5375 cv
576.125 89.2135 li
cp
f
588.344 88.2215 mo
585.074 88.3735 li
585.074 89.2565 li
586.191 89.2565 586.32 89.2565 586.32 89.9865 cv
586.32 95.7875 li
585.023 95.7875 li
585.023 96.6665 li
585.605 96.6505 586.523 96.6075 587.313 96.6075 cv
587.879 96.6075 588.832 96.6505 589.512 96.6665 cv
589.512 95.7875 li
588.344 95.7875 li
cp
f
588.531 85.0885 mo
588.531 85.0105 li
588.523 84.9325 li
588.516 84.8575 li
588.5 84.7875 li
588.484 84.7135 li
588.465 84.6435 li
588.441 84.5765 li
588.414 84.5065 li
588.352 84.3815 li
588.316 84.3145 li
588.277 84.2605 li
588.234 84.2015 li
588.191 84.1465 li
588.145 84.0925 li
588.094 84.0415 li
588.043 83.9945 li
587.992 83.9515 li
587.934 83.9045 li
587.875 83.8655 li
587.82 83.8305 li
587.754 83.7915 li
587.695 83.7605 li
587.625 83.7325 li
587.563 83.7095 li
587.496 83.6865 li
587.355 83.6465 li
587.285 83.6355 li
587.211 83.6315 li
587.141 83.6235 li
587.066 83.6235 li
586.258 83.6235 585.605 84.2795 585.605 85.0885 cv
585.605 85.8935 586.258 86.5455 587.066 86.5455 cv
587.855 86.5455 588.531 85.9085 588.531 85.0885 cv
cp
f
600.324 92.5765 mo
600.324 92.3425 li
600.309 92.1115 li
600.281 91.8855 li
600.246 91.6625 li
600.203 91.4475 li
600.148 91.2325 li
600.086 91.0255 li
600.008 90.8265 li
599.926 90.6315 li
599.832 90.4395 li
599.73 90.2565 li
599.621 90.0765 li
599.5 89.9045 li
599.367 89.7365 li
599.23 89.5805 li
599.082 89.4285 li
598.926 89.2875 li
598.758 89.1465 li
598.586 89.0185 li
598.398 88.8965 li
598.207 88.7835 li
598.008 88.6825 li
597.797 88.5885 li
597.578 88.5025 li
597.352 88.4245 li
597.117 88.3575 li
596.879 88.2995 li
596.625 88.2525 li
596.367 88.2175 li
596.098 88.1895 li
595.824 88.1705 li
595.539 88.1665 li
595.539 88.8385 li
596.332 88.8385 597.117 89.1395 597.531 89.7995 cv
597.926 90.4325 597.926 91.4675 597.926 92.3695 cv
597.926 93.9985 597.926 96.0295 595.539 96.0295 cv
593.156 96.0295 593.156 93.9985 593.156 92.3695 cv
593.156 91.5215 593.156 90.5685 593.477 89.9285 cv
593.832 89.2325 594.621 88.8385 595.539 88.8385 cv
595.539 88.1665 li
592.461 88.1665 590.754 90.0805 590.754 92.5765 cv
590.754 94.9005 592.41 96.7795 595.539 96.7795 cv
598.699 96.7795 600.324 94.8855 600.324 92.5765 cv
cp
f
603.098 89.9865 mo
603.098 95.7875 li
601.805 95.7875 li
601.805 96.6665 li
602.332 96.6505 603.457 96.6075 604.168 96.6075 cv
604.906 96.6075 606.012 96.6505 606.535 96.6665 cv
606.535 95.7875 li
605.238 95.7875 li
605.238 91.8615 li
605.238 89.8145 606.852 88.8965 608.039 88.8965 cv
608.68 88.8965 609.07 89.2915 609.07 90.7135 cv
609.07 95.7875 li
607.773 95.7875 li
607.773 96.6665 li
608.305 96.6505 609.426 96.6075 610.141 96.6075 cv
610.879 96.6075 611.98 96.6505 612.504 96.6665 cv
612.504 95.7875 li
611.215 95.7875 li
611.215 90.9205 li
611.215 88.9515 610.199 88.2215 608.324 88.2215 cv
606.516 88.2215 605.523 89.2915 605.035 90.2525 cv
605.035 88.2215 li
601.805 88.3735 li
601.805 89.2565 li
602.969 89.2565 603.098 89.2565 603.098 89.9865 cv
cp
f
630.309 92.5765 mo
630.305 92.3425 li
630.289 92.1115 li
630.262 91.8855 li
630.227 91.6625 li
630.184 91.4475 li
630.129 91.2325 li
630.066 91.0255 li
629.992 90.8265 li
629.906 90.6315 li
629.813 90.4395 li
629.711 90.2565 li
629.602 90.0765 li
629.48 89.9045 li
629.352 89.7365 li
629.211 89.5805 li
629.063 89.4285 li
628.906 89.2875 li
628.738 89.1465 li
628.566 89.0185 li
628.383 88.8965 li
628.191 88.7835 li
627.988 88.6825 li
627.777 88.5885 li
627.559 88.5025 li
627.336 88.4245 li
627.102 88.3575 li
626.855 88.2995 li
626.605 88.2525 li
626.348 88.2175 li
626.078 88.1895 li
625.805 88.1705 li
625.523 88.1665 li
625.523 88.8385 li
626.309 88.8385 627.102 89.1395 627.512 89.7995 cv
627.906 90.4325 627.906 91.4675 627.906 92.3695 cv
627.906 93.9985 627.906 96.0295 625.523 96.0295 cv
623.137 96.0295 623.137 93.9985 623.137 92.3695 cv
623.137 91.5215 623.137 90.5685 623.453 89.9285 cv
623.816 89.2325 624.602 88.8385 625.523 88.8385 cv
625.523 88.1665 li
622.441 88.1665 620.734 90.0805 620.734 92.5765 cv
620.734 94.9005 622.391 96.7795 625.523 96.7795 cv
628.68 96.7795 630.309 94.8855 630.309 92.5765 cv
cp
f
633.137 88.3345 mo
631.73 88.3345 li
631.73 89.2135 li
633.137 89.2135 li
633.137 95.7875 li
631.84 95.7875 li
631.84 96.6665 li
632.5 96.6505 633.344 96.6075 634.211 96.6075 cv
634.922 96.6075 636.121 96.6075 636.801 96.6665 cv
636.801 95.7875 li
635.164 95.7875 li
635.164 89.2135 li
637.324 89.2135 li
637.324 88.3345 li
635.051 88.3345 li
635.051 86.4325 li
635.051 84.3695 636.484 84.2015 636.949 84.2015 cv
637.043 84.2015 637.137 84.2015 637.273 84.2405 cv
636.988 84.4435 636.836 84.8075 636.836 85.1545 cv
636.836 85.9715 637.492 86.3225 637.984 86.3225 cv
638.547 86.3225 639.145 85.9285 639.145 85.1545 cv
639.145 84.3695 638.473 83.5295 637.008 83.5295 cv
635.164 83.5295 633.137 84.3145 633.137 86.4325 cv
cp
f
646.617 89.2135 mo
646.617 94.3615 li
646.617 96.3655 648.258 96.7795 649.586 96.7795 cv
651.02 96.7795 651.859 95.7055 651.859 94.3425 cv
651.859 93.3505 li
650.977 93.3505 li
650.977 94.3035 li
650.977 95.5805 650.375 96.0295 649.852 96.0295 cv
648.762 96.0295 648.762 94.8345 648.762 94.3965 cv
648.762 89.2135 li
651.5 89.2135 li
651.5 88.3345 li
648.762 88.3345 li
648.762 84.7445 li
647.879 84.7445 li
647.859 86.6235 646.941 88.4825 645.082 88.5375 cv
645.082 89.2135 li
cp
f
655.234 95.7875 mo
653.938 95.7875 li
653.938 96.6665 li
654.473 96.6505 655.594 96.6075 656.305 96.6075 cv
657.039 96.6075 658.148 96.6505 658.672 96.6665 cv
658.672 95.7875 li
657.379 95.7875 li
657.379 91.8615 li
657.379 89.8145 658.992 88.8965 660.176 88.8965 cv
660.816 88.8965 661.203 89.2915 661.203 90.7135 cv
661.203 95.7875 li
659.91 95.7875 li
659.91 96.6665 li
660.441 96.6505 661.563 96.6075 662.277 96.6075 cv
663.016 96.6075 664.121 96.6505 664.645 96.6665 cv
664.645 95.7875 li
663.348 95.7875 li
663.348 90.9205 li
663.348 88.9515 662.336 88.2215 660.457 88.2215 cv
658.656 88.2215 657.695 89.3075 657.266 90.0615 cv
657.266 83.6355 li
653.938 83.7915 li
653.938 84.6745 li
655.105 84.6745 655.234 84.6745 655.234 85.4045 cv
cp
f
673.754 92.5765 mo
673.93 92.5765 li
673.961 92.5725 li
673.992 92.5725 li
674.102 92.5575 li
674.125 92.5495 li
674.145 92.5415 li
674.168 92.5335 li
674.188 92.5215 li
674.211 92.5105 li
674.242 92.4865 li
674.258 92.4715 li
674.273 92.4515 li
674.285 92.4325 li
674.297 92.4085 li
674.305 92.3965 li
674.309 92.3895 li
674.313 92.3775 li
674.32 92.3615 li
674.324 92.3505 li
674.34 92.2875 li
674.34 92.2565 li
674.344 92.2365 li
674.344 92.2175 li
674.348 92.1975 li
674.348 92.1785 li
674.352 92.1585 li
674.352 92.0725 li
674.352 91.4865 674.238 90.1155 673.305 89.1825 cv
672.613 88.5025 671.617 88.1665 670.32 88.1665 cv
667.309 88.1665 665.684 90.0965 665.684 92.4475 cv
665.684 94.9595 667.559 96.7795 670.582 96.7795 cv
673.547 96.7795 674.352 94.7915 674.352 94.4715 cv
674.352 94.1355 674 94.1355 673.906 94.1355 cv
673.586 94.1355 673.547 94.2255 673.434 94.5295 cv
673.043 95.4325 671.969 96.0295 670.75 96.0295 cv
668.102 96.0295 668.082 93.5375 668.082 92.5765 cv
668.082 91.9595 li
668.125 91.2215 668.145 90.4325 668.535 89.8145 cv
669.023 89.0685 669.773 88.8385 670.32 88.8385 cv
672.52 88.8385 672.551 91.2995 672.57 91.9595 cv
668.082 91.9595 li
668.082 92.5765 li
cp
f
684.371 88.3345 mo
682.965 88.3345 li
682.965 89.2135 li
684.371 89.2135 li
684.371 95.7875 li
683.074 95.7875 li
683.074 96.6665 li
683.734 96.6505 684.578 96.6075 685.441 96.6075 cv
686.152 96.6075 687.355 96.6075 688.031 96.6665 cv
688.031 95.7875 li
686.398 95.7875 li
686.398 89.2135 li
688.555 89.2135 li
688.555 88.3345 li
686.285 88.3345 li
686.285 86.4325 li
686.285 84.3695 687.715 84.2015 688.18 84.2015 cv
688.273 84.2015 688.367 84.2015 688.504 84.2405 cv
688.223 84.4435 688.066 84.8075 688.066 85.1545 cv
688.066 85.9715 688.727 86.3225 689.215 86.3225 cv
689.773 86.3225 690.375 85.9285 690.375 85.1545 cv
690.375 84.3695 689.707 83.5295 688.238 83.5295 cv
686.398 83.5295 684.371 84.3145 684.371 86.4325 cv
cp
f
695.801 95.2215 mo
695.801 95.3345 li
695.805 95.4515 li
695.809 95.5105 li
695.813 95.5725 li
695.82 95.6315 li
695.828 95.6935 li
695.859 95.8115 li
695.879 95.8735 li
695.902 95.9325 li
695.93 95.9945 li
695.965 96.0495 li
696 96.1075 li
696.043 96.1625 li
696.094 96.2175 li
696.145 96.2685 li
696.207 96.3185 li
696.238 96.3425 li
696.273 96.3615 li
696.313 96.3855 li
696.348 96.4085 li
696.391 96.4325 li
696.434 96.4515 li
696.477 96.4675 li
696.57 96.5065 li
696.621 96.5255 li
696.672 96.5415 li
696.73 96.5575 li
696.785 96.5685 li
696.848 96.5845 li
696.906 96.5965 li
696.973 96.6075 li
697.035 96.6195 li
697.105 96.6315 li
697.18 96.6395 li
697.25 96.6465 li
697.324 96.6545 li
697.406 96.6585 li
697.488 96.6665 li
698.652 96.6665 li
699.027 96.6665 699.25 96.6665 699.25 96.2175 cv
699.25 95.7875 699.012 95.7875 698.762 95.7875 cv
697.621 95.7685 697.621 95.5185 697.621 95.0885 cv
697.621 91.0575 li
697.621 89.3855 696.281 88.1665 693.484 88.1665 cv
692.418 88.1665 690.129 88.2365 690.129 89.8935 cv
690.129 90.7135 690.785 91.0765 691.289 91.0765 cv
691.871 91.0765 692.473 90.6825 692.473 89.8935 cv
692.473 89.3265 692.121 89.0065 692.063 88.9755 cv
692.586 88.8615 693.188 88.8385 693.414 88.8385 cv
694.824 88.8385 695.477 89.6235 695.477 91.0575 cv
695.477 94.0615 li
695.477 95.8615 693.754 96.1045 693.281 96.1045 cv
692.324 96.1045 691.57 95.4515 691.57 94.6195 cv
691.57 92.5965 694.539 92.3305 695.477 92.2755 cv
695.477 91.6935 li
694.145 91.7525 689.375 91.9165 689.375 94.6435 cv
689.375 96.4475 691.703 96.7795 693 96.7795 cv
694.508 96.7795 695.379 96.0105 695.801 95.2215 cv
cp
f
703.473 83.6355 mo
700.152 83.7915 li
700.152 84.6745 li
701.316 84.6745 701.445 84.6745 701.445 85.4045 cv
701.445 95.7875 li
700.152 95.7875 li
700.152 96.6665 li
700.75 96.6505 701.652 96.6075 702.457 96.6075 cv
703.266 96.6075 704.133 96.6505 704.766 96.6665 cv
704.766 95.7875 li
703.473 95.7875 li
cp
f
709.484 83.6355 mo
706.164 83.7915 li
706.164 84.6745 li
707.332 84.6745 707.457 84.6745 707.457 85.4045 cv
707.457 95.7875 li
706.164 95.7875 li
706.164 96.6665 li
706.766 96.6505 707.664 96.6075 708.473 96.6075 cv
709.277 96.6075 710.145 96.6505 710.777 96.6665 cv
710.777 95.7875 li
709.484 95.7875 li
cp
f
306.574 82.6625 mo
306.555 82.6435 li
306.535 82.6195 li
306.469 82.5535 li
306.457 82.5335 li
306.41 82.4985 li
306.398 82.4865 li
306.383 82.4795 li
306.371 82.4675 li
306.355 82.4595 li
306.336 82.4515 li
306.32 82.4475 li
306.305 82.4395 li
306.289 82.4365 li
306.27 82.4325 li
306.254 82.4285 li
306.215 82.4205 li
306.191 82.4165 li
306.168 82.4165 li
306.145 82.4125 li
306.121 82.4125 li
306.094 82.4085 li
301.398 82.4085 li
301.398 83.3345 li
303.535 83.3345 li
303.535 94.4515 li
303.535 94.8855 303.516 94.9045 302.957 94.9675 cv
302.488 95.0215 302.445 95.0215 301.895 95.0215 cv
301.398 95.0215 li
301.398 95.9515 li
302.152 95.8855 303.273 95.8855 304.047 95.8855 cv
304.879 95.8855 305.902 95.8855 306.711 95.9515 cv
306.711 95.0215 li
306.215 95.0215 li
305.863 95.0215 305.531 95.0025 305.168 94.9675 cv
304.602 94.9045 304.582 94.8855 304.582 94.4515 cv
304.582 84.1235 li
314.414 95.6975 li
314.613 95.9285 314.633 95.9515 314.945 95.9515 cv
315.48 95.9515 315.48 95.7715 315.48 95.3185 cv
315.48 83.9045 li
315.48 83.4755 315.5 83.4555 316.051 83.3935 cv
316.527 83.3345 316.563 83.3345 317.113 83.3345 cv
317.609 83.3345 li
317.609 82.4085 li
316.859 82.4635 315.734 82.4635 314.965 82.4635 cv
314.137 82.4635 313.105 82.4635 312.297 82.4085 cv
312.297 83.3345 li
312.793 83.3345 li
313.148 83.3345 313.488 83.3545 313.84 83.3935 cv
314.414 83.4555 314.434 83.4755 314.434 83.9045 cv
314.434 91.9005 li
cp
f
329.117 91.6465 mo
329.109 91.4005 li
329.094 91.1585 li
329.07 90.9205 li
329.035 90.6865 li
328.984 90.4595 li
328.926 90.2365 li
328.859 90.0185 li
328.785 89.8075 li
328.691 89.6005 li
328.598 89.4005 li
328.492 89.2055 li
328.371 89.0185 li
328.246 88.8385 li
328.109 88.6625 li
327.965 88.4945 li
327.805 88.3385 li
327.641 88.1865 li
327.469 88.0415 li
327.281 87.9045 li
327.086 87.7795 li
326.887 87.6585 li
326.676 87.5535 li
326.457 87.4515 li
326.227 87.3615 li
325.988 87.2795 li
325.742 87.2135 li
325.488 87.1465 li
325.223 87.1005 li
324.953 87.0615 li
324.672 87.0335 li
324.383 87.0145 li
324.082 87.0105 li
324.082 87.7135 li
324.91 87.7135 325.742 88.0335 326.176 88.7255 cv
326.59 89.3935 326.59 90.4825 326.59 91.4285 cv
326.59 93.1435 326.59 95.2795 324.082 95.2795 cv
321.574 95.2795 321.574 93.1435 321.574 91.4285 cv
321.574 90.5375 321.574 89.5335 321.906 88.8615 cv
322.285 88.1315 323.117 87.7135 324.082 87.7135 cv
324.082 87.0105 li
320.844 87.0105 319.047 89.0215 319.047 91.6465 cv
319.047 94.0925 320.785 96.0685 324.082 96.0685 cv
327.402 96.0685 329.117 94.0765 329.117 91.6465 cv
cp
f
332.031 88.9245 mo
332.031 95.0215 li
330.668 95.0215 li
330.668 95.9515 li
331.227 95.9285 332.406 95.8855 333.156 95.8855 cv
333.93 95.8855 335.094 95.9285 335.648 95.9515 cv
335.648 95.0215 li
334.285 95.0215 li
334.285 90.8965 li
334.285 88.7405 335.98 87.7795 337.227 87.7795 cv
337.898 87.7795 338.309 88.1895 338.309 89.6895 cv
338.309 95.0215 li
336.949 95.0215 li
336.949 95.9515 li
337.504 95.9285 338.688 95.8855 339.438 95.8855 cv
340.207 95.8855 341.375 95.9285 341.926 95.9515 cv
341.926 95.0215 li
340.563 95.0215 li
340.563 89.9045 li
340.563 87.8345 339.496 87.0645 337.523 87.0645 cv
335.629 87.0645 334.582 88.1895 334.066 89.2015 cv
334.066 87.0645 li
330.668 87.2295 li
330.668 88.1545 li
331.895 88.1545 332.031 88.1545 332.031 88.9245 cv
cp
f
342.637 90.6005 mo
348.66 90.6005 li
348.66 92.5145 li
342.637 92.5145 li
cp
f
352.254 87.1825 mo
350.773 87.1825 li
350.773 88.1115 li
352.254 88.1115 li
352.254 95.0215 li
350.891 95.0215 li
350.891 95.9515 li
351.582 95.9285 352.469 95.8855 353.379 95.8855 cv
354.129 95.8855 355.391 95.8855 356.105 95.9515 cv
356.105 95.0215 li
354.383 95.0215 li
354.383 88.1115 li
356.656 88.1115 li
356.656 87.1825 li
354.266 87.1825 li
354.266 85.1865 li
354.266 83.0145 355.77 82.8425 356.258 82.8425 cv
356.359 82.8425 356.457 82.8425 356.598 82.8815 cv
356.301 83.0965 356.141 83.4755 356.141 83.8425 cv
356.141 84.6975 356.832 85.0725 357.348 85.0725 cv
357.934 85.0725 358.57 84.6545 358.57 83.8425 cv
358.57 83.0145 357.863 82.1315 356.32 82.1315 cv
354.383 82.1315 352.254 82.9595 352.254 85.1865 cv
cp
f
364.273 94.4285 mo
364.273 94.5455 li
364.277 94.6705 li
364.281 94.7325 li
364.289 94.7955 li
364.297 94.8615 li
364.305 94.9245 li
364.336 95.0495 li
364.355 95.1155 li
364.41 95.2405 li
364.445 95.2995 li
364.484 95.3575 li
364.527 95.4205 li
364.637 95.5295 li
364.703 95.5805 li
364.734 95.6045 li
364.813 95.6505 li
364.852 95.6785 li
364.895 95.7015 li
364.938 95.7215 li
365.031 95.7605 li
365.086 95.7795 li
365.137 95.7995 li
365.191 95.8145 li
365.309 95.8465 li
365.375 95.8615 li
365.438 95.8735 li
365.504 95.8855 li
365.574 95.8965 li
365.648 95.9085 li
365.797 95.9245 li
365.879 95.9365 li
365.961 95.9395 li
366.047 95.9475 li
366.137 95.9475 li
366.23 95.9515 li
367.273 95.9515 li
367.668 95.9515 367.902 95.9515 367.902 95.4755 cv
367.902 95.0215 367.648 95.0215 367.387 95.0215 cv
366.188 95.0025 366.188 94.7405 366.188 94.2875 cv
366.188 90.0495 li
366.188 88.2915 364.781 87.0105 361.84 87.0105 cv
360.723 87.0105 358.313 87.0845 358.313 88.8225 cv
358.313 89.6895 358.996 90.0685 359.531 90.0685 cv
360.141 90.0685 360.773 89.6545 360.773 88.8225 cv
360.773 88.2295 360.402 87.8935 360.34 87.8575 cv
360.891 87.7405 361.523 87.7135 361.762 87.7135 cv
363.246 87.7135 363.93 88.5415 363.93 90.0495 cv
363.93 93.2095 li
363.93 95.1005 362.121 95.3545 361.625 95.3545 cv
360.621 95.3545 359.828 94.6705 359.828 93.7955 cv
359.828 91.6665 362.949 91.3895 363.93 91.3305 cv
363.93 90.7175 li
362.531 90.7795 357.52 90.9515 357.52 93.8225 cv
357.52 95.7175 359.965 96.0685 361.328 96.0685 cv
362.914 96.0685 363.832 95.2565 364.273 94.4285 cv
cp
f
372.34 82.2445 mo
368.848 82.4085 li
368.848 83.3345 li
370.074 83.3345 370.207 83.3345 370.207 84.1045 cv
370.207 95.0215 li
368.848 95.0215 li
368.848 95.9515 li
369.48 95.9285 370.426 95.8855 371.273 95.8855 cv
372.121 95.8855 373.035 95.9285 373.703 95.9515 cv
373.703 95.0215 li
372.34 95.0215 li
cp
f
378.664 82.2445 mo
375.168 82.4085 li
375.168 83.3345 li
376.398 83.3345 376.531 83.3345 376.531 84.1045 cv
376.531 95.0215 li
375.168 95.0215 li
375.168 95.9515 li
375.805 95.9285 376.75 95.8855 377.598 95.8855 cv
378.445 95.8855 379.359 95.9285 380.023 95.9515 cv
380.023 95.0215 li
378.664 95.0215 li
cp
f
395.469 94.4285 mo
395.469 94.5455 li
395.473 94.6705 li
395.48 94.7955 li
395.488 94.8615 li
395.512 94.9865 li
395.531 95.0495 li
395.551 95.1155 li
395.574 95.1785 li
395.602 95.2405 li
395.637 95.2995 li
395.68 95.3575 li
395.723 95.4205 li
395.773 95.4755 li
395.832 95.5295 li
395.895 95.5805 li
395.93 95.6045 li
396.008 95.6505 li
396.047 95.6785 li
396.09 95.7015 li
396.133 95.7215 li
396.18 95.7405 li
396.332 95.7995 li
396.441 95.8305 li
396.508 95.8465 li
396.566 95.8615 li
396.633 95.8735 li
396.695 95.8855 li
396.77 95.8965 li
396.84 95.9085 li
396.914 95.9165 li
396.992 95.9245 li
397.074 95.9365 li
397.156 95.9395 li
397.242 95.9475 li
397.332 95.9475 li
397.422 95.9515 li
398.465 95.9515 li
398.859 95.9515 399.094 95.9515 399.094 95.4755 cv
399.094 95.0215 398.84 95.0215 398.582 95.0215 cv
397.383 95.0025 397.383 94.7405 397.383 94.2875 cv
397.383 90.0495 li
397.383 88.2915 395.977 87.0105 393.035 87.0105 cv
391.914 87.0105 389.504 87.0845 389.504 88.8225 cv
389.504 89.6895 390.191 90.0685 390.723 90.0685 cv
391.34 90.0685 391.969 89.6545 391.969 88.8225 cv
391.969 88.2295 391.598 87.8935 391.535 87.8575 cv
392.086 87.7405 392.719 87.7135 392.961 87.7135 cv
394.438 87.7135 395.129 88.5415 395.129 90.0495 cv
395.129 93.2095 li
395.129 95.1005 393.313 95.3545 392.816 95.3545 cv
391.813 95.3545 391.02 94.6705 391.02 93.7955 cv
391.02 91.6665 394.141 91.3895 395.129 91.3305 cv
395.129 90.7175 li
393.727 90.7795 388.711 90.9515 388.711 93.8225 cv
388.711 95.7175 391.156 96.0685 392.52 96.0685 cv
394.105 96.0685 395.027 95.2565 395.469 94.4285 cv
cp
f
401.359 88.9245 mo
401.359 95.0215 li
399.996 95.0215 li
399.996 95.9515 li
400.555 95.9285 401.738 95.8855 402.484 95.8855 cv
403.262 95.8855 404.426 95.9285 404.977 95.9515 cv
404.977 95.0215 li
403.617 95.0215 li
403.617 90.8965 li
403.617 88.7405 405.313 87.7795 406.555 87.7795 cv
407.23 87.7795 407.637 88.1895 407.637 89.6895 cv
407.637 95.0215 li
406.273 95.0215 li
406.273 95.9515 li
406.832 95.9285 408.02 95.8855 408.766 95.8855 cv
409.539 95.8855 410.707 95.9285 411.258 95.9515 cv
411.258 95.0215 li
409.895 95.0215 li
409.895 89.9045 li
409.895 87.8345 408.828 87.0645 406.852 87.0645 cv
404.957 87.0645 403.914 88.1895 403.398 89.2015 cv
403.398 87.0645 li
399.996 87.2295 li
399.996 88.1545 li
401.223 88.1545 401.359 88.1545 401.359 88.9245 cv
cp
f
413.961 88.9245 mo
413.961 95.0215 li
412.598 95.0215 li
412.598 95.9515 li
413.16 95.9285 414.34 95.8855 415.09 95.8855 cv
415.859 95.8855 417.027 95.9285 417.578 95.9515 cv
417.578 95.0215 li
416.215 95.0215 li
416.215 90.8965 li
416.215 88.7405 417.914 87.7795 419.152 87.7795 cv
419.832 87.7795 420.238 88.1895 420.238 89.6895 cv
420.238 95.0215 li
418.875 95.0215 li
418.875 95.9515 li
419.434 95.9285 420.617 95.8855 421.367 95.8855 cv
422.141 95.8855 423.305 95.9285 423.859 95.9515 cv
423.859 95.0215 li
422.496 95.0215 li
422.496 89.9045 li
422.496 87.8345 421.43 87.0645 419.453 87.0645 cv
417.559 87.0645 416.512 88.1895 416 89.2015 cv
416 87.0645 li
412.598 87.2295 li
412.598 88.1545 li
413.824 88.1545 413.961 88.1545 413.961 88.9245 cv
cp
f
435.016 91.6465 mo
435.012 91.4005 li
434.992 91.1585 li
434.965 90.9205 li
434.93 90.6865 li
434.883 90.4595 li
434.824 90.2365 li
434.758 90.0185 li
434.68 89.8075 li
434.594 89.6005 li
434.496 89.4005 li
434.387 89.2055 li
434.27 89.0185 li
434.141 88.8385 li
434.008 88.6625 li
433.859 88.4945 li
433.707 88.3385 li
433.539 88.1865 li
433.363 88.0415 li
433.184 87.9045 li
432.988 87.7795 li
432.785 87.6585 li
432.574 87.5535 li
432.355 87.4515 li
432.125 87.3615 li
431.887 87.2795 li
431.641 87.2135 li
431.383 87.1465 li
431.121 87.1005 li
430.848 87.0615 li
430.566 87.0335 li
430.277 87.0145 li
429.98 87.0105 li
429.98 87.7135 li
430.809 87.7135 431.637 88.0335 432.074 88.7255 cv
432.488 89.3935 432.488 90.4825 432.488 91.4285 cv
432.488 93.1435 432.488 95.2795 429.98 95.2795 cv
427.473 95.2795 427.473 93.1435 427.473 91.4285 cv
427.473 90.5375 427.473 89.5335 427.805 88.8615 cv
428.188 88.1315 429.016 87.7135 429.98 87.7135 cv
429.98 87.0105 li
426.742 87.0105 424.949 89.0215 424.949 91.6465 cv
424.949 94.0925 426.684 96.0685 429.98 96.0685 cv
433.297 96.0685 435.016 94.0765 435.016 91.6465 cv
cp
f
437.711 88.1115 mo
437.711 93.5255 li
437.711 95.6315 439.434 96.0685 440.832 96.0685 cv
442.336 96.0685 443.223 94.9395 443.223 93.5065 cv
443.223 92.4595 li
442.293 92.4595 li
442.293 93.4595 li
442.293 94.8035 441.664 95.2795 441.109 95.2795 cv
439.965 95.2795 439.965 94.0215 439.965 93.5615 cv
439.965 88.1115 li
442.844 88.1115 li
442.844 87.1825 li
439.965 87.1825 li
439.965 83.4125 li
439.035 83.4125 li
439.016 85.3855 438.051 87.3425 436.094 87.3965 cv
436.094 88.1115 li
cp
f
451.91 94.4285 mo
451.91 94.5455 li
451.914 94.6705 li
451.922 94.7955 li
451.93 94.8615 li
451.941 94.9245 li
451.957 94.9865 li
451.977 95.0495 li
451.996 95.1155 li
452.02 95.1785 li
452.047 95.2405 li
452.082 95.2995 li
452.121 95.3575 li
452.164 95.4205 li
452.215 95.4755 li
452.277 95.5295 li
452.34 95.5805 li
452.41 95.6275 li
452.449 95.6505 li
452.488 95.6785 li
452.535 95.7015 li
452.578 95.7215 li
452.672 95.7605 li
452.723 95.7795 li
452.777 95.7995 li
452.887 95.8305 li
452.949 95.8465 li
453.008 95.8615 li
453.078 95.8735 li
453.141 95.8855 li
453.281 95.9085 li
453.438 95.9245 li
453.516 95.9365 li
453.602 95.9395 li
453.688 95.9475 li
453.773 95.9475 li
453.867 95.9515 li
454.906 95.9515 li
455.305 95.9515 455.539 95.9515 455.539 95.4755 cv
455.539 95.0215 455.285 95.0215 455.027 95.0215 cv
453.824 95.0025 453.824 94.7405 453.824 94.2875 cv
453.824 90.0495 li
453.824 88.2915 452.418 87.0105 449.477 87.0105 cv
448.355 87.0105 445.949 87.0845 445.949 88.8225 cv
445.949 89.6895 446.637 90.0685 447.168 90.0685 cv
447.781 90.0685 448.414 89.6545 448.414 88.8225 cv
448.414 88.2295 448.039 87.8935 447.98 87.8575 cv
448.531 87.7405 449.16 87.7135 449.402 87.7135 cv
450.883 87.7135 451.57 88.5415 451.57 90.0495 cv
451.57 93.2095 li
451.57 95.1005 449.754 95.3545 449.262 95.3545 cv
448.258 95.3545 447.465 94.6705 447.465 93.7955 cv
447.465 91.6665 450.586 91.3895 451.57 91.3305 cv
451.57 90.7175 li
450.172 90.7795 445.156 90.9515 445.156 93.8225 cv
445.156 95.7175 447.602 96.0685 448.965 96.0685 cv
450.547 96.0685 451.473 95.2565 451.91 94.4285 cv
cp
f
457.586 88.1115 mo
457.586 93.5255 li
457.586 95.6315 459.309 96.0685 460.711 96.0685 cv
462.211 96.0685 463.098 94.9395 463.098 93.5065 cv
463.098 92.4595 li
462.172 92.4595 li
462.172 93.4595 li
462.172 94.8035 461.539 95.2795 460.988 95.2795 cv
459.84 95.2795 459.84 94.0215 459.84 93.5615 cv
459.84 88.1115 li
462.719 88.1115 li
462.719 87.1825 li
459.84 87.1825 li
459.84 83.4125 li
458.914 83.4125 li
458.895 85.3855 457.926 87.3425 455.969 87.3965 cv
455.969 88.1115 li
cp
f
468.82 87.0645 mo
465.387 87.2295 li
465.387 88.1545 li
466.555 88.1545 466.688 88.1545 466.688 88.9245 cv
466.688 95.0215 li
465.328 95.0215 li
465.328 95.9515 li
465.941 95.9285 466.906 95.8855 467.738 95.8855 cv
468.332 95.8855 469.336 95.9285 470.047 95.9515 cv
470.047 95.0215 li
468.82 95.0215 li
cp
f
469.02 83.7715 mo
469.012 83.6075 li
469 83.5295 li
468.988 83.4555 li
468.969 83.3815 li
468.949 83.3035 li
468.926 83.2325 li
468.898 83.1625 li
468.863 83.0965 li
468.828 83.0255 li
468.789 82.9595 li
468.75 82.9005 li
468.707 82.8425 li
468.66 82.7795 li
468.613 82.7255 li
468.559 82.6705 li
468.449 82.5765 li
468.391 82.5255 li
468.203 82.4085 li
468.07 82.3465 li
467.996 82.3225 li
467.93 82.2995 li
467.855 82.2795 li
467.781 82.2565 li
467.707 82.2445 li
467.633 82.2365 li
467.555 82.2295 li
467.477 82.2295 li
466.629 82.2295 465.941 82.9245 465.941 83.7715 cv
465.941 84.6195 466.629 85.3075 467.477 85.3075 cv
468.305 85.3075 469.02 84.6355 469.02 83.7715 cv
cp
f
481.422 91.6465 mo
481.418 91.4005 li
481.402 91.1585 li
481.375 90.9205 li
481.34 90.6865 li
481.293 90.4595 li
481.234 90.2365 li
481.164 90.0185 li
481.09 89.8075 li
481.004 89.6005 li
480.906 89.4005 li
480.797 89.2055 li
480.68 89.0185 li
480.551 88.8385 li
480.418 88.6625 li
480.27 88.4945 li
480.117 88.3385 li
479.949 88.1865 li
479.773 88.0415 li
479.59 87.9045 li
479.398 87.7795 li
479.195 87.6585 li
478.98 87.5535 li
478.766 87.4515 li
478.535 87.3615 li
478.297 87.2795 li
478.051 87.2135 li
477.793 87.1465 li
477.531 87.1005 li
477.258 87.0615 li
476.977 87.0335 li
476.688 87.0145 li
476.391 87.0105 li
476.391 87.7135 li
477.219 87.7135 478.051 88.0335 478.484 88.7255 cv
478.895 89.3935 478.895 90.4825 478.895 91.4285 cv
478.895 93.1435 478.895 95.2795 476.391 95.2795 cv
473.883 95.2795 473.883 93.1435 473.883 91.4285 cv
473.883 90.5375 473.883 89.5335 474.215 88.8615 cv
474.594 88.1315 475.422 87.7135 476.391 87.7135 cv
476.391 87.0105 li
473.148 87.0105 471.355 89.0215 471.355 91.6465 cv
471.355 94.0925 473.098 96.0685 476.391 96.0685 cv
479.707 96.0685 481.422 94.0765 481.422 91.6465 cv
cp
f
484.336 88.9245 mo
484.336 95.0215 li
482.977 95.0215 li
482.977 95.9515 li
483.531 95.9285 484.711 95.8855 485.465 95.8855 cv
486.238 95.8855 487.402 95.9285 487.953 95.9515 cv
487.953 95.0215 li
486.59 95.0215 li
486.59 90.8965 li
486.59 88.7405 488.289 87.7795 489.531 87.7795 cv
490.211 87.7795 490.617 88.1895 490.617 89.6895 cv
490.617 95.0215 li
489.254 95.0215 li
489.254 95.9515 li
489.813 95.9285 490.992 95.8855 491.742 95.8855 cv
492.516 95.8855 493.68 95.9285 494.23 95.9515 cv
494.23 95.0215 li
492.867 95.0215 li
492.867 89.9045 li
492.867 87.8345 491.805 87.0645 489.828 87.0645 cv
487.934 87.0645 486.887 88.1895 486.375 89.2015 cv
486.375 87.0645 li
482.977 87.2295 li
482.977 88.1545 li
484.203 88.1545 484.336 88.1545 484.336 88.9245 cv
cp
f
832.59 82.0215 mo
820.199 82.0215 li
820.199 82.9825 li
822.414 82.9825 li
822.414 94.9825 li
820.199 94.9825 li
820.199 95.9435 li
820.98 95.8815 823.051 95.8815 823.949 95.8815 cv
824.953 95.8815 827.188 95.8815 828.086 95.9435 cv
828.086 94.9825 li
825.316 94.9825 li
825.316 89.4515 li
826.348 89.4515 li
828.313 89.4515 828.496 90.3305 828.496 91.8465 cv
829.461 91.8465 li
829.461 86.0925 li
828.496 86.0925 li
828.496 87.6075 828.332 88.4865 826.348 88.4865 cv
825.316 88.4865 li
825.316 82.9825 li
828.188 82.9825 li
831.484 82.9825 831.961 84.5575 832.262 86.9555 cv
833.223 86.9555 li
cp
f
839.891 94.3655 mo
839.891 94.4905 li
839.895 94.6155 li
839.902 94.6825 li
839.906 94.7485 li
839.914 94.8145 li
839.938 94.9475 li
839.957 95.0145 li
839.98 95.0765 li
840.004 95.1435 li
840.035 95.2095 li
840.07 95.2715 li
840.109 95.3345 li
840.16 95.3935 li
840.207 95.4515 li
840.27 95.5105 li
840.336 95.5645 li
840.375 95.5885 li
840.41 95.6115 li
840.453 95.6355 li
840.492 95.6625 li
840.539 95.6865 li
840.582 95.7055 li
840.633 95.7295 li
840.68 95.7485 li
840.789 95.7875 li
840.848 95.8075 li
840.906 95.8225 li
841.031 95.8545 li
841.102 95.8655 li
841.172 95.8815 li
841.242 95.8935 li
841.316 95.9045 li
841.395 95.9125 li
841.559 95.9285 li
841.645 95.9325 li
841.734 95.9395 li
841.824 95.9395 li
841.918 95.9435 li
843 95.9435 li
843.41 95.9435 843.656 95.9435 843.656 95.4515 cv
843.656 94.9825 843.395 94.9825 843.125 94.9825 cv
841.879 94.9635 841.879 94.6895 841.879 94.2215 cv
841.879 89.8225 li
841.879 87.9985 840.418 86.6705 837.367 86.6705 cv
836.203 86.6705 833.703 86.7485 833.703 88.5535 cv
833.703 89.4515 834.422 89.8465 834.973 89.8465 cv
835.609 89.8465 836.262 89.4125 836.262 88.5535 cv
836.262 87.9365 835.875 87.5885 835.813 87.5495 cv
836.387 87.4285 837.039 87.4005 837.289 87.4005 cv
838.828 87.4005 839.539 88.2605 839.539 89.8225 cv
839.539 93.1005 li
839.539 95.0645 837.656 95.3305 837.141 95.3305 cv
836.102 95.3305 835.281 94.6155 835.281 93.7095 cv
835.281 91.5025 838.52 91.2135 839.539 91.1505 cv
839.539 90.5185 li
838.086 90.5805 832.883 90.7605 832.883 93.7365 cv
832.883 95.7015 835.418 96.0685 836.832 96.0685 cv
838.477 96.0685 839.438 95.2255 839.891 94.3655 cv
cp
f
848.262 81.7295 mo
844.637 81.8965 li
844.637 82.8615 li
845.91 82.8615 846.051 82.8615 846.051 83.6585 cv
846.051 94.9825 li
844.637 94.9825 li
844.637 95.9435 li
845.293 95.9245 846.277 95.8815 847.156 95.8815 cv
848.035 95.8815 848.98 95.9245 849.672 95.9435 cv
849.672 94.9825 li
848.262 94.9825 li
cp
f
854.82 81.7295 mo
851.199 81.8965 li
851.199 82.8615 li
852.469 82.8615 852.613 82.8615 852.613 83.6585 cv
852.613 94.9825 li
851.199 94.9825 li
851.199 95.9435 li
851.852 95.9245 852.832 95.8815 853.715 95.8815 cv
854.594 95.8815 855.539 95.9245 856.234 95.9435 cv
856.234 94.9825 li
854.82 94.9825 li
cp
f
872.305 94.3655 mo
872.305 94.4905 li
872.309 94.6155 li
872.309 94.6825 li
872.324 94.8145 li
872.348 94.9475 li
872.367 95.0145 li
872.391 95.0765 li
872.414 95.1435 li
872.445 95.2095 li
872.48 95.2715 li
872.523 95.3345 li
872.566 95.3935 li
872.621 95.4515 li
872.684 95.5105 li
872.75 95.5645 li
872.82 95.6115 li
872.859 95.6355 li
872.906 95.6625 li
872.945 95.6865 li
872.996 95.7055 li
873.039 95.7295 li
873.094 95.7485 li
873.145 95.7685 li
873.199 95.7875 li
873.258 95.8075 li
873.316 95.8225 li
873.441 95.8545 li
873.508 95.8655 li
873.578 95.8815 li
873.727 95.9045 li
873.883 95.9205 li
873.969 95.9285 li
874.055 95.9325 li
874.141 95.9395 li
874.238 95.9395 li
874.332 95.9435 li
875.414 95.9435 li
875.824 95.9435 876.066 95.9435 876.066 95.4515 cv
876.066 94.9825 875.801 94.9825 875.531 94.9825 cv
874.285 94.9635 874.285 94.6895 874.285 94.2215 cv
874.285 89.8225 li
874.285 87.9985 872.832 86.6705 869.777 86.6705 cv
868.617 86.6705 866.117 86.7485 866.117 88.5535 cv
866.117 89.4515 866.828 89.8465 867.383 89.8465 cv
868.016 89.8465 868.676 89.4125 868.676 88.5535 cv
868.676 87.9365 868.289 87.5885 868.223 87.5495 cv
868.793 87.4285 869.449 87.4005 869.703 87.4005 cv
871.234 87.4005 871.949 88.2605 871.949 89.8225 cv
871.949 93.1005 li
871.949 95.0645 870.066 95.3305 869.555 95.3305 cv
868.516 95.3305 867.691 94.6155 867.691 93.7095 cv
867.691 91.5025 870.926 91.2135 871.949 91.1505 cv
871.949 90.5185 li
870.496 90.5805 865.293 90.7605 865.293 93.7365 cv
865.293 95.7015 867.832 96.0685 869.246 96.0685 cv
870.891 96.0685 871.848 95.2255 872.305 94.3655 cv
cp
f
878.418 88.6545 mo
878.418 94.9825 li
877.004 94.9825 li
877.004 95.9435 li
877.578 95.9245 878.809 95.8815 879.586 95.8815 cv
880.387 95.8815 881.594 95.9245 882.168 95.9435 cv
882.168 94.9825 li
880.754 94.9825 li
880.754 90.7055 li
880.754 88.4675 882.512 87.4675 883.809 87.4675 cv
884.508 87.4675 884.93 87.8965 884.93 89.4515 cv
884.93 94.9825 li
883.516 94.9825 li
883.516 95.9435 li
884.094 95.9245 885.32 95.8815 886.098 95.8815 cv
886.902 95.8815 888.113 95.9245 888.68 95.9435 cv
888.68 94.9825 li
887.27 94.9825 li
887.27 89.6745 li
887.27 87.5255 886.164 86.7295 884.117 86.7295 cv
882.148 86.7295 881.063 87.8965 880.531 88.9435 cv
880.531 86.7295 li
877.004 86.8965 li
877.004 87.8575 li
878.273 87.8575 878.418 87.8575 878.418 88.6545 cv
cp
f
891.488 88.6545 mo
891.488 94.9825 li
890.078 94.9825 li
890.078 95.9435 li
890.652 95.9245 891.883 95.8815 892.66 95.8815 cv
893.461 95.8815 894.668 95.9245 895.238 95.9435 cv
895.238 94.9825 li
893.824 94.9825 li
893.824 90.7055 li
893.824 88.4675 895.586 87.4675 896.875 87.4675 cv
897.578 87.4675 898.004 87.8965 898.004 89.4515 cv
898.004 94.9825 li
896.59 94.9825 li
896.59 95.9435 li
897.168 95.9245 898.395 95.8815 899.172 95.8815 cv
899.973 95.8815 901.18 95.9245 901.754 95.9435 cv
901.754 94.9825 li
900.344 94.9825 li
900.344 89.6745 li
900.344 87.5255 899.234 86.7295 897.184 86.7295 cv
895.219 86.7295 894.133 87.8965 893.602 88.9435 cv
893.602 86.7295 li
890.078 86.8965 li
890.078 87.8575 li
891.348 87.8575 891.488 87.8575 891.488 88.6545 cv
cp
f
913.328 91.4795 mo
913.32 91.2255 li
913.305 90.9755 li
913.281 90.7295 li
913.242 90.4865 li
913.191 90.2525 li
913.133 90.0185 li
913.063 89.7915 li
912.984 89.5725 li
912.891 89.3575 li
912.789 89.1505 li
912.68 88.9475 li
912.555 88.7565 li
912.426 88.5645 li
912.285 88.3855 li
912.133 88.2135 li
911.969 88.0495 li
911.801 87.8935 li
911.617 87.7405 li
911.426 87.6005 li
911.223 87.4675 li
911.016 87.3465 li
910.797 87.2325 li
910.57 87.1315 li
910.332 87.0375 li
910.086 86.9515 li
909.828 86.8815 li
909.563 86.8145 li
909.289 86.7645 li
909.008 86.7255 li
908.715 86.6935 li
908.418 86.6745 li
908.105 86.6705 li
908.105 87.4005 li
908.969 87.4005 909.828 87.7325 910.277 88.4515 cv
910.707 89.1435 910.707 90.2715 910.707 91.2565 cv
910.707 93.0335 910.707 95.2525 908.105 95.2525 cv
905.504 95.2525 905.504 93.0335 905.504 91.2565 cv
905.504 90.3305 905.504 89.2915 905.852 88.5925 cv
906.242 87.8345 907.105 87.4005 908.105 87.4005 cv
908.105 86.6705 li
904.746 86.6705 902.883 88.7605 902.883 91.4795 cv
902.883 94.0185 904.688 96.0685 908.105 96.0685 cv
911.547 96.0685 913.328 94.0025 913.328 91.4795 cv
cp
f
916.125 87.8145 mo
916.125 93.4285 li
916.125 95.6155 917.914 96.0685 919.363 96.0685 cv
920.926 96.0685 921.844 94.8965 921.844 93.4085 cv
921.844 92.3225 li
920.875 92.3225 li
920.875 93.3615 li
920.875 94.7565 920.223 95.2525 919.652 95.2525 cv
918.465 95.2525 918.465 93.9435 918.465 93.4675 cv
918.465 87.8145 li
921.453 87.8145 li
921.453 86.8505 li
918.465 86.8505 li
918.465 82.9395 li
917.5 82.9395 li
917.48 84.9865 916.477 87.0185 914.453 87.0725 cv
914.453 87.8145 li
cp
f
930.855 94.3655 mo
930.863 94.6155 li
930.863 94.6825 li
930.879 94.8145 li
930.902 94.9475 li
930.922 95.0145 li
930.945 95.0765 li
930.969 95.1435 li
931 95.2095 li
931.035 95.2715 li
931.078 95.3345 li
931.121 95.3935 li
931.176 95.4515 li
931.238 95.5105 li
931.301 95.5645 li
931.34 95.5885 li
931.375 95.6115 li
931.414 95.6355 li
931.457 95.6625 li
931.5 95.6865 li
931.551 95.7055 li
931.594 95.7295 li
931.648 95.7485 li
931.699 95.7685 li
931.754 95.7875 li
931.813 95.8075 li
931.93 95.8385 li
931.996 95.8545 li
932.063 95.8655 li
932.133 95.8815 li
932.281 95.9045 li
932.438 95.9205 li
932.523 95.9285 li
932.609 95.9325 li
932.695 95.9395 li
932.789 95.9395 li
932.887 95.9435 li
933.965 95.9435 li
934.379 95.9435 934.621 95.9435 934.621 95.4515 cv
934.621 94.9825 934.355 94.9825 934.086 94.9825 cv
932.84 94.9635 932.84 94.6895 932.84 94.2215 cv
932.84 89.8225 li
932.84 87.9985 931.387 86.6705 928.332 86.6705 cv
927.172 86.6705 924.672 86.7485 924.672 88.5535 cv
924.672 89.4515 925.383 89.8465 925.938 89.8465 cv
926.57 89.8465 927.23 89.4125 927.23 88.5535 cv
927.23 87.9365 926.844 87.5885 926.777 87.5495 cv
927.348 87.4285 928.004 87.4005 928.258 87.4005 cv
929.789 87.4005 930.504 88.2605 930.504 89.8225 cv
930.504 93.1005 li
930.504 95.0645 928.621 95.3305 928.109 95.3305 cv
927.066 95.3305 926.246 94.6155 926.246 93.7095 cv
926.246 91.5025 929.48 91.2135 930.504 91.1505 cv
930.504 90.5185 li
929.051 90.5805 923.848 90.7605 923.848 93.7365 cv
923.848 95.7015 926.387 96.0685 927.801 96.0685 cv
929.445 96.0685 930.402 95.2255 930.855 94.3655 cv
cp
f
936.746 87.8145 mo
936.746 93.4285 li
936.746 95.6155 938.531 96.0685 939.98 96.0685 cv
941.543 96.0685 942.461 94.8965 942.461 93.4085 cv
942.461 92.3225 li
941.5 92.3225 li
941.5 93.3615 li
941.5 94.7565 940.844 95.2525 940.273 95.2525 cv
939.086 95.2525 939.086 93.9435 939.086 93.4675 cv
939.086 87.8145 li
942.07 87.8145 li
942.07 86.8505 li
939.086 86.8505 li
939.086 82.9395 li
938.117 82.9395 li
938.102 84.9865 937.098 87.0185 935.07 87.0725 cv
935.07 87.8145 li
cp
f
948.402 86.7295 mo
944.832 86.8965 li
944.832 87.8575 li
946.051 87.8575 946.188 87.8575 946.188 88.6545 cv
946.188 94.9825 li
944.773 94.9825 li
944.773 95.9435 li
945.41 95.9245 946.414 95.8815 947.273 95.8815 cv
947.891 95.8815 948.93 95.9245 949.672 95.9435 cv
949.672 94.9825 li
948.402 94.9825 li
cp
f
948.605 83.3115 mo
948.602 83.2255 li
948.598 83.1435 li
948.586 83.0615 li
948.574 82.9825 li
948.555 82.9045 li
948.531 82.8265 li
948.477 82.6785 li
948.441 82.6075 li
948.41 82.5375 li
948.367 82.4715 li
948.328 82.4085 li
948.281 82.3465 li
948.23 82.2835 li
948.184 82.2255 li
948.129 82.1705 li
948.07 82.1195 li
948.016 82.0685 li
947.953 82.0215 li
947.891 81.9795 li
947.824 81.9395 li
947.758 81.8965 li
947.691 81.8655 li
947.621 81.8305 li
947.473 81.7835 li
947.398 81.7645 li
947.32 81.7405 li
947.246 81.7295 li
947.164 81.7215 li
947.086 81.7135 li
947.008 81.7135 li
946.129 81.7135 945.41 82.4325 945.41 83.3115 cv
945.41 84.1895 946.129 84.9045 947.008 84.9045 cv
947.867 84.9045 948.605 84.2095 948.605 83.3115 cv
cp
f
961.473 91.4795 mo
961.465 91.2255 li
961.449 90.9755 li
961.426 90.7295 li
961.387 90.4865 li
961.34 90.2525 li
961.277 90.0185 li
961.207 89.7915 li
961.129 89.5725 li
961.035 89.3575 li
960.934 89.1505 li
960.824 88.9475 li
960.699 88.7565 li
960.57 88.5645 li
960.43 88.3855 li
960.277 88.2135 li
960.113 88.0495 li
959.945 87.8935 li
959.766 87.7405 li
959.57 87.6005 li
959.371 87.4675 li
959.16 87.3465 li
958.941 87.2325 li
958.715 87.1315 li
958.477 87.0375 li
958.23 86.9515 li
957.973 86.8815 li
957.707 86.8145 li
957.434 86.7645 li
957.152 86.7255 li
956.863 86.6935 li
956.563 86.6745 li
956.254 86.6705 li
956.254 87.4005 li
957.113 87.4005 957.973 87.7325 958.422 88.4515 cv
958.852 89.1435 958.852 90.2715 958.852 91.2565 cv
958.852 93.0335 958.852 95.2525 956.254 95.2525 cv
953.652 95.2525 953.652 93.0335 953.652 91.2565 cv
953.652 90.3305 953.652 89.2915 953.996 88.5925 cv
954.387 87.8345 955.25 87.4005 956.254 87.4005 cv
956.254 86.6705 li
952.891 86.6705 951.027 88.7605 951.027 91.4795 cv
951.027 94.0185 952.832 96.0685 956.254 96.0685 cv
959.695 96.0685 961.473 94.0025 961.473 91.4795 cv
cp
f
964.496 88.6545 mo
964.496 94.9825 li
963.082 94.9825 li
963.082 95.9435 li
963.66 95.9245 964.887 95.8815 965.664 95.8815 cv
966.469 95.8815 967.672 95.9245 968.246 95.9435 cv
968.246 94.9825 li
966.836 94.9825 li
966.836 90.7055 li
966.836 88.4675 968.594 87.4675 969.887 87.4675 cv
970.586 87.4675 971.008 87.8965 971.008 89.4515 cv
971.008 94.9825 li
969.594 94.9825 li
969.594 95.9435 li
970.172 95.9245 971.402 95.8815 972.18 95.8815 cv
972.98 95.8815 974.191 95.9245 974.762 95.9435 cv
974.762 94.9825 li
973.348 94.9825 li
973.348 89.6745 li
973.348 87.5255 972.242 86.7295 970.195 86.7295 cv
968.23 86.7295 967.145 87.8965 966.609 88.9435 cv
966.609 86.7295 li
963.082 86.8965 li
963.082 87.8575 li
964.352 87.8575 964.496 87.8575 964.496 88.6545 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
