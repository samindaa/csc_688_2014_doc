%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: human_falling_backward2.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: ds
%%CreationDate: 7/22/2015, 10:03:10 PM
%%BoundingBox: -1 0 908 489
%%HiResBoundingBox: 0 0 907.1418 488.1114
%%CropBox: 0 0 907.1418 488.1114
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 861 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="cairo 1.14.1 (http://cairographics.org)"
   xmp:ModifyDate="2015-07-22T22:02:48-04:00"
   xmp:CreateDate="2015-07-22T22:02:48-04:00"
   xmp:MetadataDate="2015-07-22T22:02:48-04:00"
   pdf:Producer="cairo 1.14.1 (http://cairographics.org)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:58bf9549-e47e-486e-90be-976751068584"
   xmpMM:InstanceID="uuid:51ae0ebb-ade4-4b5c-afb1-28e0dd200d38"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -488.111 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 488.111 li
907.142 488.111 li
907.142 0 li
cp
clp
[1 0 0 1 -98.1677 0 ]ct
0 519.822 mo
1088 519.822 li
1088 -28.1778 li
0 -28.1778 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
142.398 13.4242 mo
988.8 13.4242 li
988.8 462.221 li
142.398 462.221 li
cp
f
.8 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
142.398 462.22 mo
988.801 462.22 li
.711879 .649958 .636652 .688777 cmyk
@
142.398 462.22 mo
142.398 453.76 li
@
283.465 462.22 mo
283.465 453.76 li
@
424.535 462.22 mo
424.535 453.76 li
@
565.602 462.22 mo
565.602 453.76 li
@
706.668 462.22 mo
706.668 453.76 li
@
847.734 462.22 mo
847.734 453.76 li
@
988.801 462.22 mo
988.801 453.76 li
@
%ADOBeginSubsetFont: PBAAAA+Verdana Initial
ct_T42Dict begin
-0.559 -0.301 1.445 1.051
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Verdana
Type42DictBegin
[<00010000000a000a000a000a637674204ca24102000000ac000001986670
676da4ce6d5100000244000002ba676c7966cf6af841000008ac00000648
68656164d95c59010000050000000036686865610f2707f8000005380000
0024686d747827f906380000055c000000206c6f63610842068e0000057c
000000126d617870028802dd0000059000000020707265700870ef400000
05b0000002fc67646972000000000000000000000000061e061405f005d1
047c045d03dd00100000ffe7ffe1fe78fe64fe590394001f0000009600aa
00b900c600ce000000000000000000bc00c200000000007600b200c000cb
0000000000000000000000000081009400a600cc00da00ef000000000000
00000098009e00ab00b000000000000000000000000000900098009e00a4
00a900ae00b300ba00c3000000880091009800a500ac0000000000000000
0000006f0087008f009b00a000d3011d00000000000000c3021401c20000
000000e9000c02d10173018e001a002c0044005c0073007e008600b200c8
014c001a003d00440050005c00720078009200b200b900c8000000000000
000000000000000000000000003d0056005d006a006e00b100b900c10000
0000002a003d00540064006a00b100b90000000000000071007a008900a1
00a700bb006f007a00870091009a00000000000000000000000000000000
0000008102210221007400e500b900ca019502c600ac00a700850614000a
000005d1001f0000045d001f00000000ffe10000fe64fff50000036202f4
02a2029100af026a004c401555543736322f2e2d2c26251f141312110d0c
0504022c20b003254523452361688a204568208a234460442d2c4b525845
441b2121592d2c202045684420b001602045b0467668188a4560442d2cb0
122bb0022545b00225456ab0408b60b0022523442121212d2cb0132bb002
2545b00225456ab8ffc08c60b0022523442121212d2c2069b04061b0008b
20b12cc08a8cb8100062602b0c642364615c58b00361592d2cb100032545
685458b0032545b0032545606820b004252344b0042523441bb003252045
68208a2344b00325456860b003252344592d2cb00325204568208a2344b0
0325456860b0032523442d2cb00943588721c01bb01243588745b0112bb0
472344b0477ae41b038a45186920b04723448a8a8720b0a05158b0112bb0
472344b0477ae41b21b0477ae4595959182d2c4b525845441b2121592d2c
462346608a8a462320468a608a61b8ff8062232010238ab14b4b8a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b00325
4652583f1b2111592d2c21210c6423648bb84000622d2c21b08051580c64
23648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb8
1555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb0
134358031b02592d2c4b53234b515a5820458a60441b2121592d2c4b5323
4b515a58381b2121592d2cb1020042b123018851b1400188535a58b91000
0020885458b202010243604259b12401885158b920000040885458b20202
02436042b12401885458b2022002436042004b014b5258b2020802436042
591bb940000080885458b202040243604259b94000008063b80100885458
b202080243604259b94000010063b80200885458b202100243604259b940
00020063b80400885458b202400243604259595959592d2cb0024354584b
53234b515a58381b2121591b21212121592d0000000100000005051f1a5d
b3cf5f0f3cf5001b080000000000aa7e442900000000c891c4c0fb86fd93
0b93086800000009000200000000000000010000080bfe5200000c2cfb86
fd710b930001000000000000000000000000000000080800010005160089
051600bb05160116051600a1051600a703a2009902e900fd0000002000a2
01300192023602ea03080324000000010000000800780007006b00050002
0010002f00560000020a01c800030001b90054ffc0401eb229323610b220
b240b250b270b280b2a0b2b0b2d0b2e0b20ac0b2f0b202b8ffc04070b517
18361f44010f561f56024f555f55026f54019f54af540251531704525316
04535215044a495204464937044749320448493204493539043c3f32043d
3f3d043e3f2104433f1d04423f5204413f5204403f52043f353204323364
04333534043534540434351e04d034e034f03403b8ffeeb3b4254836b8ff
e0b3b4102336b8ffee400db4090f36b41a480476b386b302b8fff0b3b325
4836b8fffa40ffb3092436b314480489881304706c7078020f9cdf9e0240
9d161936409c161b3640971719364096171b368685131f0f840f850f8e0f
8f0f901f841f8e1f8f2f8e808580888f919085908790880f40820910360f
721f72024071090c360f6d0120c80120c7013fc6efc60220c540c5020062
0100621062024061a061020f5b012d1411042c1425042b1439042a141304
291415041f141e042120430420143c04c91a45041a1b47041b1a3c041a14
3204151439041314480412141a0411141a0470140140144143360f0e2a1f
0006010dc34b1f0cc24b1f0ac04b1f09c04b1f05bc4b1f04bd4b1f03b94b
1f02ba4b1f01b64b1f00b74b1fc3c22a1fc0bf2a1fbd4056bc211fbab921
1fb7b6211fc2c3c40dbfc0c10dbcbdbe0cb9babb0cb6b7b80c10bc80bc02
40b980b9020fb63fb64fb67fb6040fb62fb63fb66fb67fb6bfb6cfb6ffb6
080a0937040c0d02050402030202010002500501b801ff01b0124b004b54
42b013014b004b5342b109322b4bb0645242858d8d1db0964b5258b0801d
59b808004b5458b001b0018e59b0084b5358b001b0018e59002b2b2b2b2b
737473732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb00345b00645
6861b006234473b00345b00e456861b00e2344b00e45b00f456861b00f23
442b01b0144568b01423442b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73
73737373737373732b732b732b2b2b2b2b73732b2b2b2b732b2b2b2b0075
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73747373742b73742b2b
00>
[1609 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 64 1 <00020089ffe1048f05ef000b0023008740223601390b340c3b123b18341e
4501490b440c4b124b18441e0c154909022149030a0fb8fff4b60c0c0255
0f2100b8fff0b40f0f025500b8fff4401b0b0b025500180c0c0255009e25
0f251f25021b0c0c0c02551b2106b8fff040130f0f025506100909025506
0c0b0b025506982410f62b2b2bed2b5d10f62b2b2bed2b003fed3fed3130
5d0110022120021110122120120136363534262726262322060706061514
16171616333236048ffbfef8fef4f7fa0109010cf7fef92319192423795f
5e7b24221916242179645e7c02e9fe6ffe89017c018a018d017bfe7ffcb5
51db9a98e04e4d4e4e4f4aee8e9cd2534e524e00>PBAAAA+Verdana AddT42Char 
1 608 3 <000101160000043c05d6000f00884035054606060c030e034801080f111f
110205021f0f010f0f0c0e0c0c0c02550e0d0c0c06550e20023f036f0370
0303030c1010025503b8ffe0400b0f0f025503160909025503b8fff4401d
0b0b0255031e0c0c025503060d0d025503100d0d065503100c0c0655032f
2b2b2b2b2b2b2b2b5d33ed2b2b39322f5d2f335d003ffd323f332fed3130
21213521112135323637363637331121043cfcda0136feca3f90252e3504
9b01309803e6881514194d41fac20000>PBAAAA+Verdana AddT42Char 
1 804 4 <000100a10000049105f0002000e14051501f601f02050306111603151124
113b05380d350e3f1d3f1e391f4b05480d450e4f1d4f1e491f5f035d045d
055b0956115f195e1b5d1c5f1d5f1e6a036406651162156f1e700274117f
1a7f1c7f1e2503b8ffe8b40c0c065502b8ffe8403f0c0c0655000f100f2d
082f1c300f400f060f400c0c02550f400c0d06550f0f0b4a1302021f4a01
081f020821160c0f0f0255160c0909025516040b0b025516b8fff440190c
0c025516160c0c06551616209e220f221f2202101002992110f6322f5d10
f6322f2b2b2b2b2bed1239003ffd323fed332f2b2b5d31302b2b5d015d21
213536363736363534262322060723353636333204151406070606070606
07210491fc1069d35bc08e99895bd4650a47ed6fe501042b2a27694b6be4
630321d15ab459badb7f74834042d2233addbd5593423e784969c554>PBAAAA+Verdana AddT42Char 
1 1132 5 <000100a7ffe1047c05f0003d00b8408e0b0b052f1a0b152f290b262f293c
3c0b35143122342f4a0b45144322432f56015905590b552f6a0b662f6a3c
780b762f74357b3c1a343a443a023b3a1e491f012d112d022d2d294a1f09
31020f0d1f0d020d0d114a090a2321370c0c0c025537040d0d025537060c
0c0655371e2e1621032e1e3a37040c031a0c0c0255030c0c0c065503a03f
0f3f1f3f020c9a3e10e65d10e62b2b11173910ed2f2f2f2b2b2bed003fed
332f5d3f1239ed332f5d2ffd39395d31305d011616151406070606232226
273533161633323637363635342627262623233533323635342627262623
2206072335363633321617161615140607151616040e303e4a434bcb797c
f04d0f55e66b3f8e2c2e2d332d2d804a5a4698b52e292b623e5fd65f0a47
ed6f6da643484aaf77307c02cd2b826766aa3f46433b23d1384a2a292c6a
5150691e1f17a67f7a36511a1a14443ed1233b282c30885b7cb9180e0833
>PBAAAA+Verdana AddT42Char 
1 324 2 <000100bbffe1048505d1002a0097403d0a081a082b083d0835113d164b08
44115a0854296a087a080c1d1d1a490f251f2540250325214a25061e020f
0a1f0a020a0a0e4a060a2022204f1d011db8ffec402e0b0b02551d160c0c
02551d0e0d0d02551d100c0c06551d142100201d0900160c0c0255009f2c
0f2c1f2c02099b2b10e65d10e62b11393910ed2f2b2b2b2b5ded2f003fed
332f5d3f1239ed2f5dfd322f31305d011406070606232226273533161633
323637363635342627262623220607112115211136363332161716160485
4c4248c7837ae24e0e52dc6a4785342c2d352f34955c58a33b0380fd412b
5a2179b64c505801d968be41464b3324d3344928322b784f4d6a20261f18
0c02ffaffe740404293437ae0000>PBAAAA+Verdana AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
00000000>PBAAAA+Verdana AddT42Char 
PBAAAA+Verdana /CharStrings get begin
/zero 1 def
/one 3 def
/two 4 def
/three 5 def
/five 2 def
end
PBAAAA+Verdana /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
pop
end
%ADOEndSubsetFont
/BRVEJE+Verdana /PBAAAA+Verdana findfont ct_VMDictPut
/BRVEJE+Verdana*1 
[48{/.notdef}rp /zero /one /two /three /.notdef /five 202{/.notdef}rp]
BRVEJE+Verdana nf
BRVEJE+Verdana*1 [10.4 0 0 -10.4 0 0 ]msf
138.8 476.844 mo
(0)sh
276.667 476.844 mo
(50)
[6.60394 0 ]xsh
414.533 476.844 mo
(100)
[6.60394 6.60394 0 ]xsh
555.6 476.844 mo
(150)
[6.60394 6.60394 0 ]xsh
696.667 476.844 mo
(200)
[6.60394 6.60394 0 ]xsh
837.733 476.844 mo
(250)
[6.60394 6.60394 0 ]xsh
978.8 476.844 mo
(300)
[6.60394 6.60394 0 ]xsh
142.398 462.22 mo
142.398 13.4242 li
@
142.398 425.834 mo
150.863 425.834 li
@
142.398 365.185 mo
150.863 365.185 li
@
142.398 304.537 mo
150.863 304.537 li
@
142.398 243.888 mo
150.863 243.888 li
@
142.398 183.24 mo
150.863 183.24 li
@
142.398 122.592 mo
150.863 122.592 li
@
142.398 61.9392 mo
150.863 61.9392 li
@
%ADOBeginSubsetFont: PBAAAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Verdana gcheck setglobal} if
1 1492 6 <000100990231030902e600030020401401420f0201020f054f004f055f00
5f05050000022f332f5d002f5ded3130012135210309fd9002700231b500
>PBAAAA+Verdana AddT42Char 
1 1552 7 <000100fd000001ec011d00030020b602560108002d01b8ffe8400a0f0f02
552f013f0102012f5d2bed003fed31302123113301ecefef011d>PBAAAA+Verdana AddT42Char 
PBAAAA+Verdana /CharStrings get begin
/hyphen 6 def
/period 7 def
end
PBAAAA+Verdana /Encoding get
dup 45 /hyphen put
dup 46 /period put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRVEJE+Verdana*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three 
/.notdef /five 202{/.notdef}rp]
BRVEJE+Verdana nf
BRVEJE+Verdana*1 [10.4 0 0 -10.4 0 0 ]msf
110.978 429.433 mo
(-0.15)
[4.72154 6.60394 3.77527 6.60395 0 ]xsh
117.378 368.784 mo
(-0.1)
[4.72154 6.60394 3.77527 0 ]xsh
110.978 308.136 mo
(-0.05)
[4.72154 6.60394 3.77527 6.60395 0 ]xsh
130.978 247.487 mo
(0)sh
114.978 186.838 mo
(0.05)
[6.60394 3.77527 6.60395 0 ]xsh
121.378 126.19 mo
(0.1)
[6.60394 3.77527 0 ]xsh
114.978 65.5411 mo
(0.15)
[6.60394 3.77527 6.60395 0 ]xsh
0 lc
2 lj
145.223 194.013 mo
148.043 229.545 li
150.863 271.342 li
153.684 289.459 li
156.508 265.236 li
159.328 243.01 li
162.148 249.603 li
164.969 256.631 li
167.793 253.31 li
170.613 246.81 li
173.434 242.994 li
176.258 243.791 li
179.078 236.353 li
181.898 233.799 li
184.719 234.4 li
187.543 235.459 li
190.363 239.392 li
193.184 239.064 li
196.004 235.9 li
198.828 238.013 li
201.648 240.181 li
204.469 238.857 li
207.289 238.345 li
210.113 237.748 li
212.934 235.533 li
215.754 234.478 li
218.574 236.08 li
221.398 240.189 li
224.219 240.08 li
227.039 235.174 li
229.863 236.338 li
232.684 236.4 li
235.504 234.795 li
238.324 235.943 li
241.148 236.736 li
243.969 251.654 li
246.789 251.209 li
249.609 251.244 li
252.434 279.357 li
255.254 282.314 li
258.074 233.123 li
260.895 211.154 li
263.719 242.517 li
266.539 273.951 li
269.359 271.654 li
272.18 230.506 li
275.004 219.994 li
277.824 255.822 li
280.645 271.736 li
283.465 260.115 li
.875212 .526726 .00314336 .000793469 cmyk
@
283.465 260.115 mo
286.289 232.58 li
289.109 215.369 li
291.93 234.31 li
294.754 251.056 li
297.574 232.959 li
300.395 228.271 li
303.215 241.748 li
306.039 253.092 li
308.859 258.896 li
311.68 228.888 li
314.5 230.193 li
317.324 253.291 li
320.145 247.783 li
322.965 239.588 li
325.785 239.381 li
328.609 241.228 li
331.43 239.345 li
334.25 237.408 li
337.07 238.174 li
339.895 238.677 li
342.715 239.232 li
345.535 239.013 li
348.355 238.814 li
351.18 239.146 li
354 245.904 li
356.82 253.896 li
359.645 235.158 li
362.465 213.56 li
365.285 226.291 li
368.105 263.658 li
370.93 262.927 li
373.75 228.631 li
376.57 223.416 li
379.391 235.697 li
382.215 264.595 li
385.035 276.08 li
387.855 240.892 li
390.676 220.275 li
393.5 231.205 li
396.32 250.095 li
399.141 259.088 li
401.961 246.783 li
404.785 250.494 li
407.605 255.775 li
410.426 247.908 li
413.246 238.802 li
416.07 229.396 li
418.891 236.76 li
421.711 246.896 li
@
421.711 246.896 mo
424.535 251.529 li
427.355 242.728 li
430.176 233.92 li
432.996 237.037 li
435.82 240.103 li
438.641 241.217 li
441.461 240.787 li
444.281 241.4 li
447.105 241.205 li
449.926 241.369 li
452.746 241.342 li
455.566 241.248 li
458.391 241.47 li
461.211 236.537 li
464.031 229.697 li
466.852 234.783 li
469.676 255.424 li
472.496 265.834 li
475.316 237.404 li
478.137 219.677 li
480.961 241.365 li
483.781 262.349 li
486.602 261.709 li
489.426 237.572 li
492.246 224.002 li
495.066 236.51 li
497.887 260.709 li
500.711 263.529 li
503.531 237.642 li
506.352 228.552 li
509.172 243.537 li
511.996 263.295 li
514.816 261.791 li
517.637 239.474 li
520.457 228.478 li
523.281 228.877 li
526.102 239.263 li
528.922 246.361 li
531.742 244.65 li
534.566 251.521 li
537.387 252.474 li
540.207 247.853 li
543.031 236.693 li
545.852 232.849 li
548.672 238.166 li
551.492 239.623 li
554.316 241.217 li
557.137 240.842 li
559.957 242.447 li
@
559.957 242.447 mo
562.777 242.775 li
565.602 242.47 li
568.422 242.154 li
571.242 242.631 li
574.063 242.638 li
576.887 242.4 li
579.707 243.041 li
582.527 242.83 li
585.348 235.123 li
588.172 231.451 li
590.992 253.345 li
593.813 267.982 li
596.633 252.877 li
599.457 234.517 li
602.277 229.369 li
605.098 254.299 li
607.922 269.802 li
610.742 254.853 li
613.563 234.525 li
616.383 229.865 li
619.207 256.842 li
622.027 266.443 li
624.848 241.814 li
627.668 228.181 li
630.492 233.267 li
633.313 248.256 li
636.133 254.908 li
638.953 241.396 li
641.777 231.127 li
644.598 240.752 li
647.418 252.783 li
650.238 247.338 li
653.063 239.392 li
655.883 250.424 li
658.703 253.779 li
661.523 243.916 li
664.348 239.256 li
667.168 237.189 li
669.988 240.24 li
672.813 242.228 li
675.633 242.357 li
678.453 241.888 li
681.273 242.17 li
684.098 242.181 li
686.918 241.978 li
689.738 242.439 li
692.559 242.646 li
695.383 241.228 li
698.203 240.838 li
@
698.203 240.838 mo
701.023 242.377 li
703.844 242.885 li
706.668 240.908 li
709.488 241.064 li
712.309 244.775 li
715.129 243.049 li
717.953 239.951 li
720.773 244.545 li
723.594 258.166 li
726.414 260.302 li
729.238 233.455 li
732.059 226.049 li
734.879 251.103 li
737.703 261.814 li
740.523 255.865 li
743.344 234.58 li
746.164 227.99 li
748.988 250.486 li
751.809 264.806 li
754.629 265.607 li
757.449 241.287 li
760.273 227.47 li
763.094 244.967 li
765.914 259.189 li
768.734 257.885 li
771.559 236.615 li
774.379 227.002 li
777.199 237.857 li
780.02 243.463 li
782.844 237.666 li
785.664 236.271 li
788.484 245.427 li
791.309 243.724 li
794.129 238.885 li
796.949 240.451 li
799.77 240.791 li
802.594 242.256 li
805.414 244.205 li
808.234 243.318 li
811.055 241.568 li
813.879 242.369 li
816.699 242.189 li
819.52 241.642 li
822.34 241.978 li
825.164 241.756 li
827.984 241.689 li
830.805 241.744 li
833.625 242.013 li
836.449 234.814 li
@
836.449 234.814 mo
839.27 232.099 li
842.09 250.529 li
844.91 265.217 li
847.734 254.959 li
850.555 235.396 li
853.375 233.072 li
856.199 247.045 li
859.02 258.529 li
861.84 243.849 li
864.66 230.408 li
867.484 239.123 li
870.305 251.564 li
873.125 257.42 li
875.945 245.787 li
878.77 233.607 li
881.59 236.56 li
884.41 243.447 li
887.23 243.131 li
890.055 236.74 li
892.875 241.756 li
895.695 246.892 li
898.516 246.24 li
901.34 245.545 li
904.16 237.318 li
906.98 239.744 li
909.801 244.064 li
912.625 242.806 li
915.445 242.123 li
918.266 242.197 li
921.09 242.056 li
923.91 240.646 li
926.73 240.775 li
929.551 241.209 li
932.375 241.029 li
935.195 241.408 li
938.016 241.525 li
940.836 241.744 li
943.66 241.74 li
946.48 241.83 li
949.301 243.099 li
@
145.223 32.1972 mo
148.043 23.7172 li
150.863 44.1192 li
153.684 47.3732 li
156.508 63.6072 li
159.328 66.4552 li
162.148 53.4202 li
164.969 92.4082 li
167.793 112.427 li
170.613 101.564 li
173.434 118.978 li
176.258 144.599 li
179.078 161.326 li
181.898 182.713 li
184.719 201.9 li
187.543 217.795 li
190.363 230.295 li
193.184 239.295 li
196.004 240.217 li
198.828 241.197 li
201.648 241.627 li
204.469 240.201 li
207.289 238.326 li
210.113 237.728 li
212.934 236.392 li
215.754 235.927 li
218.574 234.705 li
221.398 234.549 li
224.219 237.677 li
227.039 232.568 li
229.863 214.4 li
232.684 187.861 li
235.504 161.045 li
238.324 136.51 li
241.148 119.26 li
243.969 110.095 li
246.789 98.6892 li
249.609 92.2602 li
252.434 88.6772 li
255.254 85.0212 li
258.074 93.0922 li
260.895 100.521 li
263.719 99.2912 li
266.539 100.353 li
269.359 102.138 li
272.18 102.467 li
275.004 103.595 li
277.824 100.443 li
280.645 92.0602 li
283.465 103.705 li
.0951247 .812772 1 .0193484 cmyk
@
283.465 103.705 mo
286.289 117.252 li
289.109 113.568 li
291.93 134.881 li
294.754 163.181 li
297.574 176.158 li
300.395 196.974 li
303.215 212.674 li
306.039 239.58 li
308.859 269.205 li
311.68 250.361 li
314.5 247.826 li
317.324 254.974 li
320.145 244.799 li
322.965 243.127 li
325.785 239.342 li
328.609 240.877 li
331.43 240.369 li
334.25 238.666 li
337.07 237.982 li
339.895 238.775 li
342.715 238.881 li
345.535 238.611 li
348.355 238.599 li
351.18 239.002 li
354 227.787 li
356.82 164.842 li
359.645 119.697 li
362.465 117.74 li
365.285 116.205 li
368.105 135.771 li
370.93 128.068 li
373.75 130.513 li
376.57 133.506 li
379.391 118.974 li
382.215 127.443 li
385.035 126.045 li
387.855 113.775 li
390.676 118.689 li
393.5 121.951 li
396.32 135.752 li
399.141 147.642 li
401.961 164.291 li
404.785 180.771 li
407.605 184.627 li
410.426 210.611 li
413.246 223.123 li
416.07 227.697 li
418.891 226.416 li
421.711 228.244 li
@
421.711 228.244 mo
424.535 242.713 li
427.355 243.463 li
430.176 238.396 li
432.996 241.584 li
435.82 242.564 li
438.641 241.967 li
441.461 241.611 li
444.281 242.205 li
447.105 242.146 li
449.926 241.72 li
452.746 241.51 li
455.566 242.24 li
458.391 242.775 li
461.211 224.15 li
464.031 172.427 li
466.852 129.994 li
469.676 135.049 li
472.496 139.927 li
475.316 134.752 li
478.137 141.291 li
480.961 135.447 li
483.781 135.771 li
486.602 141.642 li
489.426 144.017 li
492.246 149.045 li
495.066 139.654 li
497.887 140.748 li
500.711 143.076 li
503.531 145.431 li
506.352 143.736 li
509.172 143.185 li
511.996 156.197 li
514.816 149.814 li
517.637 151.174 li
520.457 150.822 li
523.281 159.385 li
526.102 181.123 li
528.922 192.006 li
531.742 208.732 li
534.566 227.9 li
537.387 232.135 li
540.207 229.771 li
543.031 234.4 li
545.852 239.232 li
548.672 245.467 li
551.492 246.615 li
554.316 242.959 li
557.137 241.912 li
559.957 241.627 li
@
559.957 241.627 mo
562.777 240.631 li
565.602 240.654 li
568.422 240.799 li
571.242 240.424 li
574.063 239.685 li
576.887 239.717 li
579.707 239.775 li
582.527 239.408 li
585.348 207.06 li
588.172 166.51 li
590.992 147.799 li
593.813 142.931 li
596.633 150.302 li
599.457 156.791 li
602.277 160.275 li
605.098 162.885 li
607.922 166.26 li
610.742 162.627 li
613.563 161.861 li
616.383 164.76 li
619.207 161.248 li
622.027 154.74 li
624.848 160.74 li
627.668 167.744 li
630.492 170.81 li
633.313 163.564 li
636.133 165.099 li
638.953 194.576 li
641.777 205.451 li
644.598 213.338 li
647.418 225.314 li
650.238 227.306 li
653.063 235.435 li
655.883 236.244 li
658.703 238.642 li
661.523 241.685 li
664.348 235.689 li
667.168 233.635 li
669.988 235.646 li
672.813 239.283 li
675.633 241.674 li
678.453 242.642 li
681.273 243.197 li
684.098 243.041 li
686.918 242.205 li
689.738 241.767 li
692.559 241.357 li
695.383 240.717 li
698.203 239.713 li
@
698.203 239.713 mo
701.023 234.576 li
703.844 225.142 li
706.668 213.138 li
709.488 200.955 li
712.309 193.158 li
715.129 188.201 li
717.953 184.658 li
720.773 174.888 li
723.594 167.443 li
726.414 162.295 li
729.238 162.935 li
732.059 169.545 li
734.879 168.857 li
737.703 168.685 li
740.523 169.654 li
743.344 171.47 li
746.164 169.869 li
748.988 168.47 li
751.809 167.459 li
754.629 177.08 li
757.449 179.916 li
760.273 172.607 li
763.094 178.365 li
765.914 181.588 li
768.734 176.474 li
771.559 177.642 li
774.379 187.592 li
777.199 200.736 li
780.02 202.256 li
782.844 205.427 li
785.664 220.213 li
788.484 229.869 li
791.309 237.334 li
794.129 240.31 li
796.949 239.037 li
799.77 239.728 li
802.594 241.752 li
805.414 241.517 li
808.234 242.439 li
811.055 242.51 li
813.879 241.646 li
816.699 241.885 li
819.52 242.271 li
822.34 242.302 li
825.164 242.267 li
827.984 242.084 li
830.805 242.228 li
833.625 242.345 li
836.449 217.826 li
@
836.449 217.826 mo
839.27 190.877 li
842.09 176.99 li
844.91 180.217 li
847.734 186.638 li
850.555 184.342 li
853.375 186.615 li
856.199 184.791 li
859.02 186.388 li
861.84 179.638 li
864.66 176.674 li
867.484 182.502 li
870.305 181.881 li
873.125 179.83 li
875.945 180.193 li
878.77 183.869 li
881.59 184.857 li
884.41 196.076 li
887.23 207.424 li
890.055 209.045 li
892.875 219.736 li
895.695 231.427 li
898.516 239.146 li
901.34 246.029 li
904.16 245.482 li
906.98 243.263 li
909.801 243.455 li
912.625 242.162 li
915.445 243.201 li
918.266 242.529 li
921.09 241.564 li
923.91 240.599 li
926.73 240.076 li
929.551 240.029 li
932.375 240.17 li
935.195 240.142 li
938.016 240.095 li
940.836 240.095 li
943.66 240.205 li
946.48 240.97 li
949.301 242.736 li
@
145.223 248.123 mo
148.043 251.877 li
150.863 276.217 li
153.684 279.635 li
156.508 284.521 li
159.328 304.502 li
162.148 315.97 li
164.969 337.896 li
167.793 364.97 li
170.613 374.056 li
173.434 373.959 li
176.258 388.607 li
179.078 400.267 li
181.898 414.521 li
184.719 432.322 li
187.543 440.994 li
190.363 444.775 li
193.184 441.24 li
196.004 435.361 li
198.828 430.662 li
201.648 425.857 li
204.469 421.67 li
207.289 420.763 li
210.113 420.791 li
212.934 420.65 li
215.754 419.943 li
218.574 422.802 li
221.398 434.994 li
224.219 442.654 li
227.039 435.342 li
229.863 416.826 li
232.684 391.97 li
235.504 365.029 li
238.324 343.377 li
241.148 318.908 li
243.969 298.205 li
246.789 286.154 li
249.609 275.299 li
252.434 273.888 li
255.254 270.416 li
258.074 263.857 li
260.895 253.607 li
263.719 260.767 li
266.539 276.787 li
269.359 279.232 li
272.18 267.162 li
275.004 249.853 li
277.824 256.834 li
280.645 260.603 li
283.465 253.06 li
.0729076 .314366 1 0 cmyk
@
283.465 253.06 mo
286.289 259.779 li
289.109 279.658 li
291.93 300.951 li
294.754 341.689 li
297.574 371.881 li
300.395 379.388 li
303.215 391.896 li
306.039 403.861 li
308.859 402.22 li
311.68 395.263 li
314.5 405.17 li
317.324 396.935 li
320.145 381.01 li
322.965 378.185 li
325.785 374.783 li
328.609 375.392 li
331.43 377.611 li
334.25 377.607 li
337.07 377.607 li
339.895 376.127 li
342.715 374.814 li
345.535 374.439 li
348.355 373.334 li
351.18 372.189 li
354 361.834 li
356.82 305.052 li
359.645 258.779 li
362.465 253.275 li
365.285 247.127 li
368.105 258.365 li
370.93 257.424 li
373.75 258.006 li
376.57 259.545 li
379.391 252.302 li
382.215 262.939 li
385.035 259.744 li
387.855 244.697 li
390.676 237.236 li
393.5 239.447 li
396.32 259.248 li
399.141 284.545 li
401.961 319.248 li
404.785 338.705 li
407.605 341.826 li
410.426 360.892 li
413.246 367.529 li
416.07 368.115 li
418.891 370.795 li
421.711 365.916 li
@
421.711 365.916 mo
424.535 366.533 li
427.355 362.873 li
430.176 354.74 li
432.996 353.498 li
435.82 354.146 li
438.641 355.142 li
441.461 354.412 li
444.281 353.052 li
447.105 352.881 li
449.926 352.76 li
452.746 351.783 li
455.566 351.439 li
458.391 351.291 li
461.211 333.603 li
464.031 278.275 li
466.852 237.174 li
469.676 252.381 li
472.496 264.552 li
475.316 253.388 li
478.137 247.388 li
480.961 245.26 li
483.781 252.498 li
486.602 254.592 li
489.426 244.709 li
492.246 243.369 li
495.066 243.271 li
497.887 255.572 li
500.711 259.517 li
503.531 254.709 li
506.352 249.252 li
509.172 245.779 li
511.996 258.568 li
514.816 253.15 li
517.637 241.103 li
520.457 244.357 li
523.281 262.779 li
526.102 298.025 li
528.922 329.49 li
531.742 340.373 li
534.566 348.244 li
537.387 347.224 li
540.207 350.08 li
543.031 350.752 li
545.852 342.888 li
548.672 346.025 li
551.492 341.119 li
554.316 335.373 li
557.137 335.427 li
559.957 335.927 li
@
559.957 335.927 mo
562.777 336.412 li
565.602 336.396 li
568.422 335.517 li
571.242 334.572 li
574.063 334.193 li
576.887 333.658 li
579.707 333.654 li
582.527 333.435 li
585.348 303.658 li
588.172 257.795 li
590.992 252.232 li
593.813 253.385 li
596.633 250.416 li
599.457 251.76 li
602.277 246.849 li
605.098 257.404 li
607.922 257.568 li
610.742 249.201 li
613.563 248.564 li
616.383 249.31 li
619.207 258.56 li
622.027 255.912 li
624.848 253.931 li
627.668 250.447 li
630.492 236.002 li
633.313 246.787 li
636.133 267.51 li
638.953 288.517 li
641.777 316.33 li
644.598 327.463 li
647.418 326.838 li
650.238 329.084 li
653.063 335.123 li
655.883 338.728 li
658.703 333.631 li
661.523 327.064 li
664.348 320.459 li
667.168 317.556 li
669.988 322.65 li
672.813 325.748 li
675.633 324.47 li
678.453 323.51 li
681.273 322.709 li
684.098 323.127 li
686.918 323.06 li
689.738 322.865 li
692.559 326.681 li
695.383 332.732 li
698.203 333.025 li
@
698.203 333.025 mo
701.023 327.111 li
703.844 319.396 li
706.668 307.162 li
709.488 295.701 li
712.309 289.916 li
715.129 288.345 li
717.953 284.674 li
720.773 265.529 li
723.594 251.631 li
726.414 246.248 li
729.238 246.291 li
732.059 248.447 li
734.879 246.185 li
737.703 249.728 li
740.523 255.271 li
743.344 255.412 li
746.164 250.17 li
748.988 248.189 li
751.809 250.158 li
754.629 258.849 li
757.449 257.154 li
760.273 250.576 li
763.094 250.455 li
765.914 246.756 li
768.734 247.209 li
771.559 252.064 li
774.379 265.482 li
777.199 279.724 li
780.02 293.521 li
782.844 309.287 li
785.664 314.912 li
788.484 319.818 li
791.309 322.646 li
794.129 319.201 li
796.949 314.97 li
799.77 314.599 li
802.594 315.435 li
805.414 313.627 li
808.234 312.236 li
811.055 311.76 li
813.879 312.849 li
816.699 313.283 li
819.52 312.455 li
822.34 311.658 li
825.164 311.408 li
827.984 311.338 li
830.805 310.935 li
833.625 310.783 li
836.449 289.088 li
@
836.449 289.088 mo
839.27 258.9 li
842.09 247.849 li
844.91 254.529 li
847.734 257.666 li
850.555 254.107 li
853.375 251.224 li
856.199 254.67 li
859.02 262.006 li
861.84 254.853 li
864.66 248.256 li
867.484 245.142 li
870.305 251.361 li
873.125 252.697 li
875.945 242.756 li
878.77 243.615 li
881.59 250.81 li
884.41 259.111 li
887.23 278.556 li
890.055 297.002 li
892.875 306.506 li
895.695 312.537 li
898.516 311.802 li
901.34 312.771 li
904.16 315.33 li
906.98 315.041 li
909.801 309.232 li
912.625 304.248 li
915.445 303.541 li
918.266 304.467 li
921.09 306.4 li
923.91 306.049 li
926.73 305.502 li
929.551 305.611 li
932.375 305.318 li
935.195 305.029 li
938.016 304.861 li
940.836 304.576 li
943.66 304.56 li
946.48 292.377 li
949.301 262.049 li
@
145.223 239.873 mo
148.043 240.177 li
150.863 239.064 li
153.684 236.967 li
156.508 236.986 li
159.328 230.381 li
162.148 226.142 li
164.969 226.279 li
167.793 225.701 li
170.613 230.115 li
173.434 226.318 li
176.258 222.127 li
179.078 221.549 li
181.898 218.814 li
184.719 220.541 li
187.543 225.322 li
190.363 230.279 li
193.184 235.888 li
196.004 239.908 li
198.828 242.177 li
201.648 243.381 li
204.469 243.47 li
207.289 242.943 li
210.113 242.865 li
212.934 243.302 li
215.754 243.529 li
218.574 242.931 li
221.398 239.408 li
224.219 243.537 li
227.039 260.459 li
229.863 273.115 li
232.684 275.877 li
235.504 274.896 li
238.324 271.826 li
241.148 267.861 li
243.969 257.049 li
246.789 240.603 li
249.609 236.228 li
252.434 239.006 li
255.254 238.756 li
258.074 239.271 li
260.895 240.334 li
263.719 241.47 li
266.539 241.314 li
269.359 241.4 li
272.18 240.674 li
275.004 239.056 li
277.824 240.263 li
280.645 238.599 li
283.465 238.431 li
.613703 .976837 .0447395 .00808728 cmyk
@
283.465 238.431 mo
286.289 234.822 li
289.109 223.978 li
291.93 220.525 li
294.754 213.049 li
297.574 209.31 li
300.395 219.92 li
303.215 224.724 li
306.039 231.474 li
308.859 235.58 li
311.68 234.58 li
314.5 239.138 li
317.324 239.787 li
320.145 239.021 li
322.965 240.205 li
325.785 241.818 li
328.609 243.189 li
331.43 243.521 li
334.25 243.47 li
337.07 243.459 li
339.895 243.318 li
342.715 243.396 li
345.535 243.42 li
348.355 243.369 li
351.18 243.474 li
354 243.424 li
356.82 242.052 li
359.645 239.67 li
362.465 240.806 li
365.285 242.717 li
368.105 242.318 li
370.93 241.396 li
373.75 239.685 li
376.57 241.084 li
379.391 242.549 li
382.215 242.107 li
385.035 241.424 li
387.855 240.279 li
390.676 236.377 li
393.5 231.435 li
396.32 229.924 li
399.141 227.049 li
401.961 226.982 li
404.785 225.427 li
407.605 225.299 li
410.426 229.463 li
413.246 229.802 li
416.07 234.517 li
418.891 235.482 li
421.711 236.646 li
@
421.711 236.646 mo
424.535 240.775 li
427.355 240.924 li
430.176 242.299 li
432.996 243.174 li
435.82 243.533 li
438.641 243.568 li
441.461 243.537 li
444.281 243.537 li
447.105 243.592 li
449.926 243.564 li
452.746 243.576 li
455.566 243.658 li
458.391 243.615 li
461.211 243.213 li
464.031 242.619 li
466.852 241.83 li
469.676 241.396 li
472.496 240.775 li
475.316 239.256 li
478.137 240.76 li
480.961 242.912 li
483.781 242.635 li
486.602 241.986 li
489.426 241.025 li
492.246 240.9 li
495.066 241.271 li
497.887 241.572 li
500.711 241.111 li
503.531 239.545 li
506.352 240.654 li
509.172 242.435 li
511.996 242.166 li
514.816 241.728 li
517.637 239.658 li
520.457 230.549 li
523.281 225.404 li
526.102 224.599 li
528.922 221.744 li
531.742 228.217 li
534.566 230.424 li
537.387 230.584 li
540.207 236.181 li
543.031 237.658 li
545.852 239.728 li
548.672 240.806 li
551.492 241.072 li
554.316 242.662 li
557.137 243.33 li
559.957 243.463 li
@
559.957 243.463 mo
562.777 243.482 li
565.602 243.67 li
568.422 243.713 li
571.242 243.631 li
574.063 243.67 li
576.887 243.748 li
579.707 243.76 li
582.527 243.775 li
585.348 242.326 li
588.172 241.213 li
590.992 241.927 li
593.813 242.201 li
596.633 242.267 li
599.457 241.752 li
602.277 241.9 li
605.098 242.943 li
607.922 242.549 li
610.742 241.603 li
613.563 241.107 li
616.383 241.506 li
619.207 242.017 li
622.027 241.556 li
624.848 240.357 li
627.668 240.302 li
630.492 239.232 li
633.313 232.392 li
636.133 227.463 li
638.953 227.525 li
641.777 227.412 li
644.598 230.092 li
647.418 233.283 li
650.238 231.818 li
653.063 235.67 li
655.883 239.736 li
658.703 238.72 li
661.523 240.322 li
664.348 241.556 li
667.168 242.279 li
669.988 242.607 li
672.813 242.97 li
675.633 243.525 li
678.453 243.67 li
681.273 243.744 li
684.098 243.705 li
686.918 243.681 li
689.738 243.752 li
692.559 243.201 li
695.383 240.799 li
698.203 244.482 li
@
698.203 244.482 mo
701.023 252.896 li
703.844 256.416 li
706.668 256.654 li
709.488 254.662 li
712.309 248.119 li
715.129 241.365 li
717.953 240.041 li
720.773 241.154 li
723.594 241.912 li
726.414 242.088 li
729.238 242.463 li
732.059 242.92 li
734.879 242.935 li
737.703 242.377 li
740.523 241.853 li
743.344 242.181 li
746.164 242.72 li
748.988 242.568 li
751.809 242.181 li
754.629 241.947 li
757.449 242.135 li
760.273 242.677 li
763.094 242.65 li
765.914 241.068 li
768.734 237.896 li
771.559 236.767 li
774.379 234.342 li
777.199 231.74 li
780.02 229.822 li
782.844 228.08 li
785.664 233.103 li
788.484 235.166 li
791.309 237.455 li
794.129 241.181 li
796.949 240.424 li
799.77 241.552 li
802.594 243.181 li
805.414 243.677 li
811.055 243.693 li
813.879 243.619 li
816.699 243.666 li
819.52 243.646 li
822.34 243.658 li
825.164 243.756 li
827.984 243.795 li
830.805 243.779 li
833.625 243.701 li
836.449 243.201 li
@
836.449 243.201 mo
839.27 242.869 li
842.09 242.713 li
844.91 242.08 li
847.734 241.826 li
850.555 242.455 li
853.375 242.904 li
856.199 242.717 li
859.02 242.404 li
861.84 241.342 li
864.66 241.705 li
867.484 242.885 li
870.305 242.931 li
873.125 242.123 li
875.945 241.802 li
878.77 239.15 li
881.59 235.791 li
884.41 235.068 li
887.23 230.166 li
890.055 227.709 li
892.875 232.478 li
895.695 235.377 li
898.516 238.084 li
901.34 239.197 li
904.16 239.97 li
906.98 241.787 li
909.801 241.623 li
912.625 242.478 li
915.445 243.318 li
918.266 243.377 li
921.09 243.279 li
923.91 243.646 li
926.73 243.756 li
929.551 243.701 li
932.375 243.693 li
935.195 243.717 li
938.016 243.674 li
940.836 243.674 li
943.66 243.705 li
946.48 243.724 li
949.301 243.826 li
@
145.223 234.842 mo
148.043 233.896 li
150.863 220.537 li
153.684 217.838 li
156.508 226.802 li
159.328 228.021 li
162.148 224.65 li
164.969 230.615 li
167.793 236.978 li
170.613 238.517 li
173.434 239.681 li
176.258 238.838 li
179.078 240.107 li
181.898 240.396 li
184.719 239.552 li
187.543 239.689 li
190.363 240.33 li
193.184 241.26 li
196.004 242.931 li
198.828 242.939 li
201.648 243.06 li
204.469 243.201 li
207.289 243.158 li
210.113 243.154 li
212.934 243.467 li
215.754 243.572 li
218.574 243.502 li
221.398 243.228 li
224.219 242.502 li
227.039 241.849 li
229.863 241.4 li
232.684 241.4 li
235.504 241.697 li
238.324 240.455 li
241.148 238.416 li
243.969 239.611 li
246.789 241.892 li
249.609 241.135 li
252.434 240.22 li
255.254 240.693 li
258.074 239.627 li
260.895 238.638 li
263.719 239.072 li
266.539 239.197 li
269.359 240.256 li
272.18 240.677 li
275.004 240.256 li
277.824 239.924 li
280.645 240.529 li
283.465 238.256 li
.598047 .119753 1 .00653086 cmyk
@
283.465 238.256 mo
286.289 235.951 li
289.109 233.377 li
291.93 226.552 li
294.754 233.724 li
297.574 250.33 li
300.395 248.099 li
303.215 235.115 li
306.039 229.205 li
308.859 233.787 li
311.68 237.279 li
314.5 238.506 li
317.324 241.967 li
320.145 242.638 li
322.965 243.041 li
325.785 242.904 li
328.609 243.392 li
331.43 243.302 li
334.25 243.349 li
337.07 243.658 li
339.895 243.724 li
342.715 243.724 li
345.535 243.662 li
348.355 243.701 li
351.18 243.615 li
354 243.525 li
356.82 242.318 li
359.645 239.881 li
362.465 239.244 li
365.285 240.849 li
368.105 241.623 li
370.93 241.318 li
373.75 239.931 li
376.57 239.615 li
379.391 241.299 li
382.215 241.65 li
385.035 241.385 li
387.855 240.385 li
390.676 239.435 li
393.5 238.052 li
396.32 235.748 li
399.141 239.752 li
401.961 242.533 li
404.785 235.588 li
407.605 228.193 li
410.426 231.689 li
413.246 235.943 li
416.07 237.435 li
418.891 239.912 li
421.711 238.463 li
@
421.711 238.463 mo
424.535 239.658 li
427.355 241.752 li
430.176 242.658 li
432.996 243.513 li
435.82 243.713 li
438.641 243.732 li
441.461 243.654 li
444.281 243.697 li
447.105 243.517 li
449.926 243.525 li
452.746 243.728 li
455.566 243.705 li
458.391 243.728 li
461.211 243.342 li
464.031 241.931 li
466.852 241.631 li
469.676 241.701 li
472.496 240.935 li
475.316 241.666 li
478.137 241.525 li
480.961 241.408 li
483.781 242.084 li
486.602 241.826 li
489.426 241.06 li
492.246 240.885 li
495.066 241.674 li
497.887 241.826 li
500.711 241.24 li
503.531 240.01 li
506.352 239.951 li
509.172 241.576 li
511.996 242.408 li
514.816 242.326 li
517.637 241.217 li
520.457 238.486 li
523.281 236.506 li
526.102 237.552 li
528.922 246.623 li
531.742 249.181 li
534.566 239.818 li
537.387 236.885 li
540.207 238.674 li
543.031 240.099 li
545.852 241.424 li
548.672 242.24 li
551.492 242.822 li
554.316 242.58 li
557.137 242.963 li
559.957 243.654 li
@
559.957 243.654 mo
562.777 243.627 li
565.602 243.646 li
568.422 243.748 li
571.242 243.799 li
574.063 243.709 li
576.887 243.666 li
579.707 243.611 li
582.527 243.525 li
585.348 243.427 li
588.172 242.584 li
590.992 241.885 li
593.813 241.459 li
596.633 241.334 li
599.457 242.283 li
602.277 242.885 li
605.098 243.193 li
607.922 243.158 li
610.742 241.97 li
613.563 241.525 li
616.383 242.029 li
619.207 241.674 li
622.027 241.244 li
624.848 240.443 li
627.668 240.045 li
630.492 241.338 li
633.313 240.76 li
636.133 240.541 li
638.953 243.412 li
641.777 241.908 li
644.598 234.799 li
647.418 236.443 li
650.238 242.779 li
653.063 242.392 li
655.883 240.959 li
658.703 241.424 li
661.523 242.584 li
664.348 242.447 li
667.168 242.592 li
669.988 243.224 li
672.813 243.318 li
675.633 243.56 li
678.453 243.658 li
681.273 243.588 li
684.098 243.474 li
686.918 243.427 li
689.738 243.537 li
692.559 243.595 li
695.383 243.599 li
698.203 243.494 li
@
698.203 243.494 mo
701.023 243.4 li
703.844 243.318 li
706.668 243.138 li
709.488 242.982 li
712.309 242.638 li
715.129 242.541 li
717.953 242.912 li
720.773 242.97 li
723.594 242.635 li
726.414 242.478 li
729.238 241.677 li
732.059 241.236 li
734.879 242.045 li
737.703 242.494 li
740.523 242.494 li
743.344 242.967 li
746.164 242.017 li
748.988 241.412 li
751.809 242.181 li
754.629 242.506 li
757.449 241.556 li
760.273 240.674 li
763.094 241.498 li
765.914 242.256 li
768.734 242.502 li
771.559 241.599 li
774.379 240.408 li
777.199 237.478 li
780.02 238.646 li
782.844 243.443 li
785.664 243.154 li
788.484 241.002 li
791.309 239.142 li
794.129 240.068 li
796.949 242.029 li
799.77 242.463 li
802.594 243.17 li
805.414 243.549 li
808.234 243.74 li
811.055 243.736 li
813.879 243.623 li
816.699 243.584 li
819.52 243.697 li
822.34 243.736 li
825.164 243.732 li
827.984 243.756 li
830.805 243.732 li
833.625 243.697 li
836.449 242.892 li
@
836.449 242.892 mo
839.27 242.076 li
842.09 242.353 li
844.91 242.76 li
847.734 242.228 li
850.555 241.802 li
853.375 241.927 li
856.199 241.947 li
859.02 241.572 li
861.84 240.994 li
864.66 241.763 li
867.484 242.474 li
870.305 242.201 li
873.125 242.342 li
875.945 242.306 li
878.77 241.709 li
884.41 240.842 li
887.23 242.209 li
890.055 246.131 li
892.875 244.697 li
895.695 239.107 li
898.516 237.377 li
901.34 239.302 li
904.16 241.185 li
906.98 241.931 li
909.801 242.916 li
912.625 243.506 li
915.445 243.623 li
918.266 243.638 li
921.09 243.576 li
923.91 243.498 li
926.73 243.611 li
929.551 243.67 li
932.375 243.713 li
935.195 243.767 li
938.016 243.787 li
940.836 243.795 li
943.66 243.779 li
946.48 243.763 li
949.301 243.834 li
@
145.223 241.525 mo
148.043 238.252 li
150.863 236.213 li
153.684 237.092 li
156.508 238.412 li
159.328 238.576 li
162.148 238.4 li
164.969 239.572 li
167.793 239.806 li
170.613 240.006 li
173.434 241.47 li
176.258 242.556 li
179.078 242.459 li
181.898 241.947 li
184.719 241.385 li
187.543 241.896 li
190.363 241.83 li
193.184 242.451 li
196.004 243.002 li
198.828 242.709 li
201.648 242.986 li
204.469 243.58 li
207.289 243.525 li
210.113 243.06 li
212.934 243.068 li
215.754 243.482 li
218.574 243.607 li
221.398 243.537 li
224.219 243.349 li
227.039 243.095 li
229.863 242.752 li
232.684 242.642 li
235.504 242.584 li
238.324 242.662 li
241.148 242.326 li
243.969 240.826 li
246.789 239.111 li
249.609 239.271 li
252.434 241.646 li
255.254 240.99 li
258.074 240.787 li
260.895 242.224 li
263.719 241.334 li
266.539 241.826 li
269.359 241.435 li
272.18 241.439 li
275.004 242.494 li
277.824 241.338 li
280.645 240.916 li
283.465 242.041 li
.600824 .0568551 3.0518e-5 0 cmyk
@
283.465 242.041 mo
286.289 242.607 li
289.109 242.353 li
291.93 242.377 li
294.754 242.404 li
297.574 240.845 li
300.395 241.138 li
303.215 240.681 li
306.039 240.103 li
308.859 242.119 li
311.68 242.529 li
314.5 241.705 li
317.324 241.228 li
320.145 241.107 li
322.965 241.76 li
325.785 242.814 li
328.609 243.103 li
331.43 243.424 li
334.25 243.533 li
337.07 243.74 li
339.895 243.783 li
342.715 243.775 li
345.535 243.76 li
348.355 243.767 li
351.18 243.709 li
354 243.635 li
356.82 242.58 li
359.645 241.498 li
362.465 241.998 li
365.285 241.9 li
368.105 241.693 li
370.93 241.775 li
373.75 241.213 li
376.57 241.545 li
379.391 241.744 li
382.215 241.881 li
385.035 242.084 li
387.855 241.467 li
390.676 241.826 li
393.5 242.15 li
396.32 241.877 li
399.141 241.724 li
401.961 240.326 li
404.785 240.486 li
407.605 241.959 li
410.426 241.849 li
413.246 241.83 li
416.07 241.802 li
418.891 241.869 li
421.711 241.744 li
@
421.711 241.748 mo
424.535 242.15 li
427.355 242.756 li
430.176 242.994 li
432.996 243.576 li
435.82 243.541 li
438.641 243.564 li
441.461 243.697 li
444.281 243.701 li
447.105 243.572 li
449.926 243.631 li
452.746 243.806 li
455.566 243.767 li
458.391 243.76 li
461.211 243.326 li
464.031 242.908 li
466.852 242.209 li
469.676 241.799 li
472.496 241.302 li
475.316 241.029 li
478.137 242.15 li
480.961 241.955 li
483.781 242.064 li
486.602 242.037 li
489.426 241.549 li
492.246 242.58 li
495.066 242.142 li
497.887 241.974 li
500.711 242.052 li
503.531 241.42 li
506.352 242.135 li
509.172 242.127 li
511.996 242.138 li
514.816 242.002 li
517.637 242.045 li
520.457 242.443 li
523.281 242.099 li
526.102 242.802 li
528.922 242.728 li
531.742 240.08 li
534.566 239.334 li
537.387 241.267 li
540.207 242.205 li
543.031 242.724 li
545.852 242.623 li
548.672 242.271 li
551.492 242.127 li
554.316 242.463 li
557.137 243.31 li
559.957 243.681 li
@
559.957 243.681 mo
562.777 243.763 li
565.602 243.756 li
568.422 243.744 li
574.063 243.752 li
576.887 243.72 li
579.707 243.74 li
582.527 243.674 li
585.348 242.885 li
588.172 241.982 li
590.992 241.74 li
593.813 241.963 li
596.633 241.799 li
599.457 241.666 li
602.277 242.013 li
605.098 242.392 li
607.922 242.478 li
610.742 242.033 li
613.563 242.388 li
616.383 242.463 li
619.207 242.424 li
622.027 242.295 li
624.848 242.181 li
627.668 242.623 li
630.492 242.713 li
633.313 242.42 li
636.133 242.385 li
638.953 242.162 li
641.777 241.439 li
644.598 242.15 li
647.418 242.732 li
650.238 242.845 li
653.063 242.564 li
655.883 242.256 li
658.703 241.49 li
661.523 241.47 li
664.348 242.353 li
667.168 242.56 li
669.988 243.302 li
672.813 243.431 li
675.633 243.424 li
678.453 243.685 li
681.273 243.705 li
684.098 243.685 li
686.918 243.666 li
689.738 243.67 li
692.559 243.654 li
695.383 243.627 li
698.203 243.275 li
@
698.203 243.275 mo
701.023 242.552 li
703.844 242.095 li
706.668 241.943 li
709.488 241.97 li
712.309 242.373 li
715.129 243.084 li
717.953 243.373 li
720.773 242.631 li
723.594 242.717 li
726.414 242.478 li
729.238 242.322 li
732.059 243.064 li
734.879 242.326 li
737.703 242.521 li
740.523 242.388 li
743.344 242.33 li
746.164 243.06 li
748.988 242.244 li
751.809 242.56 li
754.629 242.416 li
757.449 242.349 li
760.273 243.197 li
763.094 242.353 li
765.914 242.623 li
768.734 242.826 li
771.559 242.56 li
774.379 243.248 li
777.199 243.217 li
780.02 242.877 li
782.844 241.584 li
785.664 239.767 li
788.484 240.31 li
791.309 242.283 li
794.129 243.232 li
796.949 243.146 li
799.77 242.982 li
802.594 243.287 li
805.414 243.521 li
808.234 243.635 li
811.055 243.76 li
813.879 243.635 li
816.699 243.623 li
819.52 243.752 li
822.34 243.767 li
825.164 243.795 li
827.984 243.818 li
833.625 243.787 li
836.449 243.416 li
@
836.449 243.416 mo
839.27 243.068 li
842.09 242.834 li
844.91 242.892 li
847.734 242.642 li
850.555 242.607 li
853.375 243.029 li
856.199 242.822 li
859.02 242.892 li
861.84 242.513 li
864.66 242.412 li
867.484 242.646 li
870.305 242.595 li
873.125 243.029 li
875.945 242.81 li
878.77 242.42 li
884.41 243.06 li
887.23 243.115 li
890.055 241.795 li
892.875 240.342 li
895.695 241.267 li
898.516 242.681 li
901.34 242.83 li
904.16 242.783 li
906.98 242.791 li
909.801 242.377 li
912.625 242.748 li
915.445 243.572 li
918.266 243.705 li
921.09 243.65 li
923.91 243.627 li
926.73 243.713 li
929.551 243.74 li
932.375 243.744 li
935.195 243.802 li
938.016 243.81 li
940.836 243.822 li
943.66 243.795 li
946.48 243.795 li
949.301 243.853 li
@
172.801 183.424 mo
180 183.424 li
.627314 0 1 0 cmyk
@
176.398 187.021 mo
176.398 179.822 li
@
175.199 183.424 mo
182.398 183.424 li
@
178.801 187.021 mo
178.801 179.822 li
@
178.398 183.424 mo
185.602 183.424 li
@
182 187.021 mo
182 179.822 li
@
180.801 183.424 mo
188 183.424 li
@
184.398 187.021 mo
184.398 179.822 li
@
184 183.424 mo
191.199 183.424 li
@
187.602 187.021 mo
187.602 179.822 li
@
186.398 183.424 mo
193.602 183.424 li
@
190 187.021 mo
190 179.822 li
@
189.602 183.424 mo
196.801 183.424 li
@
193.199 187.021 mo
193.199 179.822 li
@
192.801 183.424 mo
200 183.424 li
@
196.398 187.021 mo
196.398 179.822 li
@
195.199 183.424 mo
202.398 183.424 li
@
198.801 187.021 mo
198.801 179.822 li
@
198.398 183.424 mo
205.602 183.424 li
@
202 187.021 mo
202 179.822 li
@
200.801 183.424 mo
208 183.424 li
@
204.398 187.021 mo
204.398 179.822 li
@
204 183.424 mo
211.199 183.424 li
@
207.602 187.021 mo
207.602 179.822 li
@
206.398 183.424 mo
213.602 183.424 li
@
210 187.021 mo
210 179.822 li
@
209.602 183.424 mo
216.801 183.424 li
@
213.199 187.021 mo
213.199 179.822 li
@
212 183.424 mo
219.199 183.424 li
@
215.602 187.021 mo
215.602 179.822 li
@
215.199 183.424 mo
222.398 183.424 li
@
218.801 187.021 mo
218.801 179.822 li
@
217.602 183.424 mo
224.801 183.424 li
@
221.199 187.021 mo
221.199 179.822 li
@
220.801 183.424 mo
228 183.424 li
@
224.398 187.021 mo
224.398 179.822 li
@
223.199 183.424 mo
230.398 183.424 li
@
226.801 187.021 mo
226.801 179.822 li
@
226.398 183.424 mo
233.602 183.424 li
@
230 187.021 mo
230 179.822 li
@
228.801 183.424 mo
236 183.424 li
@
232.398 187.021 mo
232.398 179.822 li
@
232 183.424 mo
239.199 183.424 li
@
235.602 187.021 mo
235.602 179.822 li
@
291.199 183.424 mo
298.398 183.424 li
@
294.801 187.021 mo
294.801 179.822 li
@
293.602 183.424 mo
300.801 183.424 li
@
297.199 187.021 mo
297.199 179.822 li
@
296.801 183.424 mo
304 183.424 li
@
300.398 187.021 mo
300.398 179.822 li
@
300 183.424 mo
307.199 183.424 li
@
303.602 187.021 mo
303.602 179.822 li
@
302.398 183.424 mo
309.602 183.424 li
@
306 187.021 mo
306 179.822 li
@
305.602 183.424 mo
312.801 183.424 li
@
309.199 187.021 mo
309.199 179.822 li
@
308 183.424 mo
315.199 183.424 li
@
311.602 187.021 mo
311.602 179.822 li
@
311.199 183.424 mo
318.398 183.424 li
@
314.801 187.021 mo
314.801 179.822 li
@
313.602 183.424 mo
320.801 183.424 li
@
317.199 187.021 mo
317.199 179.822 li
@
316.801 183.424 mo
324 183.424 li
@
320.398 187.021 mo
320.398 179.822 li
@
319.199 183.424 mo
326.398 183.424 li
@
322.801 187.021 mo
322.801 179.822 li
@
322.398 183.424 mo
329.602 183.424 li
@
326 187.021 mo
326 179.822 li
@
324.801 183.424 mo
332 183.424 li
@
328.398 187.021 mo
328.398 179.822 li
@
328 183.424 mo
335.199 183.424 li
@
331.602 187.021 mo
331.602 179.822 li
@
330.398 183.424 mo
337.602 183.424 li
@
334 187.021 mo
334 179.822 li
@
333.602 183.424 mo
340.801 183.424 li
@
337.199 187.021 mo
337.199 179.822 li
@
336 183.424 mo
343.199 183.424 li
@
339.602 187.021 mo
339.602 179.822 li
@
339.199 183.424 mo
346.398 183.424 li
@
342.801 187.021 mo
342.801 179.822 li
@
341.602 183.424 mo
348.801 183.424 li
@
345.199 187.021 mo
345.199 179.822 li
@
344.801 183.424 mo
352 183.424 li
@
348.398 187.021 mo
348.398 179.822 li
@
347.199 183.424 mo
354.398 183.424 li
@
350.801 187.021 mo
350.801 179.822 li
@
350.398 183.424 mo
357.602 183.424 li
@
354 187.021 mo
354 179.822 li
@
400.801 183.424 mo
408 183.424 li
@
404.398 187.021 mo
404.398 179.822 li
@
404 183.424 mo
411.199 183.424 li
@
407.602 187.021 mo
407.602 179.822 li
@
407.199 183.424 mo
414.398 183.424 li
@
410.801 187.021 mo
410.801 179.822 li
@
409.602 183.424 mo
416.801 183.424 li
@
413.199 187.021 mo
413.199 179.822 li
@
412.801 183.424 mo
420 183.424 li
@
416.398 187.021 mo
416.398 179.822 li
@
415.199 183.424 mo
422.398 183.424 li
@
418.801 187.021 mo
418.801 179.822 li
@
418.398 183.424 mo
425.602 183.424 li
@
422 187.021 mo
422 179.822 li
@
420.801 183.424 mo
428 183.424 li
@
424.398 187.021 mo
424.398 179.822 li
@
424 183.424 mo
431.199 183.424 li
@
427.602 187.021 mo
427.602 179.822 li
@
426.398 183.424 mo
433.602 183.424 li
@
430 187.021 mo
430 179.822 li
@
429.602 183.424 mo
436.801 183.424 li
@
433.199 187.021 mo
433.199 179.822 li
@
432 183.424 mo
439.199 183.424 li
@
435.602 187.021 mo
435.602 179.822 li
@
435.199 183.424 mo
442.398 183.424 li
@
438.801 187.021 mo
438.801 179.822 li
@
437.602 183.424 mo
444.801 183.424 li
@
441.199 187.021 mo
441.199 179.822 li
@
440.801 183.424 mo
448 183.424 li
@
444.398 187.021 mo
444.398 179.822 li
@
443.199 183.424 mo
450.398 183.424 li
@
446.801 187.021 mo
446.801 179.822 li
@
446.398 183.424 mo
453.602 183.424 li
@
450 187.021 mo
450 179.822 li
@
448.801 183.424 mo
456 183.424 li
@
452.398 187.021 mo
452.398 179.822 li
@
452 183.424 mo
459.199 183.424 li
@
455.602 187.021 mo
455.602 179.822 li
@
454.398 183.424 mo
461.602 183.424 li
@
458 187.021 mo
458 179.822 li
@
457.602 183.424 mo
464.801 183.424 li
@
461.199 187.021 mo
461.199 179.822 li
@
525.602 183.424 mo
532.801 183.424 li
@
529.199 187.021 mo
529.199 179.822 li
@
528 183.424 mo
535.199 183.424 li
@
531.602 187.021 mo
531.602 179.822 li
@
531.199 183.424 mo
538.398 183.424 li
@
534.801 187.021 mo
534.801 179.822 li
@
533.602 183.424 mo
540.801 183.424 li
@
537.199 187.021 mo
537.199 179.822 li
@
536.801 183.424 mo
544 183.424 li
@
540.398 187.021 mo
540.398 179.822 li
@
539.199 183.424 mo
546.398 183.424 li
@
542.801 187.021 mo
542.801 179.822 li
@
542.398 183.424 mo
549.602 183.424 li
@
546 187.021 mo
546 179.822 li
@
544.801 183.424 mo
552 183.424 li
@
548.398 187.021 mo
548.398 179.822 li
@
548 183.424 mo
555.199 183.424 li
@
551.602 187.021 mo
551.602 179.822 li
@
550.398 183.424 mo
557.602 183.424 li
@
554 187.021 mo
554 179.822 li
@
553.602 183.424 mo
560.801 183.424 li
@
557.199 187.021 mo
557.199 179.822 li
@
556 183.424 mo
563.199 183.424 li
@
559.602 187.021 mo
559.602 179.822 li
@
559.199 183.424 mo
566.398 183.424 li
@
562.801 187.021 mo
562.801 179.822 li
@
562.398 183.424 mo
569.602 183.424 li
@
566 187.021 mo
566 179.822 li
@
564.801 183.424 mo
572 183.424 li
@
568.398 187.021 mo
568.398 179.822 li
@
568 183.424 mo
575.199 183.424 li
@
571.602 187.021 mo
571.602 179.822 li
@
570.398 183.424 mo
577.602 183.424 li
@
574 187.021 mo
574 179.822 li
@
573.602 183.424 mo
580.801 183.424 li
@
577.199 187.021 mo
577.199 179.822 li
@
576 183.424 mo
583.199 183.424 li
@
579.602 187.021 mo
579.602 179.822 li
@
579.199 183.424 mo
586.398 183.424 li
@
582.801 187.021 mo
582.801 179.822 li
@
581.602 183.424 mo
588.801 183.424 li
@
585.199 187.021 mo
585.199 179.822 li
@
638.398 183.424 mo
645.602 183.424 li
@
642 187.021 mo
642 179.822 li
@
640.801 183.424 mo
648 183.424 li
@
644.398 187.021 mo
644.398 179.822 li
@
644 183.424 mo
651.199 183.424 li
@
647.602 187.021 mo
647.602 179.822 li
@
646.398 183.424 mo
653.602 183.424 li
@
650 187.021 mo
650 179.822 li
@
649.602 183.424 mo
656.801 183.424 li
@
653.199 187.021 mo
653.199 179.822 li
@
652 183.424 mo
659.199 183.424 li
@
655.602 187.021 mo
655.602 179.822 li
@
655.199 183.424 mo
662.398 183.424 li
@
658.801 187.021 mo
658.801 179.822 li
@
657.602 183.424 mo
664.801 183.424 li
@
661.199 187.021 mo
661.199 179.822 li
@
660.801 183.424 mo
668 183.424 li
@
664.398 187.021 mo
664.398 179.822 li
@
663.199 183.424 mo
670.398 183.424 li
@
666.801 187.021 mo
666.801 179.822 li
@
666.398 183.424 mo
673.602 183.424 li
@
670 187.021 mo
670 179.822 li
@
669.602 183.424 mo
676.801 183.424 li
@
673.199 187.021 mo
673.199 179.822 li
@
672 183.424 mo
679.199 183.424 li
@
675.602 187.021 mo
675.602 179.822 li
@
675.199 183.424 mo
682.398 183.424 li
@
678.801 187.021 mo
678.801 179.822 li
@
677.602 183.424 mo
684.801 183.424 li
@
681.199 187.021 mo
681.199 179.822 li
@
680.801 183.424 mo
688 183.424 li
@
684.398 187.021 mo
684.398 179.822 li
@
683.199 183.424 mo
690.398 183.424 li
@
686.801 187.021 mo
686.801 179.822 li
@
686.398 183.424 mo
693.602 183.424 li
@
690 187.021 mo
690 179.822 li
@
688.801 183.424 mo
696 183.424 li
@
692.398 187.021 mo
692.398 179.822 li
@
692 183.424 mo
699.199 183.424 li
@
695.602 187.021 mo
695.602 179.822 li
@
694.398 183.424 mo
701.602 183.424 li
@
698 187.021 mo
698 179.822 li
@
697.602 183.424 mo
704.801 183.424 li
@
701.199 187.021 mo
701.199 179.822 li
@
700 183.424 mo
707.199 183.424 li
@
703.602 187.021 mo
703.602 179.822 li
@
703.199 183.424 mo
710.398 183.424 li
@
706.801 187.021 mo
706.801 179.822 li
@
705.602 183.424 mo
712.801 183.424 li
@
709.199 187.021 mo
709.199 179.822 li
@
776.801 183.424 mo
784 183.424 li
@
780.398 187.021 mo
780.398 179.822 li
@
779.199 183.424 mo
786.398 183.424 li
@
782.801 187.021 mo
782.801 179.822 li
@
782.398 183.424 mo
789.602 183.424 li
@
786 187.021 mo
786 179.822 li
@
784.801 183.424 mo
792 183.424 li
@
788.398 187.021 mo
788.398 179.822 li
@
788 183.424 mo
795.199 183.424 li
@
791.602 187.021 mo
791.602 179.822 li
@
790.398 183.424 mo
797.602 183.424 li
@
794 187.021 mo
794 179.822 li
@
793.602 183.424 mo
800.801 183.424 li
@
797.199 187.021 mo
797.199 179.822 li
@
796 183.424 mo
803.199 183.424 li
@
799.602 187.021 mo
799.602 179.822 li
@
799.199 183.424 mo
806.398 183.424 li
@
802.801 187.021 mo
802.801 179.822 li
@
801.602 183.424 mo
808.801 183.424 li
@
805.199 187.021 mo
805.199 179.822 li
@
804.801 183.424 mo
812 183.424 li
@
808.398 187.021 mo
808.398 179.822 li
@
807.199 183.424 mo
814.398 183.424 li
@
810.801 187.021 mo
810.801 179.822 li
@
810.398 183.424 mo
817.602 183.424 li
@
814 187.021 mo
814 179.822 li
@
812.801 183.424 mo
820 183.424 li
@
816.398 187.021 mo
816.398 179.822 li
@
816 183.424 mo
823.199 183.424 li
@
819.602 187.021 mo
819.602 179.822 li
@
818.398 183.424 mo
825.602 183.424 li
@
822 187.021 mo
822 179.822 li
@
821.602 183.424 mo
828.801 183.424 li
@
825.199 187.021 mo
825.199 179.822 li
@
824 183.424 mo
831.199 183.424 li
@
827.602 187.021 mo
827.602 179.822 li
@
827.199 183.424 mo
834.398 183.424 li
@
830.801 187.021 mo
830.801 179.822 li
@
830.398 183.424 mo
837.602 183.424 li
@
834 187.021 mo
834 179.822 li
@
832.801 183.424 mo
840 183.424 li
@
836.398 187.021 mo
836.398 179.822 li
@
886.398 183.424 mo
893.602 183.424 li
@
890 187.021 mo
890 179.822 li
@
889.602 183.424 mo
896.801 183.424 li
@
893.199 187.021 mo
893.199 179.822 li
@
892 183.424 mo
899.199 183.424 li
@
895.602 187.021 mo
895.602 179.822 li
@
895.199 183.424 mo
902.398 183.424 li
@
898.801 187.021 mo
898.801 179.822 li
@
897.602 183.424 mo
904.801 183.424 li
@
901.199 187.021 mo
901.199 179.822 li
@
900.801 183.424 mo
908 183.424 li
@
904.398 187.021 mo
904.398 179.822 li
@
903.199 183.424 mo
910.398 183.424 li
@
906.801 187.021 mo
906.801 179.822 li
@
906.398 183.424 mo
913.602 183.424 li
@
910 187.021 mo
910 179.822 li
@
908.801 183.424 mo
916 183.424 li
@
912.398 187.021 mo
912.398 179.822 li
@
912 183.424 mo
919.199 183.424 li
@
915.602 187.021 mo
915.602 179.822 li
@
914.398 183.424 mo
921.602 183.424 li
@
918 187.021 mo
918 179.822 li
@
917.602 183.424 mo
924.801 183.424 li
@
921.199 187.021 mo
921.199 179.822 li
@
920 183.424 mo
927.199 183.424 li
@
923.602 187.021 mo
923.602 179.822 li
@
923.199 183.424 mo
930.398 183.424 li
@
926.801 187.021 mo
926.801 179.822 li
@
925.602 183.424 mo
932.801 183.424 li
@
929.199 187.021 mo
929.199 179.822 li
@
928.801 183.424 mo
936 183.424 li
@
932.398 187.021 mo
932.398 179.822 li
@
931.199 183.424 mo
938.398 183.424 li
@
934.801 187.021 mo
934.801 179.822 li
@
934.398 183.424 mo
941.602 183.424 li
@
938 187.021 mo
938 179.822 li
@
937.602 183.424 mo
944.801 183.424 li
@
941.199 187.021 mo
941.199 179.822 li
@
940 183.424 mo
947.199 183.424 li
@
943.602 187.021 mo
943.602 179.822 li
@
943.199 183.424 mo
950.398 183.424 li
@
946.801 187.021 mo
946.801 179.822 li
@
945.602 183.424 mo
952.801 183.424 li
@
949.199 187.021 mo
949.199 179.822 li
@
142.398 125.424 mo
148 119.822 li
.750179 .679652 .670191 .901488 cmyk
@
142.398 119.822 mo
148 125.424 li
@
145.602 125.424 mo
151.199 119.822 li
@
145.602 119.822 mo
151.199 125.424 li
@
148 125.424 mo
153.602 119.822 li
@
148 119.822 mo
153.602 125.424 li
@
151.199 125.424 mo
156.801 119.822 li
@
151.199 119.822 mo
156.801 125.424 li
@
153.602 125.424 mo
159.199 119.822 li
@
153.602 119.822 mo
159.199 125.424 li
@
156.801 125.424 mo
162.398 119.822 li
@
156.801 119.822 mo
162.398 125.424 li
@
159.199 125.424 mo
164.801 119.822 li
@
159.199 119.822 mo
164.801 125.424 li
@
162.398 125.424 mo
168 119.822 li
@
162.398 119.822 mo
168 125.424 li
@
164.801 125.424 mo
170.398 119.822 li
@
164.801 119.822 mo
170.398 125.424 li
@
168 125.424 mo
173.602 119.822 li
@
168 119.822 mo
173.602 125.424 li
@
170.398 125.424 mo
176 119.822 li
@
170.398 119.822 mo
176 125.424 li
@
235.199 125.424 mo
240.801 119.822 li
@
235.199 119.822 mo
240.801 125.424 li
@
238.398 125.424 mo
244 119.822 li
@
238.398 119.822 mo
244 125.424 li
@
240.801 125.424 mo
246.398 119.822 li
@
240.801 119.822 mo
246.398 125.424 li
@
244 125.424 mo
249.602 119.822 li
@
244 119.822 mo
249.602 125.424 li
@
247.199 125.424 mo
252.801 119.822 li
@
247.199 119.822 mo
252.801 125.424 li
@
249.602 125.424 mo
255.199 119.822 li
@
249.602 119.822 mo
255.199 125.424 li
@
252.801 125.424 mo
258.398 119.822 li
@
252.801 119.822 mo
258.398 125.424 li
@
255.199 125.424 mo
260.801 119.822 li
@
255.199 119.822 mo
260.801 125.424 li
@
258.398 125.424 mo
264 119.822 li
@
258.398 119.822 mo
264 125.424 li
@
260.801 125.424 mo
266.398 119.822 li
@
260.801 119.822 mo
266.398 125.424 li
@
264 125.424 mo
269.602 119.822 li
@
264 119.822 mo
269.602 125.424 li
@
266.398 125.424 mo
272 119.822 li
@
266.398 119.822 mo
272 125.424 li
@
269.602 125.424 mo
275.199 119.822 li
@
269.602 119.822 mo
275.199 125.424 li
@
272 125.424 mo
277.602 119.822 li
@
272 119.822 mo
277.602 125.424 li
@
275.199 125.424 mo
280.801 119.822 li
@
275.199 119.822 mo
280.801 125.424 li
@
277.602 125.424 mo
283.199 119.822 li
@
277.602 119.822 mo
283.199 125.424 li
@
280.801 125.424 mo
286.398 119.822 li
@
280.801 119.822 mo
286.398 125.424 li
@
283.199 125.424 mo
288.801 119.822 li
@
283.199 119.822 mo
288.801 125.424 li
@
286.398 125.424 mo
292 119.822 li
@
286.398 119.822 mo
292 125.424 li
@
288.801 125.424 mo
294.398 119.822 li
@
288.801 119.822 mo
294.398 125.424 li
@
354.398 125.424 mo
360 119.822 li
@
354.398 119.822 mo
360 125.424 li
@
356.801 125.424 mo
362.398 119.822 li
@
356.801 119.822 mo
362.398 125.424 li
@
360 125.424 mo
365.602 119.822 li
@
360 119.822 mo
365.602 125.424 li
@
362.398 125.424 mo
368 119.822 li
@
362.398 119.822 mo
368 125.424 li
@
365.602 125.424 mo
371.199 119.822 li
@
365.602 119.822 mo
371.199 125.424 li
@
368 125.424 mo
373.602 119.822 li
@
368 119.822 mo
373.602 125.424 li
@
371.199 125.424 mo
376.801 119.822 li
@
371.199 119.822 mo
376.801 125.424 li
@
373.602 125.424 mo
379.199 119.822 li
@
373.602 119.822 mo
379.199 125.424 li
@
376.801 125.424 mo
382.398 119.822 li
@
376.801 119.822 mo
382.398 125.424 li
@
379.199 125.424 mo
384.801 119.822 li
@
379.199 119.822 mo
384.801 125.424 li
@
382.398 125.424 mo
388 119.822 li
@
382.398 119.822 mo
388 125.424 li
@
384.801 125.424 mo
390.398 119.822 li
@
384.801 119.822 mo
390.398 125.424 li
@
388 125.424 mo
393.602 119.822 li
@
388 119.822 mo
393.602 125.424 li
@
390.398 125.424 mo
396 119.822 li
@
390.398 119.822 mo
396 125.424 li
@
393.602 125.424 mo
399.199 119.822 li
@
393.602 119.822 mo
399.199 125.424 li
@
396 125.424 mo
401.602 119.822 li
@
396 119.822 mo
401.602 125.424 li
@
399.199 125.424 mo
404.801 119.822 li
@
399.199 119.822 mo
404.801 125.424 li
@
461.602 125.424 mo
467.199 119.822 li
@
461.602 119.822 mo
467.199 125.424 li
@
464 125.424 mo
469.602 119.822 li
@
464 119.822 mo
469.602 125.424 li
@
467.199 125.424 mo
472.801 119.822 li
@
467.199 119.822 mo
472.801 125.424 li
@
469.602 125.424 mo
475.199 119.822 li
@
469.602 119.822 mo
475.199 125.424 li
@
472.801 125.424 mo
478.398 119.822 li
@
472.801 119.822 mo
478.398 125.424 li
@
475.199 125.424 mo
480.801 119.822 li
@
475.199 119.822 mo
480.801 125.424 li
@
478.398 125.424 mo
484 119.822 li
@
478.398 119.822 mo
484 125.424 li
@
480.801 125.424 mo
486.398 119.822 li
@
480.801 119.822 mo
486.398 125.424 li
@
484 125.424 mo
489.602 119.822 li
@
484 119.822 mo
489.602 125.424 li
@
486.398 125.424 mo
492 119.822 li
@
486.398 119.822 mo
492 125.424 li
@
489.602 125.424 mo
495.199 119.822 li
@
489.602 119.822 mo
495.199 125.424 li
@
492 125.424 mo
497.602 119.822 li
@
492 119.822 mo
497.602 125.424 li
@
495.199 125.424 mo
500.801 119.822 li
@
495.199 119.822 mo
500.801 125.424 li
@
497.602 125.424 mo
503.199 119.822 li
@
497.602 119.822 mo
503.199 125.424 li
@
500.801 125.424 mo
506.398 119.822 li
@
500.801 119.822 mo
506.398 125.424 li
@
503.199 125.424 mo
508.801 119.822 li
@
503.199 119.822 mo
508.801 125.424 li
@
506.398 125.424 mo
512 119.822 li
@
506.398 119.822 mo
512 125.424 li
@
508.801 125.424 mo
514.398 119.822 li
@
508.801 119.822 mo
514.398 125.424 li
@
512 125.424 mo
517.602 119.822 li
@
512 119.822 mo
517.602 125.424 li
@
515.199 125.424 mo
520.801 119.822 li
@
515.199 119.822 mo
520.801 125.424 li
@
517.602 125.424 mo
523.199 119.822 li
@
517.602 119.822 mo
523.199 125.424 li
@
520.801 125.424 mo
526.398 119.822 li
@
520.801 119.822 mo
526.398 125.424 li
@
523.199 125.424 mo
528.801 119.822 li
@
523.199 119.822 mo
528.801 125.424 li
@
585.602 125.424 mo
591.199 119.822 li
@
585.602 119.822 mo
591.199 125.424 li
@
588 125.424 mo
593.602 119.822 li
@
588 119.822 mo
593.602 125.424 li
@
591.199 125.424 mo
596.801 119.822 li
@
591.199 119.822 mo
596.801 125.424 li
@
593.602 125.424 mo
599.199 119.822 li
@
593.602 119.822 mo
599.199 125.424 li
@
596.801 125.424 mo
602.398 119.822 li
@
596.801 119.822 mo
602.398 125.424 li
@
599.199 125.424 mo
604.801 119.822 li
@
599.199 119.822 mo
604.801 125.424 li
@
602.398 125.424 mo
608 119.822 li
@
602.398 119.822 mo
608 125.424 li
@
604.801 125.424 mo
610.398 119.822 li
@
604.801 119.822 mo
610.398 125.424 li
@
608 125.424 mo
613.602 119.822 li
@
608 119.822 mo
613.602 125.424 li
@
610.398 125.424 mo
616 119.822 li
@
610.398 119.822 mo
616 125.424 li
@
613.602 125.424 mo
619.199 119.822 li
@
613.602 119.822 mo
619.199 125.424 li
@
616.801 125.424 mo
622.398 119.822 li
@
616.801 119.822 mo
622.398 125.424 li
@
619.199 125.424 mo
624.801 119.822 li
@
619.199 119.822 mo
624.801 125.424 li
@
622.398 125.424 mo
628 119.822 li
@
622.398 119.822 mo
628 125.424 li
@
624.801 125.424 mo
630.398 119.822 li
@
624.801 119.822 mo
630.398 125.424 li
@
628 125.424 mo
633.602 119.822 li
@
628 119.822 mo
633.602 125.424 li
@
630.398 125.424 mo
636 119.822 li
@
630.398 119.822 mo
636 125.424 li
@
633.602 125.424 mo
639.199 119.822 li
@
633.602 119.822 mo
639.199 125.424 li
@
636 125.424 mo
641.602 119.822 li
@
636 119.822 mo
641.602 125.424 li
@
709.602 125.424 mo
715.199 119.822 li
@
709.602 119.822 mo
715.199 125.424 li
@
712 125.424 mo
717.602 119.822 li
@
712 119.822 mo
717.602 125.424 li
@
715.199 125.424 mo
720.801 119.822 li
@
715.199 119.822 mo
720.801 125.424 li
@
717.602 125.424 mo
723.199 119.822 li
@
717.602 119.822 mo
723.199 125.424 li
@
720.801 125.424 mo
726.398 119.822 li
@
720.801 119.822 mo
726.398 125.424 li
@
724 125.424 mo
729.602 119.822 li
@
724 119.822 mo
729.602 125.424 li
@
726.398 125.424 mo
732 119.822 li
@
726.398 119.822 mo
732 125.424 li
@
729.602 125.424 mo
735.199 119.822 li
@
729.602 119.822 mo
735.199 125.424 li
@
732 125.424 mo
737.602 119.822 li
@
732 119.822 mo
737.602 125.424 li
@
735.199 125.424 mo
740.801 119.822 li
@
735.199 119.822 mo
740.801 125.424 li
@
737.602 125.424 mo
743.199 119.822 li
@
737.602 119.822 mo
743.199 125.424 li
@
740.801 125.424 mo
746.398 119.822 li
@
740.801 119.822 mo
746.398 125.424 li
@
743.199 125.424 mo
748.801 119.822 li
@
743.199 119.822 mo
748.801 125.424 li
@
746.398 125.424 mo
752 119.822 li
@
746.398 119.822 mo
752 125.424 li
@
748.801 125.424 mo
754.398 119.822 li
@
748.801 119.822 mo
754.398 125.424 li
@
752 125.424 mo
757.602 119.822 li
@
752 119.822 mo
757.602 125.424 li
@
754.398 125.424 mo
760 119.822 li
@
754.398 119.822 mo
760 125.424 li
@
757.602 125.424 mo
763.199 119.822 li
@
757.602 119.822 mo
763.199 125.424 li
@
760 125.424 mo
765.602 119.822 li
@
760 119.822 mo
765.602 125.424 li
@
763.199 125.424 mo
768.801 119.822 li
@
763.199 119.822 mo
768.801 125.424 li
@
765.602 125.424 mo
771.199 119.822 li
@
765.602 119.822 mo
771.199 125.424 li
@
768.801 125.424 mo
774.398 119.822 li
@
768.801 119.822 mo
774.398 125.424 li
@
771.199 125.424 mo
776.801 119.822 li
@
771.199 119.822 mo
776.801 125.424 li
@
774.398 125.424 mo
780 119.822 li
@
774.398 119.822 mo
780 125.424 li
@
836.801 125.424 mo
842.398 119.822 li
@
836.801 119.822 mo
842.398 125.424 li
@
839.199 125.424 mo
844.801 119.822 li
@
839.199 119.822 mo
844.801 125.424 li
@
842.398 125.424 mo
848 119.822 li
@
842.398 119.822 mo
848 125.424 li
@
844.801 125.424 mo
850.398 119.822 li
@
844.801 119.822 mo
850.398 125.424 li
@
848 125.424 mo
853.602 119.822 li
@
848 119.822 mo
853.602 125.424 li
@
850.398 125.424 mo
856 119.822 li
@
850.398 119.822 mo
856 125.424 li
@
853.602 125.424 mo
859.199 119.822 li
@
853.602 119.822 mo
859.199 125.424 li
@
856 125.424 mo
861.602 119.822 li
@
856 119.822 mo
861.602 125.424 li
@
859.199 125.424 mo
864.801 119.822 li
@
859.199 119.822 mo
864.801 125.424 li
@
861.602 125.424 mo
867.199 119.822 li
@
861.602 119.822 mo
867.199 125.424 li
@
864.801 125.424 mo
870.398 119.822 li
@
864.801 119.822 mo
870.398 125.424 li
@
867.199 125.424 mo
872.801 119.822 li
@
867.199 119.822 mo
872.801 125.424 li
@
870.398 125.424 mo
876 119.822 li
@
870.398 119.822 mo
876 125.424 li
@
872.801 125.424 mo
878.398 119.822 li
@
872.801 119.822 mo
878.398 125.424 li
@
876 125.424 mo
881.602 119.822 li
@
876 119.822 mo
881.602 125.424 li
@
878.398 125.424 mo
884 119.822 li
@
878.398 119.822 mo
884 125.424 li
@
881.602 125.424 mo
887.199 119.822 li
@
881.602 119.822 mo
887.199 125.424 li
@
884.801 125.424 mo
890.398 119.822 li
@
884.801 119.822 mo
890.398 125.424 li
@
0 lj
525.293 173.689 mo
588.195 173.689 li
@
528.492 173.689 mo
530.094 172.088 li
524.492 173.689 li
530.094 175.287 li
cp
ef
.4 lw
2 lc
528.492 173.689 mo
530.094 172.088 li
524.492 173.689 li
530.094 175.287 li
cp
@
584.996 173.689 mo
583.398 175.287 li
588.996 173.689 li
583.398 172.088 li
cp
ef
584.996 173.689 mo
583.398 175.287 li
588.996 173.689 li
583.398 172.088 li
cp
@
.782609 lw
0 lc
556.109 171.927 mo
556.109 47.5412 li
@
556.109 168.795 mo
554.543 167.232 li
556.109 172.709 li
557.676 167.232 li
cp
ef
.391305 lw
2 lc
556.109 168.795 mo
554.543 167.232 li
556.109 172.709 li
557.676 167.232 li
cp
@
.815412 lw
0 lc
266.434 119.74 mo
266.434 46.6312 li
@
266.434 116.478 mo
264.805 114.845 li
266.434 120.556 li
268.066 114.845 li
cp
ef
.407706 lw
2 lc
266.434 116.478 mo
264.805 114.845 li
266.434 120.556 li
268.066 114.845 li
cp
@
.8 lw
0 lc
803.891 178.424 mo
803.891 46.1502 li
@
803.891 175.224 mo
802.289 173.627 li
803.891 179.224 li
805.492 173.627 li
cp
ef
.4 lw
2 lc
803.891 175.224 mo
802.289 173.627 li
803.891 179.224 li
805.492 173.627 li
cp
@
812.609 33.8262 mo
802.09 33.8262 li
802.09 34.6422 li
803.973 34.6422 li
803.973 44.8302 li
802.09 44.8302 li
802.09 45.6462 li
802.754 45.5922 804.508 45.5922 805.273 45.5922 cv
806.125 45.5922 808.023 45.5922 808.785 45.6462 cv
808.785 44.8302 li
806.438 44.8302 li
806.438 40.1312 li
807.309 40.1312 li
808.977 40.1312 809.133 40.8772 809.133 42.1662 cv
809.953 42.1662 li
809.953 37.2792 li
809.133 37.2792 li
809.133 38.5682 808.992 39.3142 807.309 39.3142 cv
806.438 39.3142 li
806.438 34.6422 li
808.871 34.6422 li
811.672 34.6422 812.074 35.9782 812.332 38.0132 cv
813.148 38.0132 li
cp
f
818.809 44.3062 mo
818.809 44.4122 li
818.813 44.5172 li
818.816 44.5762 li
818.824 44.6852 li
818.836 44.7442 li
818.848 44.7992 li
818.863 44.8532 li
818.883 44.9082 li
818.902 44.9672 li
818.93 45.0212 li
818.957 45.0722 li
818.992 45.1272 li
819.078 45.2282 li
819.129 45.2752 li
819.184 45.3222 li
819.219 45.3422 li
819.25 45.3652 li
819.285 45.3842 li
819.316 45.4042 li
819.355 45.4272 li
819.395 45.4432 li
819.438 45.4632 li
819.48 45.4782 li
819.523 45.4982 li
819.617 45.5292 li
819.672 45.5412 li
819.723 45.5562 li
819.773 45.5682 li
819.836 45.5802 li
819.895 45.5922 li
819.953 45.5992 li
820.016 45.6112 li
820.082 45.6192 li
820.152 45.6272 li
820.223 45.6312 li
820.297 45.6342 li
820.371 45.6422 li
820.449 45.6422 li
820.527 45.6462 li
821.445 45.6462 li
821.797 45.6462 822.004 45.6462 822.004 45.2282 cv
822.004 44.8302 821.781 44.8302 821.551 44.8302 cv
820.496 44.8102 820.496 44.5802 820.496 44.1852 cv
820.496 40.4512 li
820.496 38.9002 819.254 37.7712 816.664 37.7712 cv
815.68 37.7712 813.555 37.8382 813.555 39.3692 cv
813.555 40.1312 814.164 40.4672 814.629 40.4672 cv
815.172 40.4672 815.727 40.0992 815.727 39.3692 cv
815.727 38.8452 815.398 38.5492 815.348 38.5172 cv
815.832 38.4162 816.387 38.3922 816.598 38.3922 cv
817.906 38.3922 818.508 39.1232 818.508 40.4512 cv
818.508 43.2322 li
818.508 44.9002 816.91 45.1232 816.473 45.1232 cv
815.59 45.1232 814.891 44.5172 814.891 43.7482 cv
814.891 41.8732 817.645 41.6312 818.508 41.5762 cv
818.508 41.0412 li
817.277 41.0922 812.859 41.2442 812.859 43.7712 cv
812.859 45.4392 815.012 45.7522 816.211 45.7522 cv
817.609 45.7522 818.422 45.0372 818.809 44.3062 cv
cp
f
825.914 33.5762 mo
822.836 33.7202 li
822.836 34.5372 li
823.918 34.5372 824.035 34.5372 824.035 35.2132 cv
824.035 44.8302 li
822.836 44.8302 li
822.836 45.6462 li
823.395 45.6272 824.23 45.5922 824.977 45.5922 cv
825.723 45.5922 826.527 45.6272 827.113 45.6462 cv
827.113 44.8302 li
825.914 44.8302 li
cp
f
831.48 33.5762 mo
828.406 33.7202 li
828.406 34.5372 li
829.484 34.5372 829.605 34.5372 829.605 35.2132 cv
829.605 44.8302 li
828.406 44.8302 li
828.406 45.6462 li
828.961 45.6272 829.797 45.5922 830.543 45.5922 cv
831.289 45.5922 832.094 45.6272 832.684 45.6462 cv
832.684 44.8302 li
831.48 44.8302 li
cp
f
846.324 44.3062 mo
846.324 44.4122 li
846.328 44.5172 li
846.328 44.5762 li
846.344 44.6852 li
846.352 44.7442 li
846.363 44.7992 li
846.379 44.8532 li
846.398 44.9082 li
846.418 44.9672 li
846.445 45.0212 li
846.477 45.0722 li
846.512 45.1272 li
846.551 45.1772 li
846.594 45.2282 li
846.703 45.3222 li
846.734 45.3422 li
846.766 45.3652 li
846.797 45.3842 li
846.836 45.4042 li
846.871 45.4272 li
846.91 45.4432 li
846.949 45.4632 li
846.996 45.4782 li
847.039 45.4982 li
847.086 45.5132 li
847.137 45.5292 li
847.184 45.5412 li
847.238 45.5562 li
847.348 45.5802 li
847.406 45.5922 li
847.469 45.5992 li
847.531 45.6112 li
847.664 45.6272 li
847.813 45.6342 li
847.887 45.6422 li
847.965 45.6422 li
848.047 45.6462 li
848.965 45.6462 li
849.313 45.6462 849.52 45.6462 849.52 45.2282 cv
849.52 44.8302 849.297 44.8302 849.066 44.8302 cv
848.008 44.8102 848.008 44.5802 848.008 44.1852 cv
848.008 40.4512 li
848.008 38.9002 846.773 37.7712 844.18 37.7712 cv
843.195 37.7712 841.074 37.8382 841.074 39.3692 cv
841.074 40.1312 841.676 40.4672 842.148 40.4672 cv
842.684 40.4672 843.242 40.0992 843.242 39.3692 cv
843.242 38.8452 842.914 38.5492 842.859 38.5172 cv
843.344 38.4162 843.902 38.3922 844.117 38.3922 cv
845.418 38.3922 846.023 39.1232 846.023 40.4512 cv
846.023 43.2322 li
846.023 44.9002 844.426 45.1232 843.992 45.1232 cv
843.109 45.1232 842.41 44.5172 842.41 43.7482 cv
842.41 41.8732 845.156 41.6312 846.023 41.5762 cv
846.023 41.0412 li
844.789 41.0922 840.375 41.2442 840.375 43.7712 cv
840.375 45.4392 842.527 45.7522 843.73 45.7522 cv
845.125 45.7522 845.938 45.0372 846.324 44.3062 cv
cp
f
851.516 39.4592 mo
851.516 44.8302 li
850.316 44.8302 li
850.316 45.6462 li
850.805 45.6272 851.848 45.5922 852.508 45.5922 cv
853.188 45.5922 854.215 45.6272 854.699 45.6462 cv
854.699 44.8302 li
853.496 44.8302 li
853.496 41.1972 li
853.496 39.2992 854.992 38.4512 856.09 38.4512 cv
856.684 38.4512 857.043 38.8102 857.043 40.1312 cv
857.043 44.8302 li
855.844 44.8302 li
855.844 45.6462 li
856.336 45.6272 857.375 45.5922 858.035 45.5922 cv
858.719 45.5922 859.746 45.6272 860.227 45.6462 cv
860.227 44.8302 li
859.031 44.8302 li
859.031 40.3222 li
859.031 38.4982 858.09 37.8222 856.352 37.8222 cv
854.684 37.8222 853.758 38.8102 853.309 39.7012 cv
853.309 37.8222 li
850.316 37.9632 li
850.316 38.7792 li
851.395 38.7792 851.516 38.7792 851.516 39.4592 cv
cp
f
862.609 39.4592 mo
862.609 44.8302 li
861.414 44.8302 li
861.414 45.6462 li
861.902 45.6272 862.945 45.5922 863.605 45.5922 cv
864.285 45.5922 865.313 45.6272 865.797 45.6462 cv
865.797 44.8302 li
864.598 44.8302 li
864.598 41.1972 li
864.598 39.2992 866.09 38.4512 867.188 38.4512 cv
867.785 38.4512 868.145 38.8102 868.145 40.1312 cv
868.145 44.8302 li
866.941 44.8302 li
866.941 45.6462 li
867.434 45.6272 868.473 45.5922 869.133 45.5922 cv
869.816 45.5922 870.84 45.6272 871.324 45.6462 cv
871.324 44.8302 li
870.129 44.8302 li
870.129 40.3222 li
870.129 38.4982 869.191 37.8222 867.449 37.8222 cv
865.781 37.8222 864.859 38.8102 864.406 39.7012 cv
864.406 37.8222 li
861.414 37.9632 li
861.414 38.7792 li
862.492 38.7792 862.609 38.7792 862.609 39.4592 cv
cp
f
881.156 41.8572 mo
881.148 41.6382 li
881.133 41.4272 li
881.113 41.2172 li
881.082 41.0092 li
881.039 40.8102 li
880.988 40.6152 li
880.926 40.4202 li
880.859 40.2362 li
880.781 40.0562 li
880.695 39.8772 li
880.602 39.7052 li
880.5 39.5412 li
880.387 39.3812 li
880.27 39.2282 li
880.141 39.0802 li
880 38.9432 li
879.855 38.8102 li
879.703 38.6812 li
879.539 38.5602 li
879.367 38.4512 li
879.188 38.3452 li
879.004 38.2522 li
878.813 38.1622 li
878.609 38.0842 li
878.402 38.0092 li
878.18 37.9512 li
877.957 37.8962 li
877.723 37.8532 li
877.484 37.8182 li
877.238 37.7952 li
876.984 37.7752 li
876.719 37.7712 li
876.719 38.3922 li
877.453 38.3922 878.18 38.6742 878.566 39.2832 cv
878.926 39.8692 878.926 40.8302 878.926 41.6622 cv
878.926 43.1742 878.926 45.0562 876.719 45.0562 cv
874.512 45.0562 874.512 43.1742 874.512 41.6622 cv
874.512 40.8772 874.512 39.9942 874.805 39.4002 cv
875.137 38.7592 875.871 38.3922 876.719 38.3922 cv
876.719 37.7712 li
873.867 37.7712 872.285 39.5452 872.285 41.8572 cv
872.285 44.0092 873.816 45.7522 876.719 45.7522 cv
879.645 45.7522 881.156 43.9942 881.156 41.8572 cv
cp
f
883.527 38.7442 mo
883.527 43.5092 li
883.527 45.3652 885.047 45.7522 886.277 45.7522 cv
887.605 45.7522 888.383 44.7562 888.383 43.4942 cv
888.383 42.5722 li
887.563 42.5722 li
887.563 43.4552 li
887.563 44.6382 887.008 45.0562 886.523 45.0562 cv
885.512 45.0562 885.512 43.9472 885.512 43.5412 cv
885.512 38.7442 li
888.051 38.7442 li
888.051 37.9272 li
885.512 37.9272 li
885.512 34.6032 li
884.695 34.6032 li
884.68 36.3422 883.828 38.0642 882.105 38.1152 cv
882.105 38.7442 li
cp
f
896.031 44.3062 mo
896.039 44.5172 li
896.039 44.5762 li
896.055 44.6852 li
896.066 44.7442 li
896.074 44.7992 li
896.09 44.8532 li
896.109 44.9082 li
896.133 44.9672 li
896.156 45.0212 li
896.188 45.0722 li
896.223 45.1272 li
896.262 45.1772 li
896.305 45.2282 li
896.414 45.3222 li
896.445 45.3422 li
896.477 45.3652 li
896.508 45.3842 li
896.547 45.4042 li
896.582 45.4272 li
896.621 45.4432 li
896.66 45.4632 li
896.707 45.4782 li
896.75 45.4982 li
896.797 45.5132 li
896.848 45.5292 li
896.895 45.5412 li
896.949 45.5562 li
897.059 45.5802 li
897.117 45.5922 li
897.18 45.5992 li
897.246 45.6112 li
897.313 45.6192 li
897.375 45.6272 li
897.523 45.6342 li
897.598 45.6422 li
897.676 45.6422 li
897.758 45.6462 li
898.676 45.6462 li
899.023 45.6462 899.23 45.6462 899.23 45.2282 cv
899.23 44.8302 899.008 44.8302 898.777 44.8302 cv
897.719 44.8102 897.719 44.5802 897.719 44.1852 cv
897.719 40.4512 li
897.719 38.9002 896.484 37.7712 893.891 37.7712 cv
892.906 37.7712 890.785 37.8382 890.785 39.3692 cv
890.785 40.1312 891.387 40.4672 891.859 40.4672 cv
892.395 40.4672 892.953 40.0992 892.953 39.3692 cv
892.953 38.8452 892.625 38.5492 892.57 38.5172 cv
893.055 38.4162 893.613 38.3922 893.828 38.3922 cv
895.129 38.3922 895.738 39.1232 895.738 40.4512 cv
895.738 43.2322 li
895.738 44.9002 894.137 45.1232 893.703 45.1232 cv
892.82 45.1232 892.121 44.5172 892.121 43.7482 cv
892.121 41.8732 894.867 41.6312 895.738 41.5762 cv
895.738 41.0412 li
894.5 41.0922 890.086 41.2442 890.086 43.7712 cv
890.086 45.4392 892.238 45.7522 893.441 45.7522 cv
894.836 45.7522 895.648 45.0372 896.031 44.3062 cv
cp
f
901.035 38.7442 mo
901.035 43.5092 li
901.035 45.3652 902.551 45.7522 903.781 45.7522 cv
905.109 45.7522 905.887 44.7562 905.887 43.4942 cv
905.887 42.5722 li
905.07 42.5722 li
905.07 43.4552 li
905.07 44.6382 904.516 45.0562 904.027 45.0562 cv
903.02 45.0562 903.02 43.9472 903.02 43.5412 cv
903.02 38.7442 li
905.555 38.7442 li
905.555 37.9272 li
903.02 37.9272 li
903.02 34.6032 li
902.199 34.6032 li
902.188 36.3422 901.336 38.0642 899.609 38.1152 cv
899.609 38.7442 li
cp
f
910.93 37.8222 mo
907.898 37.9632 li
907.898 38.7792 li
908.934 38.7792 909.051 38.7792 909.051 39.4592 cv
909.051 44.8302 li
907.852 44.8302 li
907.852 45.6462 li
908.391 45.6272 909.242 45.5922 909.973 45.5922 cv
910.496 45.5922 911.379 45.6272 912.008 45.6462 cv
912.008 44.8302 li
910.93 44.8302 li
cp
f
911.105 34.9202 mo
911.102 34.8452 li
911.098 34.7792 li
911.086 34.7092 li
911.074 34.6422 li
911.043 34.5092 li
911.016 34.4472 li
910.992 34.3842 li
910.965 34.3222 li
910.938 34.2632 li
910.902 34.2052 li
910.867 34.1542 li
910.828 34.0992 li
910.785 34.0492 li
910.746 33.9982 li
910.699 33.9512 li
910.648 33.9082 li
910.602 33.8652 li
910.551 33.8262 li
910.387 33.7202 li
910.324 33.6932 li
910.266 33.6662 li
910.203 33.6422 li
910.078 33.6032 li
910.012 33.5882 li
909.949 33.5762 li
909.879 33.5682 li
909.813 33.5642 li
909.746 33.5642 li
909 33.5642 908.391 34.1742 908.391 34.9202 cv
908.391 35.6662 909 36.2712 909.746 36.2712 cv
910.477 36.2712 911.105 35.6812 911.105 34.9202 cv
cp
f
922.027 41.8572 mo
922.02 41.6382 li
922.008 41.4272 li
921.988 41.2172 li
921.953 41.0092 li
921.914 40.8102 li
921.859 40.6152 li
921.801 40.4202 li
921.734 40.2362 li
921.656 40.0562 li
921.57 39.8772 li
921.477 39.7052 li
921.371 39.5412 li
921.262 39.3812 li
921.141 39.2282 li
921.012 39.0802 li
920.875 38.9432 li
920.73 38.8102 li
920.578 38.6812 li
920.414 38.5602 li
920.242 38.4512 li
920.063 38.3452 li
919.879 38.2522 li
919.688 38.1622 li
919.484 38.0842 li
919.273 38.0092 li
919.055 37.9512 li
918.832 37.8962 li
918.598 37.8532 li
918.359 37.8182 li
918.113 37.7952 li
917.859 37.7752 li
917.598 37.7712 li
917.598 38.3922 li
918.324 38.3922 919.055 38.6742 919.438 39.2832 cv
919.801 39.8692 919.801 40.8302 919.801 41.6622 cv
919.801 43.1742 919.801 45.0562 917.598 45.0562 cv
915.387 45.0562 915.387 43.1742 915.387 41.6622 cv
915.387 40.8772 915.387 39.9942 915.68 39.4002 cv
916.012 38.7592 916.746 38.3922 917.598 38.3922 cv
917.598 37.7712 li
914.742 37.7712 913.16 39.5452 913.16 41.8572 cv
913.16 44.0092 914.691 45.7522 917.598 45.7522 cv
920.516 45.7522 922.027 43.9942 922.027 41.8572 cv
cp
f
924.594 39.4592 mo
924.594 44.8302 li
923.395 44.8302 li
923.395 45.6462 li
923.887 45.6272 924.926 45.5922 925.586 45.5922 cv
926.27 45.5922 927.293 45.6272 927.777 45.6462 cv
927.777 44.8302 li
926.578 44.8302 li
926.578 41.1972 li
926.578 39.2992 928.074 38.4512 929.168 38.4512 cv
929.762 38.4512 930.121 38.8102 930.121 40.1312 cv
930.121 44.8302 li
928.922 44.8302 li
928.922 45.6462 li
929.414 45.6272 930.457 45.5922 931.117 45.5922 cv
931.797 45.5922 932.824 45.6272 933.309 45.6462 cv
933.309 44.8302 li
932.109 44.8302 li
932.109 40.3222 li
932.109 38.4982 931.168 37.8222 929.43 37.8222 cv
927.762 37.8222 926.84 38.8102 926.387 39.7012 cv
926.387 37.8222 li
923.395 37.9632 li
923.395 38.7792 li
924.473 38.7792 924.594 38.7792 924.594 39.4592 cv
cp
f
268.793 35.3652 mo
268.773 35.3492 li
268.758 35.3302 li
268.73 35.3022 li
268.719 35.2872 li
268.703 35.2752 li
268.695 35.2632 li
268.684 35.2522 li
268.668 35.2442 li
268.648 35.2242 li
268.633 35.2172 li
268.625 35.2092 li
268.609 35.2012 li
268.586 35.1932 li
268.574 35.1852 li
268.559 35.1812 li
268.543 35.1812 li
268.531 35.1772 li
268.5 35.1702 li
268.48 35.1662 li
268.461 35.1662 li
268.441 35.1622 li
264.598 35.1622 li
264.598 35.9122 li
266.328 35.9122 li
266.328 44.9162 li
266.328 45.2632 266.313 45.2792 265.859 45.3342 cv
265.48 45.3772 265.445 45.3772 265 45.3772 cv
264.598 45.3772 li
264.598 46.1272 li
265.207 46.0762 266.117 46.0762 266.742 46.0762 cv
267.418 46.0762 268.246 46.0762 268.898 46.1272 cv
268.898 45.3772 li
268.5 45.3772 li
268.215 45.3772 267.945 45.3612 267.652 45.3342 cv
267.191 45.2792 267.176 45.2632 267.176 44.9162 cv
267.176 36.5492 li
275.141 45.9242 li
275.301 46.1112 275.316 46.1272 275.57 46.1272 cv
276.004 46.1272 276.004 45.9822 276.004 45.6192 cv
276.004 36.3732 li
276.004 36.0252 276.02 36.0092 276.465 35.9552 cv
276.852 35.9122 276.879 35.9122 277.324 35.9122 cv
277.727 35.9122 li
277.727 35.1622 li
277.121 35.2052 276.207 35.2052 275.586 35.2052 cv
274.914 35.2052 274.082 35.2052 273.426 35.1622 cv
273.426 35.9122 li
273.828 35.9122 li
274.117 35.9122 274.391 35.9272 274.676 35.9552 cv
275.141 36.0092 275.156 36.0252 275.156 36.3732 cv
275.156 42.8492 li
cp
f
287.047 42.6422 mo
287.043 42.4432 li
287.027 42.2482 li
287.008 42.0562 li
286.98 41.8652 li
286.941 41.6812 li
286.895 41.4982 li
286.84 41.3222 li
286.777 41.1542 li
286.703 40.9862 li
286.629 40.8222 li
286.539 40.6662 li
286.445 40.5132 li
286.34 40.3652 li
286.234 40.2242 li
286.113 40.0922 li
285.984 39.9632 li
285.855 39.8422 li
285.711 39.7202 li
285.563 39.6112 li
285.406 39.5092 li
285.242 39.4122 li
285.07 39.3262 li
284.895 39.2482 li
284.707 39.1742 li
284.516 39.1032 li
284.313 39.0492 li
284.109 38.9982 li
283.895 38.9592 li
283.676 38.9272 li
283.445 38.9042 li
283.211 38.8882 li
282.973 38.8882 li
282.973 39.4592 li
283.641 39.4592 284.313 39.7172 284.668 40.2752 cv
285 40.8142 285 41.6972 285 42.4672 cv
285 43.8572 285 45.5842 282.973 45.5842 cv
280.941 45.5842 280.941 43.8572 280.941 42.4672 cv
280.941 41.7442 280.941 40.9312 281.211 40.3842 cv
281.516 39.7952 282.188 39.4592 282.973 39.4592 cv
282.973 38.8882 li
280.348 38.8882 278.891 40.5172 278.891 42.6422 cv
278.891 44.6232 280.301 46.2242 282.973 46.2242 cv
285.656 46.2242 287.047 44.6112 287.047 42.6422 cv
cp
f
289.406 40.4352 mo
289.406 45.3772 li
288.305 45.3772 li
288.305 46.1272 li
288.754 46.1112 289.711 46.0762 290.32 46.0762 cv
290.949 46.0762 291.887 46.1112 292.336 46.1272 cv
292.336 45.3772 li
291.234 45.3772 li
291.234 42.0372 li
291.234 40.2912 292.605 39.5092 293.613 39.5092 cv
294.16 39.5092 294.492 39.8422 294.492 41.0562 cv
294.492 45.3772 li
293.391 45.3772 li
293.391 46.1272 li
293.84 46.1112 294.801 46.0762 295.406 46.0762 cv
296.031 46.0762 296.977 46.1112 297.422 46.1272 cv
297.422 45.3772 li
296.316 45.3772 li
296.316 41.2322 li
296.316 39.5522 295.453 38.9312 293.855 38.9312 cv
292.32 38.9312 291.473 39.8422 291.059 40.6622 cv
291.059 38.9312 li
288.305 39.0642 li
288.305 39.8142 li
289.297 39.8142 289.406 39.8142 289.406 40.4352 cv
cp
f
298 41.7952 mo
302.879 41.7952 li
302.879 43.3462 li
298 43.3462 li
cp
f
305.785 39.0292 mo
304.59 39.0292 li
304.59 39.7792 li
305.785 39.7792 li
305.785 45.3772 li
304.684 45.3772 li
304.684 46.1272 li
305.242 46.1112 305.961 46.0762 306.699 46.0762 cv
307.309 46.0762 308.328 46.0762 308.906 46.1272 cv
308.906 45.3772 li
307.512 45.3772 li
307.512 39.7792 li
309.352 39.7792 li
309.352 39.0292 li
307.418 39.0292 li
307.418 37.4122 li
307.418 35.6502 308.637 35.5092 309.031 35.5092 cv
309.113 35.5092 309.191 35.5092 309.309 35.5412 cv
309.066 35.7172 308.934 36.0252 308.934 36.3222 cv
308.934 37.0172 309.496 37.3182 309.914 37.3182 cv
310.391 37.3182 310.902 36.9782 310.902 36.3222 cv
310.902 35.6502 310.332 34.9352 309.082 34.9352 cv
307.512 34.9352 305.785 35.6072 305.785 37.4122 cv
cp
f
315.52 44.8962 mo
315.52 44.9902 li
315.523 45.0922 li
315.527 45.1422 li
315.535 45.1932 li
315.539 45.2442 li
315.547 45.2952 li
315.559 45.3492 li
315.59 45.4512 li
315.609 45.5022 li
315.633 45.5522 li
315.664 45.6032 li
315.695 45.6502 li
315.73 45.6972 li
315.773 45.7442 li
315.816 45.7872 li
315.871 45.8302 li
315.898 45.8492 li
315.93 45.8692 li
315.957 45.8882 li
315.988 45.9082 li
316.023 45.9272 li
316.063 45.9432 li
316.098 45.9592 li
316.137 45.9742 li
316.223 46.0062 li
316.266 46.0172 li
316.313 46.0332 li
316.465 46.0682 li
316.52 46.0762 li
316.578 46.0882 li
316.695 46.1032 li
316.758 46.1072 li
316.824 46.1152 li
316.887 46.1192 li
316.961 46.1232 li
317.031 46.1232 li
317.105 46.1272 li
317.949 46.1272 li
318.273 46.1272 318.461 46.1272 318.461 45.7442 cv
318.461 45.3772 318.258 45.3772 318.043 45.3772 cv
317.07 45.3612 317.07 45.1502 317.07 44.7832 cv
317.07 41.3492 li
317.07 39.9242 315.934 38.8882 313.551 38.8882 cv
312.645 38.8882 310.695 38.9472 310.695 40.3572 cv
310.695 41.0562 311.25 41.3652 311.684 41.3652 cv
312.176 41.3652 312.688 41.0292 312.688 40.3572 cv
312.688 39.8772 312.387 39.6032 312.336 39.5722 cv
312.785 39.4782 313.297 39.4592 313.488 39.4592 cv
314.691 39.4592 315.246 40.1312 315.246 41.3492 cv
315.246 43.9082 li
315.246 45.4392 313.777 45.6462 313.379 45.6462 cv
312.566 45.6462 311.922 45.0922 311.922 44.3812 cv
311.922 42.6582 314.449 42.4352 315.246 42.3842 cv
315.246 41.8922 li
314.113 41.9392 310.051 42.0802 310.051 44.4042 cv
310.051 45.9392 312.031 46.2242 313.137 46.2242 cv
314.422 46.2242 315.164 45.5642 315.52 44.8962 cv
cp
f
322.055 35.0292 mo
319.23 35.1622 li
319.23 35.9122 li
320.219 35.9122 320.328 35.9122 320.328 36.5332 cv
320.328 45.3772 li
319.23 45.3772 li
319.23 46.1272 li
319.738 46.1112 320.508 46.0762 321.191 46.0762 cv
321.879 46.0762 322.617 46.1112 323.16 46.1272 cv
323.16 45.3772 li
322.055 45.3772 li
cp
f
327.18 35.0292 mo
324.348 35.1622 li
324.348 35.9122 li
325.344 35.9122 325.453 35.9122 325.453 36.5332 cv
325.453 45.3772 li
324.348 45.3772 li
324.348 46.1272 li
324.863 46.1112 325.629 46.0762 326.316 46.0762 cv
327.004 46.0762 327.742 46.1112 328.281 46.1272 cv
328.281 45.3772 li
327.18 45.3772 li
cp
f
340.789 44.8962 mo
340.789 44.9902 li
340.793 45.0922 li
340.793 45.1422 li
340.797 45.1932 li
340.813 45.2952 li
340.824 45.3492 li
340.855 45.4512 li
340.875 45.5022 li
340.898 45.5522 li
340.926 45.6032 li
340.957 45.6502 li
340.992 45.6972 li
341.035 45.7442 li
341.082 45.7872 li
341.137 45.8302 li
341.191 45.8692 li
341.227 45.8882 li
341.258 45.9082 li
341.293 45.9272 li
341.328 45.9432 li
341.445 45.9902 li
341.488 46.0062 li
341.531 46.0172 li
341.578 46.0332 li
341.629 46.0452 li
341.676 46.0562 li
341.73 46.0682 li
341.785 46.0762 li
341.84 46.0882 li
341.898 46.0952 li
341.961 46.1032 li
342.023 46.1072 li
342.09 46.1152 li
342.156 46.1192 li
342.227 46.1232 li
342.297 46.1232 li
342.371 46.1272 li
343.215 46.1272 li
343.535 46.1272 343.727 46.1272 343.727 45.7442 cv
343.727 45.3772 343.52 45.3772 343.313 45.3772 cv
342.34 45.3612 342.34 45.1502 342.34 44.7832 cv
342.34 41.3492 li
342.34 39.9242 341.199 38.8882 338.816 38.8882 cv
337.91 38.8882 335.957 38.9472 335.957 40.3572 cv
335.957 41.0562 336.516 41.3652 336.945 41.3652 cv
337.445 41.3652 337.953 41.0292 337.953 40.3572 cv
337.953 39.8772 337.652 39.6032 337.605 39.5722 cv
338.051 39.4782 338.563 39.4592 338.758 39.4592 cv
339.953 39.4592 340.512 40.1312 340.512 41.3492 cv
340.512 43.9082 li
340.512 45.4392 339.043 45.6462 338.641 45.6462 cv
337.828 45.6462 337.188 45.0922 337.188 44.3812 cv
337.188 42.6582 339.715 42.4352 340.512 42.3842 cv
340.512 41.8922 li
339.379 41.9392 335.316 42.0802 335.316 44.4042 cv
335.316 45.9392 337.297 46.2242 338.398 46.2242 cv
339.684 46.2242 340.434 45.5642 340.789 44.8962 cv
cp
f
345.563 40.4352 mo
345.563 45.3772 li
344.457 45.3772 li
344.457 46.1272 li
344.91 46.1112 345.867 46.0762 346.473 46.0762 cv
347.102 46.0762 348.043 46.1112 348.488 46.1272 cv
348.488 45.3772 li
347.387 45.3772 li
347.387 42.0372 li
347.387 40.2912 348.762 39.5092 349.77 39.5092 cv
350.316 39.5092 350.645 39.8422 350.645 41.0562 cv
350.645 45.3772 li
349.543 45.3772 li
349.543 46.1272 li
349.992 46.1112 350.953 46.0762 351.559 46.0762 cv
352.188 46.0762 353.129 46.1112 353.574 46.1272 cv
353.574 45.3772 li
352.473 45.3772 li
352.473 41.2322 li
352.473 39.5522 351.609 38.9312 350.008 38.9312 cv
348.477 38.9312 347.629 39.8422 347.211 40.6622 cv
347.211 38.9312 li
344.457 39.0642 li
344.457 39.8142 li
345.449 39.8142 345.563 39.8142 345.563 40.4352 cv
cp
f
355.77 40.4352 mo
355.77 45.3772 li
354.664 45.3772 li
354.664 46.1272 li
355.117 46.1112 356.074 46.0762 356.68 46.0762 cv
357.305 46.0762 358.25 46.1112 358.695 46.1272 cv
358.695 45.3772 li
357.59 45.3772 li
357.59 42.0372 li
357.59 40.2912 358.969 39.5092 359.973 39.5092 cv
360.523 39.5092 360.852 39.8422 360.852 41.0562 cv
360.852 45.3772 li
359.746 45.3772 li
359.746 46.1272 li
360.199 46.1112 361.156 46.0762 361.766 46.0762 cv
362.395 46.0762 363.332 46.1112 363.781 46.1272 cv
363.781 45.3772 li
362.68 45.3772 li
362.68 41.2322 li
362.68 39.5522 361.816 38.9312 360.215 38.9312 cv
358.68 38.9312 357.832 39.8422 357.418 40.6622 cv
357.418 38.9312 li
354.664 39.0642 li
354.664 39.8142 li
355.656 39.8142 355.77 39.8142 355.77 40.4352 cv
cp
f
372.816 42.6422 mo
372.816 42.4432 li
372.801 42.2482 li
372.781 42.0562 li
372.75 41.8652 li
372.711 41.6812 li
372.664 41.4982 li
372.609 41.3222 li
372.547 41.1542 li
372.477 40.9862 li
372.398 40.8222 li
372.313 40.6662 li
372.215 40.5132 li
372.113 40.3652 li
372.004 40.2242 li
371.883 40.0922 li
371.758 39.9632 li
371.625 39.8422 li
371.484 39.7202 li
371.336 39.6112 li
371.18 39.5092 li
371.016 39.4122 li
370.84 39.3262 li
370.664 39.2482 li
370.477 39.1742 li
370.285 39.1032 li
370.086 39.0492 li
369.879 38.9982 li
369.668 38.9592 li
369.445 38.9272 li
369.215 38.9042 li
368.98 38.8882 li
368.742 38.8882 li
368.742 39.4592 li
369.414 39.4592 370.082 39.7172 370.438 40.2752 cv
370.773 40.8142 370.773 41.6972 370.773 42.4672 cv
370.773 43.8572 370.773 45.5842 368.742 45.5842 cv
366.711 45.5842 366.711 43.8572 366.711 42.4672 cv
366.711 41.7442 366.711 40.9312 366.98 40.3842 cv
367.289 39.7952 367.957 39.4592 368.742 39.4592 cv
368.742 38.8882 li
366.121 38.8882 364.664 40.5172 364.664 42.6422 cv
364.664 44.6232 366.07 46.2242 368.742 46.2242 cv
371.43 46.2242 372.816 44.6112 372.816 42.6422 cv
cp
f
375.004 39.7792 mo
375.004 44.1622 li
375.004 45.8732 376.398 46.2242 377.531 46.2242 cv
378.75 46.2242 379.465 45.3102 379.465 44.1462 cv
379.465 43.2992 li
378.715 43.2992 li
378.715 44.1112 li
378.715 45.2012 378.203 45.5842 377.754 45.5842 cv
376.828 45.5842 376.828 44.5642 376.828 44.1932 cv
376.828 39.7792 li
379.16 39.7792 li
379.16 39.0292 li
376.828 39.0292 li
376.828 35.9702 li
376.074 35.9702 li
376.059 37.5722 375.277 39.1582 373.695 39.2012 cv
373.695 39.7792 li
cp
f
386.504 44.8962 mo
386.504 44.9902 li
386.508 45.0922 li
386.52 45.2442 li
386.531 45.2952 li
386.539 45.3492 li
386.57 45.4512 li
386.59 45.5022 li
386.613 45.5522 li
386.641 45.6032 li
386.711 45.6972 li
386.75 45.7442 li
386.852 45.8302 li
386.879 45.8492 li
386.973 45.9082 li
387.008 45.9272 li
387.043 45.9432 li
387.121 45.9742 li
387.164 45.9902 li
387.203 46.0062 li
387.25 46.0172 li
387.293 46.0332 li
387.395 46.0562 li
387.449 46.0682 li
387.5 46.0762 li
387.559 46.0882 li
387.613 46.0952 li
387.676 46.1032 li
387.738 46.1072 li
387.805 46.1152 li
387.871 46.1192 li
387.941 46.1232 li
388.012 46.1232 li
388.086 46.1272 li
388.93 46.1272 li
389.25 46.1272 389.441 46.1272 389.441 45.7442 cv
389.441 45.3772 389.234 45.3772 389.027 45.3772 cv
388.055 45.3612 388.055 45.1502 388.055 44.7832 cv
388.055 41.3492 li
388.055 39.9242 386.914 38.8882 384.535 38.8882 cv
383.625 38.8882 381.672 38.9472 381.672 40.3572 cv
381.672 41.0562 382.23 41.3652 382.664 41.3652 cv
383.16 41.3652 383.672 41.0292 383.672 40.3572 cv
383.672 39.8772 383.367 39.6032 383.32 39.5722 cv
383.766 39.4782 384.277 39.4592 384.473 39.4592 cv
385.668 39.4592 386.227 40.1312 386.227 41.3492 cv
386.227 43.9082 li
386.227 45.4392 384.758 45.6462 384.355 45.6462 cv
383.543 45.6462 382.902 45.0922 382.902 44.3812 cv
382.902 42.6582 385.43 42.4352 386.227 42.3842 cv
386.227 41.8922 li
385.094 41.9392 381.031 42.0802 381.031 44.4042 cv
381.031 45.9392 383.012 46.2242 384.117 46.2242 cv
385.398 46.2242 386.148 45.5642 386.504 44.8962 cv
cp
f
391.102 39.7792 mo
391.102 44.1622 li
391.102 45.8732 392.496 46.2242 393.629 46.2242 cv
394.848 46.2242 395.566 45.3102 395.566 44.1462 cv
395.566 43.2992 li
394.813 43.2992 li
394.813 44.1112 li
394.813 45.2012 394.301 45.5842 393.855 45.5842 cv
392.926 45.5842 392.926 44.5642 392.926 44.1932 cv
392.926 39.7792 li
395.258 39.7792 li
395.258 39.0292 li
392.926 39.0292 li
392.926 35.9702 li
392.176 35.9702 li
392.16 37.5722 391.375 39.1582 389.789 39.2012 cv
389.789 39.7792 li
cp
f
400.199 38.9312 mo
397.418 39.0642 li
397.418 39.8142 li
398.363 39.8142 398.473 39.8142 398.473 40.4352 cv
398.473 45.3772 li
397.371 45.3772 li
397.371 46.1272 li
397.867 46.1112 398.648 46.0762 399.324 46.0762 cv
399.805 46.0762 400.617 46.1112 401.191 46.1272 cv
401.191 45.3772 li
400.199 45.3772 li
cp
f
400.359 36.2632 mo
400.355 36.1972 li
400.355 36.1342 li
400.344 36.0682 li
400.336 36.0092 li
400.305 35.8842 li
400.285 35.8262 li
400.262 35.7712 li
400.207 35.6622 li
400.176 35.6072 li
400.141 35.5562 li
400.07 35.4632 li
400.031 35.4162 li
399.988 35.3732 li
399.941 35.3342 li
399.898 35.2952 li
399.852 35.2562 li
399.699 35.1622 li
399.59 35.1072 li
399.531 35.0922 li
399.477 35.0722 li
399.418 35.0522 li
399.359 35.0372 li
399.297 35.0292 li
399.238 35.0212 li
399.172 35.0172 li
399.113 35.0172 li
398.426 35.0172 397.867 35.5762 397.867 36.2632 cv
397.867 36.9512 398.426 37.5062 399.113 37.5062 cv
399.781 37.5062 400.359 36.9632 400.359 36.2632 cv
cp
f
410.406 42.6422 mo
410.402 42.4432 li
410.391 42.2482 li
410.367 42.0562 li
410.34 41.8652 li
410.301 41.6812 li
410.254 41.4982 li
410.199 41.3222 li
410.137 41.1542 li
410.066 40.9862 li
409.988 40.8222 li
409.898 40.6662 li
409.805 40.5132 li
409.699 40.3652 li
409.59 40.2242 li
409.473 40.0922 li
409.348 39.9632 li
409.215 39.8422 li
409.07 39.7202 li
408.922 39.6112 li
408.766 39.5092 li
408.602 39.4122 li
408.43 39.3262 li
408.254 39.2482 li
408.066 39.1742 li
407.875 39.1032 li
407.676 39.0492 li
407.469 38.9982 li
407.254 38.9592 li
407.035 38.9272 li
406.805 38.9042 li
406.57 38.8882 li
406.332 38.8882 li
406.332 39.4592 li
407 39.4592 407.676 39.7172 408.027 40.2752 cv
408.359 40.8142 408.359 41.6972 408.359 42.4672 cv
408.359 43.8572 408.359 45.5842 406.332 45.5842 cv
404.301 45.5842 404.301 43.8572 404.301 42.4672 cv
404.301 41.7442 404.301 40.9312 404.57 40.3842 cv
404.875 39.7952 405.547 39.4592 406.332 39.4592 cv
406.332 38.8882 li
403.707 38.8882 402.25 40.5172 402.25 42.6422 cv
402.25 44.6232 403.664 46.2242 406.332 46.2242 cv
409.016 46.2242 410.406 44.6112 410.406 42.6422 cv
cp
f
412.766 40.4352 mo
412.766 45.3772 li
411.664 45.3772 li
411.664 46.1272 li
412.113 46.1112 413.07 46.0762 413.68 46.0762 cv
414.309 46.0762 415.25 46.1112 415.695 46.1272 cv
415.695 45.3772 li
414.594 45.3772 li
414.594 42.0372 li
414.594 40.2912 415.965 39.5092 416.973 39.5092 cv
417.523 39.5092 417.855 39.8422 417.855 41.0562 cv
417.855 45.3772 li
416.75 45.3772 li
416.75 46.1272 li
417.203 46.1112 418.16 46.0762 418.766 46.0762 cv
419.391 46.0762 420.336 46.1112 420.781 46.1272 cv
420.781 45.3772 li
419.676 45.3772 li
419.676 41.2322 li
419.676 39.5522 418.816 38.9312 417.215 38.9312 cv
415.68 38.9312 414.832 39.8422 414.414 40.6622 cv
414.414 38.9312 li
411.664 39.0642 li
411.664 39.8142 li
412.656 39.8142 412.766 39.8142 412.766 40.4352 cv
cp
f
556.121 36.0062 mo
556.121 45.7052 li
554.348 45.7052 li
554.348 46.4742 li
561.414 46.4742 li
564.641 46.4742 567.098 44.4632 567.098 40.9472 cv
567.098 37.3452 564.641 35.2362 561.395 35.2362 cv
560.742 36.0062 li
561.824 36.0062 563.184 36.3142 563.984 37.4592 cv
564.559 38.2992 564.688 39.4122 564.688 40.9352 cv
564.688 42.7202 564.492 43.5922 563.969 44.3262 cv
563.184 45.4432 561.742 45.7052 560.742 45.7052 cv
558.344 45.7052 li
558.344 36.0062 li
560.742 36.0062 li
561.395 35.2362 li
554.348 35.2362 li
554.348 36.0062 li
cp
f
575.34 45.2952 mo
575.34 46.5722 li
578.238 46.4742 li
578.238 45.7052 li
577.219 45.7052 577.105 45.7052 577.105 45.0682 cv
577.105 39.0992 li
574.105 39.2362 li
574.105 40.0062 li
575.121 40.0062 575.234 40.0062 575.234 40.6422 cv
575.234 43.7712 li
575.234 45.1112 574.402 45.9822 573.203 45.9822 cv
571.945 45.9822 571.895 45.5762 571.895 44.6852 cv
571.895 39.0992 li
568.891 39.2362 li
568.891 40.0062 li
569.91 40.0062 570.023 40.0062 570.023 40.6422 cv
570.023 44.4632 li
570.023 46.2132 571.355 46.5722 572.973 46.5722 cv
573.402 46.5722 574.582 46.5722 575.34 45.2952 cv
cp
f
581.941 40.9472 mo
581.941 39.0992 li
579.223 39.2362 li
579.223 40.0062 li
580.242 40.0062 580.355 40.0062 580.355 40.6422 cv
580.355 45.7052 li
579.223 45.7052 li
579.223 46.4742 li
579.801 46.4592 580.535 46.4242 581.289 46.4242 cv
581.91 46.4242 582.961 46.4242 583.551 46.4742 cv
583.551 45.7052 li
582.121 45.7052 li
582.121 42.8382 li
582.121 41.6892 582.535 39.6932 584.172 39.6932 cv
584.16 39.7052 583.859 39.9672 583.859 40.4432 cv
583.859 41.1112 584.387 41.4432 584.863 41.4432 cv
585.336 41.4432 585.859 41.0992 585.859 40.4432 cv
585.859 39.5762 584.973 39.0992 584.121 39.0992 cv
582.973 39.0992 582.324 39.9242 581.941 40.9472 cv
cp
f
592.523 45.2132 mo
592.523 45.3102 li
592.527 45.4122 li
592.531 45.4672 li
592.535 45.5172 li
592.543 45.5682 li
592.551 45.6232 li
592.563 45.6742 li
592.578 45.7282 li
592.594 45.7792 li
592.613 45.8342 li
592.668 45.9352 li
592.699 45.9862 li
592.738 46.0332 li
592.781 46.0802 li
592.828 46.1272 li
592.879 46.1702 li
592.91 46.1892 li
592.938 46.2092 li
592.973 46.2282 li
593.004 46.2482 li
593.039 46.2672 li
593.117 46.2992 li
593.156 46.3182 li
593.242 46.3492 li
593.285 46.3612 li
593.336 46.3772 li
593.387 46.3882 li
593.438 46.4042 li
593.492 46.4122 li
593.547 46.4242 li
593.602 46.4312 li
593.664 46.4432 li
593.727 46.4472 li
593.789 46.4552 li
593.855 46.4632 li
593.996 46.4702 li
594.07 46.4702 li
594.148 46.4742 li
595.012 46.4742 li
595.34 46.4742 595.535 46.4742 595.535 46.0802 cv
595.535 45.7052 595.328 45.7052 595.109 45.7052 cv
594.113 45.6892 594.113 45.4702 594.113 45.0952 cv
594.113 41.5762 li
594.113 40.1152 592.945 39.0522 590.504 39.0522 cv
589.574 39.0522 587.578 39.1152 587.578 40.5602 cv
587.578 41.2792 588.145 41.5922 588.586 41.5922 cv
589.098 41.5922 589.617 41.2482 589.617 40.5602 cv
589.617 40.0682 589.313 39.7872 589.262 39.7562 cv
589.719 39.6582 590.242 39.6382 590.441 39.6382 cv
591.672 39.6382 592.242 40.3262 592.242 41.5762 cv
592.242 44.1972 li
592.242 45.7712 590.734 45.9822 590.324 45.9822 cv
589.492 45.9822 588.832 45.4122 588.832 44.6852 cv
588.832 42.9202 591.426 42.6892 592.242 42.6382 cv
592.242 42.1312 li
591.078 42.1812 586.918 42.3262 586.918 44.7092 cv
586.918 46.2792 588.949 46.5722 590.078 46.5722 cv
591.391 46.5722 592.16 45.9002 592.523 45.2132 cv
cp
f
597.238 39.9672 mo
597.238 44.4632 li
597.238 46.2132 598.664 46.5722 599.828 46.5722 cv
601.078 46.5722 601.809 45.6342 601.809 44.4432 cv
601.809 43.5762 li
601.039 43.5762 li
601.039 44.4082 li
601.039 45.5252 600.516 45.9202 600.059 45.9202 cv
599.105 45.9202 599.105 44.8732 599.105 44.4902 cv
599.105 39.9672 li
601.496 39.9672 li
601.496 39.1972 li
599.105 39.1972 li
599.105 36.0682 li
598.336 36.0682 li
598.32 37.7052 597.52 39.3302 595.895 39.3772 cv
595.895 39.9672 li
cp
f
606.559 39.0992 mo
603.707 39.2362 li
603.707 40.0062 li
604.684 40.0062 604.793 40.0062 604.793 40.6422 cv
604.793 45.7052 li
603.66 45.7052 li
603.66 46.4742 li
604.172 46.4592 604.973 46.4242 605.66 46.4242 cv
606.156 46.4242 606.988 46.4592 607.578 46.4742 cv
607.578 45.7052 li
606.559 45.7052 li
cp
f
606.723 36.3652 mo
606.723 36.2992 li
606.719 36.2322 li
606.711 36.1662 li
606.699 36.1032 li
606.684 36.0412 li
606.664 35.9782 li
606.645 35.9202 li
606.598 35.8022 li
606.535 35.6932 li
606.504 35.6422 li
606.465 35.5922 li
606.43 35.5452 li
606.344 35.4512 li
606.301 35.4122 li
606.254 35.3732 li
606.203 35.3342 li
606.152 35.2992 li
606.102 35.2672 li
606.047 35.2362 li
605.996 35.2092 li
605.934 35.1812 li
605.879 35.1622 li
605.82 35.1422 li
605.762 35.1272 li
605.699 35.1112 li
605.637 35.0992 li
605.574 35.0922 li
605.512 35.0882 li
605.445 35.0882 li
604.742 35.0882 604.172 35.6622 604.172 36.3652 cv
604.172 37.0682 604.742 37.6382 605.445 37.6382 cv
606.137 37.6382 606.723 37.0842 606.723 36.3652 cv
cp
f
617.02 42.9042 mo
617.016 42.6972 li
617.004 42.4982 li
616.98 42.2992 li
616.953 42.1072 li
616.914 41.9202 li
616.867 41.7322 li
616.809 41.5492 li
616.746 41.3772 li
616.672 41.2052 li
616.59 41.0372 li
616.5 40.8772 li
616.406 40.7202 li
616.301 40.5682 li
616.184 40.4242 li
616.063 40.2872 li
615.934 40.1542 li
615.797 40.0292 li
615.652 39.9082 li
615.5 39.7992 li
615.34 39.6932 li
615.172 39.5922 li
614.996 39.5062 li
614.813 39.4242 li
614.621 39.3452 li
614.426 39.2752 li
614.223 39.2202 li
614.012 39.1702 li
613.789 39.1312 li
613.563 39.0952 li
613.328 39.0722 li
613.09 39.0562 li
612.844 39.0522 li
612.844 39.6382 li
613.535 39.6382 614.223 39.9002 614.578 40.4782 cv
614.926 41.0292 614.926 41.9352 614.926 42.7202 cv
614.926 44.1462 614.926 45.9202 612.844 45.9202 cv
610.762 45.9202 610.762 44.1462 610.762 42.7202 cv
610.762 41.9822 610.762 41.1502 611.039 40.5922 cv
611.352 39.9862 612.039 39.6382 612.844 39.6382 cv
612.844 39.0522 li
610.156 39.0522 608.664 40.7242 608.664 42.9042 cv
608.664 44.9312 610.109 46.5722 612.844 46.5722 cv
615.602 46.5722 617.02 44.9202 617.02 42.9042 cv
cp
f
619.441 40.6422 mo
619.441 45.7052 li
618.309 45.7052 li
618.309 46.4742 li
618.77 46.4592 619.754 46.4242 620.375 46.4242 cv
621.016 46.4242 621.984 46.4592 622.441 46.4742 cv
622.441 45.7052 li
621.309 45.7052 li
621.309 42.2792 li
621.309 40.4902 622.719 39.6932 623.754 39.6932 cv
624.313 39.6932 624.652 40.0332 624.652 41.2792 cv
624.652 45.7052 li
623.52 45.7052 li
623.52 46.4742 li
623.984 46.4592 624.965 46.4242 625.586 46.4242 cv
626.23 46.4242 627.195 46.4592 627.652 46.4742 cv
627.652 45.7052 li
626.523 45.7052 li
626.523 41.4592 li
626.523 39.7362 625.641 39.0992 624 39.0992 cv
622.426 39.0992 621.559 40.0332 621.133 40.8732 cv
621.133 39.0992 li
618.309 39.2362 li
618.309 40.0062 li
619.328 40.0062 619.441 40.0062 619.441 40.6422 cv
cp
f
643.191 42.9042 mo
643.188 42.6972 li
643.176 42.4982 li
643.152 42.2992 li
643.125 42.1072 li
643.039 41.7322 li
642.98 41.5492 li
642.914 41.3772 li
642.844 41.2052 li
642.762 41.0372 li
642.672 40.8772 li
642.578 40.7202 li
642.473 40.5682 li
642.355 40.4242 li
642.234 40.2872 li
642.105 40.1542 li
641.969 40.0292 li
641.824 39.9082 li
641.672 39.7992 li
641.512 39.6932 li
641.344 39.5922 li
641.168 39.5062 li
640.984 39.4242 li
640.793 39.3452 li
640.598 39.2752 li
640.395 39.2202 li
640.18 39.1702 li
639.961 39.1312 li
639.734 39.0952 li
639.5 39.0722 li
639.262 39.0562 li
639.016 39.0522 li
639.016 39.6382 li
639.703 39.6382 640.395 39.9002 640.75 40.4782 cv
641.098 41.0292 641.098 41.9352 641.098 42.7202 cv
641.098 44.1462 641.098 45.9202 639.016 45.9202 cv
636.934 45.9202 636.934 44.1462 636.934 42.7202 cv
636.934 41.9822 636.934 41.1502 637.207 40.5922 cv
637.523 39.9862 638.211 39.6382 639.016 39.6382 cv
639.016 39.0522 li
636.328 39.0522 634.836 40.7242 634.836 42.9042 cv
634.836 44.9312 636.281 46.5722 639.016 46.5722 cv
641.77 46.5722 643.191 44.9202 643.191 42.9042 cv
cp
f
645.664 39.1972 mo
644.438 39.1972 li
644.438 39.9672 li
645.664 39.9672 li
645.664 45.7052 li
644.531 45.7052 li
644.531 46.4742 li
645.105 46.4592 645.844 46.4242 646.602 46.4242 cv
647.219 46.4242 648.27 46.4242 648.859 46.4742 cv
648.859 45.7052 li
647.434 45.7052 li
647.434 39.9672 li
649.316 39.9672 li
649.316 39.1972 li
647.332 39.1972 li
647.332 37.5412 li
647.332 35.7362 648.582 35.5922 648.988 35.5922 cv
649.07 35.5922 649.152 35.5922 649.27 35.6272 cv
649.023 35.8022 648.891 36.1192 648.891 36.4242 cv
648.891 37.1342 649.465 37.4432 649.895 37.4432 cv
650.383 37.4432 650.906 37.0992 650.906 36.4242 cv
650.906 35.7362 650.32 35.0062 649.039 35.0062 cv
647.434 35.0062 645.664 35.6932 645.664 37.5412 cv
cp
f
657.43 39.9672 mo
657.43 44.4632 li
657.43 46.2132 658.859 46.5722 660.02 46.5722 cv
661.27 46.5722 662.004 45.6342 662.004 44.4432 cv
662.004 43.5762 li
661.234 43.5762 li
661.234 44.4082 li
661.234 45.5252 660.707 45.9202 660.25 45.9202 cv
659.301 45.9202 659.301 44.8732 659.301 44.4902 cv
659.301 39.9672 li
661.691 39.9672 li
661.691 39.1972 li
659.301 39.1972 li
659.301 36.0682 li
658.531 36.0682 li
658.516 37.7052 657.711 39.3302 656.09 39.3772 cv
656.09 39.9672 li
cp
f
664.953 45.7052 mo
663.82 45.7052 li
663.82 46.4742 li
664.285 46.4592 665.266 46.4242 665.887 46.4242 cv
666.527 46.4242 667.496 46.4592 667.953 46.4742 cv
667.953 45.7052 li
666.824 45.7052 li
666.824 42.2792 li
666.824 40.4902 668.23 39.6932 669.266 39.6932 cv
669.824 39.6932 670.164 40.0332 670.164 41.2792 cv
670.164 45.7052 li
669.031 45.7052 li
669.031 46.4742 li
669.496 46.4592 670.477 46.4242 671.102 46.4242 cv
671.742 46.4242 672.711 46.4592 673.168 46.4742 cv
673.168 45.7052 li
672.035 45.7052 li
672.035 41.4592 li
672.035 39.7362 671.148 39.0992 669.512 39.0992 cv
667.938 39.0992 667.102 40.0492 666.727 40.7092 cv
666.727 35.0992 li
663.82 35.2362 li
663.82 36.0062 li
664.836 36.0062 664.953 36.0062 664.953 36.6422 cv
cp
f
681.117 42.9042 mo
681.273 42.9042 li
681.297 42.9002 li
681.324 42.9002 li
681.352 42.8962 li
681.398 42.8882 li
681.418 42.8842 li
681.441 42.8812 li
681.48 42.8652 li
681.496 42.8572 li
681.516 42.8452 li
681.527 42.8382 li
681.543 42.8222 li
681.559 42.8102 li
681.582 42.7792 li
681.59 42.7562 li
681.598 42.7482 li
681.602 42.7362 li
681.605 42.7282 li
681.617 42.6932 li
681.621 42.6772 li
681.629 42.6542 li
681.629 42.6232 li
681.633 42.6072 li
681.633 42.5922 li
681.637 42.5722 li
681.637 42.5562 li
681.641 42.5372 li
681.641 42.4632 li
681.641 41.9512 681.543 40.7562 680.727 39.9392 cv
680.121 39.3452 679.254 39.0522 678.121 39.0522 cv
675.492 39.0522 674.07 40.7362 674.07 42.7912 cv
674.07 44.9862 675.711 46.5722 678.348 46.5722 cv
680.938 46.5722 681.641 44.8382 681.641 44.5562 cv
681.641 44.2632 681.332 44.2632 681.25 44.2632 cv
680.969 44.2632 680.938 44.3422 680.836 44.6112 cv
680.496 45.3962 679.559 45.9202 678.496 45.9202 cv
676.184 45.9202 676.168 43.7402 676.168 42.9042 cv
676.168 42.3612 li
676.203 41.7202 676.219 41.0292 676.563 40.4902 cv
676.988 39.8382 677.645 39.6382 678.121 39.6382 cv
680.039 39.6382 680.066 41.7872 680.086 42.3612 cv
676.168 42.3612 li
676.168 42.9042 li
cp
f
690.383 39.1972 mo
689.156 39.1972 li
689.156 39.9672 li
690.383 39.9672 li
690.383 45.7052 li
689.254 45.7052 li
689.254 46.4742 li
689.828 46.4592 690.566 46.4242 691.316 46.4242 cv
691.941 46.4242 692.988 46.4242 693.582 46.4742 cv
693.582 45.7052 li
692.152 45.7052 li
692.152 39.9672 li
694.039 39.9672 li
694.039 39.1972 li
692.055 39.1972 li
692.055 37.5412 li
692.055 35.7362 693.305 35.5922 693.711 35.5922 cv
693.793 35.5922 693.875 35.5922 693.992 35.6272 cv
693.746 35.8022 693.609 36.1192 693.609 36.4242 cv
693.609 37.1342 694.188 37.4432 694.613 37.4432 cv
695.102 37.4432 695.629 37.0992 695.629 36.4242 cv
695.629 35.7362 695.043 35.0062 693.762 35.0062 cv
692.152 35.0062 690.383 35.6932 690.383 37.5412 cv
cp
f
700.359 45.2132 mo
700.359 45.3102 li
700.363 45.4122 li
700.367 45.4672 li
700.375 45.5172 li
700.379 45.5682 li
700.387 45.6232 li
700.398 45.6742 li
700.414 45.7282 li
700.43 45.7792 li
700.449 45.8342 li
700.504 45.9352 li
700.535 45.9862 li
700.574 46.0332 li
700.617 46.0802 li
700.664 46.1272 li
700.715 46.1702 li
700.746 46.1892 li
700.773 46.2092 li
700.809 46.2282 li
700.84 46.2482 li
700.879 46.2672 li
700.914 46.2832 li
700.953 46.2992 li
700.992 46.3182 li
701.078 46.3492 li
701.125 46.3612 li
701.172 46.3772 li
701.223 46.3882 li
701.273 46.4042 li
701.328 46.4122 li
701.383 46.4242 li
701.441 46.4312 li
701.504 46.4432 li
701.566 46.4472 li
701.691 46.4632 li
701.762 46.4672 li
701.836 46.4702 li
701.906 46.4702 li
701.984 46.4742 li
702.852 46.4742 li
703.18 46.4742 703.375 46.4742 703.375 46.0802 cv
703.375 45.7052 703.164 45.7052 702.945 45.7052 cv
701.949 45.6892 701.949 45.4702 701.949 45.0952 cv
701.949 41.5762 li
701.949 40.1152 700.781 39.0522 698.34 39.0522 cv
697.41 39.0522 695.41 39.1152 695.41 40.5602 cv
695.41 41.2792 695.984 41.5922 696.422 41.5922 cv
696.934 41.5922 697.457 41.2482 697.457 40.5602 cv
697.457 40.0682 697.148 39.7872 697.098 39.7562 cv
697.555 39.6582 698.082 39.6382 698.277 39.6382 cv
699.508 39.6382 700.078 40.3262 700.078 41.5762 cv
700.078 44.1972 li
700.078 45.7712 698.574 45.9822 698.164 45.9822 cv
697.328 45.9822 696.672 45.4122 696.672 44.6852 cv
696.672 42.9202 699.262 42.6892 700.078 42.6382 cv
700.078 42.1312 li
698.918 42.1812 694.754 42.3262 694.754 44.7092 cv
694.754 46.2792 696.785 46.5722 697.918 46.5722 cv
699.234 46.5722 699.996 45.9002 700.359 45.2132 cv
cp
f
707.059 35.0992 mo
704.16 35.2362 li
704.16 36.0062 li
705.176 36.0062 705.289 36.0062 705.289 36.6422 cv
705.289 45.7052 li
704.16 45.7052 li
704.16 46.4742 li
704.684 46.4592 705.469 46.4242 706.172 46.4242 cv
706.879 46.4242 707.633 46.4592 708.188 46.4742 cv
708.188 45.7052 li
707.059 45.7052 li
cp
f
712.309 35.0992 mo
709.406 35.2362 li
709.406 36.0062 li
710.426 36.0062 710.539 36.0062 710.539 36.6422 cv
710.539 45.7052 li
709.406 45.7052 li
709.406 46.4742 li
709.934 46.4592 710.719 46.4242 711.422 46.4242 cv
712.129 46.4242 712.883 46.4592 713.438 46.4742 cv
713.438 45.7052 li
712.309 45.7052 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/BRVEJE+Verdana*1 uf
/BRVEJE+Verdana uf
/PBAAAA+Verdana uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
