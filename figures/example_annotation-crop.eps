%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: example_annotation-crop.pdf
%%Creator: Adobe Acrobat 10.1.14
%%For: ds
%%CreationDate: 6/30/2015, 8:03:42 AM
%%BoundingBox: 0 0 887 469
%%HiResBoundingBox: 0 0 887 469
%%CropBox: 0 0 887 469
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 759 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2015-06-23T16:57:46-04:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2015-06-23T16:57:46-04:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1"
   pdf:Producer="pdfTeX-1.40.14"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -469 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 469 li
887 469 li
887 0 li
cp
clp
-111 -37.2 mo
981.801 -37.2 li
981.801 513.999 li
-111 513.999 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
-111 -37.2 mo
981.801 -37.2 li
981.801 513.999 li
-111 513.999 li
cp
f
31.398 4.40201 mo
877.8 4.40201 li
877.8 453.199 li
31.398 453.199 li
cp
f
.8 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
31.398 453.198 mo
877.801 453.198 li
0 0 0 .944213 cmyk
@
31.398 4.40201 mo
877.801 4.40201 li
@
31.398 453.198 mo
31.398 444.738 li
@
116.039 453.198 mo
116.039 444.738 li
@
200.68 453.198 mo
200.68 444.738 li
@
285.32 453.198 mo
285.32 444.738 li
@
369.961 453.198 mo
369.961 444.738 li
@
454.602 453.198 mo
454.602 444.738 li
@
539.238 453.198 mo
539.238 444.738 li
@
623.879 453.198 mo
623.879 444.738 li
@
708.52 453.198 mo
708.52 444.738 li
@
793.16 453.198 mo
793.16 444.738 li
@
877.801 453.198 mo
877.801 444.738 li
@
31.398 4.40201 mo
31.398 12.862 li
@
116.039 4.40201 mo
116.039 12.862 li
@
200.68 4.40201 mo
200.68 12.862 li
@
285.32 4.40201 mo
285.32 12.862 li
@
369.961 4.40201 mo
369.961 12.862 li
@
454.602 4.40201 mo
454.602 12.862 li
@
539.238 4.40201 mo
539.238 12.862 li
@
623.879 4.40201 mo
623.879 12.862 li
@
708.52 4.40201 mo
708.52 12.862 li
@
793.16 4.40201 mo
793.16 12.862 li
@
877.801 4.40201 mo
877.801 12.862 li
@
%ADOBeginSubsetFont: PBAAAA+DejaVuSans Initial
ct_T42Dict begin
-1.02 -0.414 1.68 1.164
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+DejaVuSans
Type42DictBegin
[<00010000000a000a000a000a6376742000691d39000000ac000001fe6670
676d7134766a000002ac000000ab676c796645a844b200000988000004f0
68656164026638f70000035800000036686865610cb8065a000003900000
0024686d747828c50541000003b4000000246c6f6361000019b8000003d8
000000286d617870047606710000040000000020707265703b07f1000000
04200000056867646972000000000000000000000000013500b800cb00cb
00c100aa009c01a600b800660000007100cb00a002b20085007500b800c3
01cb0189022d00cb00a600f000d300aa008700cb03aa0400014a003300cb
000000d9050200f4015400b4009c01390114013907060400044e04b40452
04b804e704cd0037047304cd04600473013303a2055605a60556053903c5
021200c9001f00b801df007300ba03e9033303bc0444040e00df03cd03aa
00e503aa0404000000cb008f00a4007b00b80014016f007f027b0252008f
00c705cd009a009a006f00cb00cd019e01d300f000ba018300d500980304
0248009e01d500c100cb00f600830354027f00000333026600d300c700a4
00cd008f009a0073040005d5010a00fe022b00a400b4009c00000062009c
0000001d032d05d505d505d505f0007f007b005400a406b80614072301d3
00b800cb00a601c301ec069300a000d3035c037103db0185042304a80448
008f0139011401390360008f05d5019a0614072306660179046004600460
047b009c00000277046001aa00e904600762007b00c5007f027b000000b4
025205cd006600bc00660077061000cd013b01850389008f007b0000001d
00cd074a042f009c009c0000077d006f0000006f0335006a006f007b00ae
00b2002d0396008f027b00f600830354063705f6008f009c04e10266008f
018d02f600cd03440029006604ee00730000140000960000b70706050403
0201002c2010b002254964b040515820c859212d2cb002254964b0405158
20c859212d2c20100720b00050b00d7920b8ffff5058041b0559b0051cb0
032508b0042523e120b00050b00d7920b8ffff5058041b0559b0051cb003
2508e12d2c4b505820b0fd454459212d2cb002254560442d2c4b5358b002
25b0022545445921212d2c45442d2cb00225b0022549b00525b005254960
b0206368208a108a233a8a10653a2d00000100000002570a86277a745f0f
3cf5001f080000000000cef5cb7600000000cef5cb76f7d6fcae0d720955
00000008000000010000000000010000076dfe1d00000de2f7d6fa510d72
00010000000000000000000000000000000904cd0066051700870517009e
051700e1051700960517009c0517006402e30064028b00db000000000000
0044000000c800000188000001f8000002f8000003e00000049c000004c8
000004f00001000000090354002b0068000c000200100099000800000415
021600080004b8028040fffbfe03fa1403f92503f83203f79603f60e03f5
fe03f4fe03f32503f20e03f19603f02503ef8a4105effe03ee9603ed9603
ecfa03ebfa03eafe03e93a03e84203e7fe03e63203e5e45305e59603e48a
4105e45303e3e22f05e3fa03e22f03e1fe03e0fe03df3203de1403dd9603
dcfe03db1203da7d03d9bb03d8fe03d68a4105d67d03d5d44705d57d03d4
4703d3d21b05d3fe03d21b03d1fe03d0fe03cffe03cefe03cd9603cccb1e
05ccfe03cb1e03ca3203c9fe03c6851105c61c03c51603c4fe03c3fe03c2
fe03c1fe03c0fe03bffe03befe03bdfe03bcfe03bbfe03ba1103b9862505
b9fe03b8b7bb05b8fe03b7b65d05b7bb03b78004b6b52505b65d40ff03b6
4004b52503b4fe03b39603b2fe03b1fe03b0fe03affe03ae6403ad0e03ac
ab2505ac6403abaa1205ab2503aa1203a98a4105a9fa03a8fe03a7fe03a6
fe03a51203a4fe03a3a20e05a33203a20e03a16403a08a4105a096039ffe
039e9d0c059efe039d0c039c9b19059c64039b9a10059b19039a1003990a
0398fe0397960d0597fe03960d03958a410595960394930e05942803930e
0392fa039190bb0591fe03908f5d0590bb039080048f8e25058f5d038f40
048e25038dfe038c8b2e058cfe038b2e038a8625058a410389880b058914
03880b03878625058764038685110586250385110384fe038382110583fe
0382110381fe0380fe037ffe0340ff7e7d7d057efe037d7d037c64037b54
15057b25037afe0379fe03780e03770c03760a0375fe0374fa0373fa0372
fa0371fa0370fe036ffe036efe036c21036bfe036a1142056a530369fe03
687d036711420566fe0365fe0364fe0363fe0362fe03613a0360fa035e0c
035dfe035bfe035afe0359580a0559fa03580a035716190557320356fe03
5554150555420354150353011005531803521403514a130551fe03500b03
4ffe034e4d10054efe034d10034cfe034b4a13054bfe034a4910054a1303
491d0d05491003480d0347fe0346960345960344fe0343022d0543fa0342
bb03414b0340fe033ffe033e3d12053e14033d3c0f053d12033c3b0d053c
40ff0f033b0d033afe0339fe033837140538fa033736100537140336350b
05361003350b03341e03330d0332310b0532fe03310b03302f0b05300d03
2f0b032e2d09052e10032d09032c32032b2a25052b64032a2912052a2503
2912032827250528410327250326250b05260f03250b0324fe0323fe0322
0f03210110052112032064031ffa031e1d0d051e64031d0d031c1142051c
fe031bfa031a42031911420519fe031864031716190517fe031601100516
190315fe0314fe0313fe031211420512fe0311022d05114203107d030f64
030efe030d0c16050dfe030c0110050c16030bfe030a100309fe0308022d
0508fe030714030664030401100504fe03401503022d0503fe0302011005
022d0301100300fe0301b80164858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b1d00>
[1265 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 68 1 <00020087ffe3048f05f0000b00170023401306a01200a00c91128c18091c
0f1e031c151b1810fcecf4ec310010e4f4ec10ee30012202111012333212
111002273200111000232200111000028b9c9d9d9c9d9d9d9dfb0109fef7
fbfbfef701090550fecdfeccfecdfecd0133013301340133a0fe73fe86fe
87fe73018d0179017a018d00>PBAAAA+DejaVuSans AddT42Char 
1 392 3 <000100e10000045a05d5000a004040154203a00402a005810700a009081f
061c03001f010b10d44bb00f5458b9000100403859ecc4fcec31002fec32
f4ecd4ec304b5358592201b40f030f04025d3721110535253311211521fe
014afe990165ca014afca4aa047348b848fad5aa0000>PBAAAA+DejaVuSans AddT42Char 
1 504 4 <000100960000044a05f0001c009e4027191a1b03181c1105040011050504
4210a111940da014910400a00200100a02010a1c171003061d10fc4bb015
544bb016545b4bb014545b58b90003ffc03859c4d4ecc0c011123931002f
ec32f4ecf4ec304b5358071005ed0705ed01b01c10111739592201403255
04560556077a047a05761b87190704000419041a041b051c74007606751a
731b741c82008619821a821b821ca800a81b115d005d2521152135360037
3e0135342623220607353e01333204151406070600018902c1fc4c73018d
33614da7865fd3787ad458e80114455b19fef4aaaaaa7701913a6d974977
964243cc3132e8c25ca5701dfeeb0000>PBAAAA+DejaVuSans AddT42Char 
1 760 5 <0001009cffe3047305f000280070402e0015130a86091f862013a0150da0
0993061ca020932391068c15a329161c13000314191c2620101c03141f09
062910fc4bb016544bb014545b58b90009ffc03859c4c4d4ecf4ec111739
39310010ece4f4e4ec10e6ee10ee10ee10ee11123930014009641e611f61
20642104005d011e0115140421222627351e013332363534262b01353332
3635342623220607353e01333204151406033f91a3fed0fee85ec76a54c8
6dbec7b9a5aeb6959ea39853be7273c959e6010c8e03251fc490ddf22525
c33132968f8495a67770737b2426b42020d1b27cab00>PBAAAA+DejaVuSans AddT42Char 
1 992 6 <00020064000004a405d50002000d0081401d010d030d0003030d4200030b
07a00501038109010c0a001c0608040c0e10dc4bb00b544bb00d545b58b9
000cffc03859d43cc4ec32113931002fe4d43cec321239304b5358071004
c9071005c9592201402a0b002a0048005900690077008a000716012b0026
012b0336014e014f0c4f0d5601660175017a0385010d5d005d0901210333
1133152311231121350306fe0201fe35fed5d5c9fd5e0525fce303cdfc33
a8fea00160c30000>PBAAAA+DejaVuSans AddT42Char 
1 200 2 <0001009effe3046405d5001d005e4023041a071186101d1aa00714a01089
0d02a000810d8c07a41e171c010a031c000a10061e10fc014bb016544bb0
14545b58b90010ffc038594bb00f5458b9001000403859c4d4ec10c4ee31
0010e4e4f4ec10e6ee10fec410ee1112393013211521113e013332001514
0021222627351e0133323635342623220607dd0319fda02c582cfa0124fe
d4feef5ec3685ac06badcacaad51a15405d5aafe920f0ffeeeeaf1fef520
20cb3130b69c9cb624260000>PBAAAA+DejaVuSans AddT42Char 
1 0 0 <00020066fe96046605a400030007001a400c04fb0006fb0108057f020400
2fc4d4ec310010d4ecd4ec301311211125211121660400fc73031bfce5fe
96070ef8f2720629>PBAAAA+DejaVuSans AddT42Char 
PBAAAA+DejaVuSans /CharStrings get begin
/zero 1 def
/one 3 def
/two 4 def
/three 5 def
/four 6 def
/five 2 def
end
PBAAAA+DejaVuSans /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
pop
end
%ADOEndSubsetFont
/WIYWCH+DejaVuSans /PBAAAA+DejaVuSans findfont ct_VMDictPut
/WIYWCH+DejaVuSans*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
WIYWCH+DejaVuSans nf
WIYWCH+DejaVuSans*1 [10.4 0 0 -10.4 0 0 ]msf
27.8 467.867 mo
(050)
[81.4424 6.61441 0 ]xsh
190.68 467.867 mo
(100150)
[6.61441 6.61441 71.4064 6.61441 6.61441 0 ]xsh
359.96 467.867 mo
(200250)
[6.61441 6.61441 71.4064 6.61444 6.61444 0 ]xsh
529.24 467.867 mo
(300350)
[6.61444 6.61438 71.4064 6.61438 6.61444 0 ]xsh
698.52 467.867 mo
(400450)
[6.61444 6.61438 71.4064 6.61438 6.61444 0 ]xsh
867.8 467.867 mo
(500)
[6.61444 6.61438 0 ]xsh
31.398 453.198 mo
31.398 4.40201 li
@
877.801 453.198 mo
877.801 4.40201 li
@
31.398 453.198 mo
39.863 453.198 li
@
31.398 363.441 mo
39.863 363.441 li
@
31.398 273.679 mo
39.863 273.679 li
@
31.398 183.921 mo
39.863 183.921 li
@
31.398 94.159 mo
39.863 94.159 li
@
31.398 4.40201 mo
39.863 4.40201 li
@
877.801 453.198 mo
869.336 453.198 li
@
877.801 363.441 mo
869.336 363.441 li
@
877.801 273.679 mo
869.336 273.679 li
@
877.801 183.921 mo
869.336 183.921 li
@
877.801 94.159 mo
869.336 94.159 li
@
877.801 4.40201 mo
869.336 4.40201 li
@
%ADOBeginSubsetFont: PBAAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WIYWCH+DejaVuSans gcheck setglobal} if
1 1180 7 <0001006401df027f028300030011b6009c020401000410dccc310010d4ec
301321152164021bfde50283a400>WIYWCH+DejaVuSans AddT42Char 
1 1224 8 <000100db000001ae00fe00030011b7008302011900180410fcec31002fec
3037331523dbd3d3fefe>WIYWCH+DejaVuSans AddT42Char 
WIYWCH+DejaVuSans /CharStrings get begin
/hyphen 7 def
/period 8 def
end
WIYWCH+DejaVuSans /Encoding get
dup 45 /hyphen put
dup 46 /period put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WIYWCH+DejaVuSans*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three 
/four /five 202{/.notdef}rp]
WIYWCH+DejaVuSans nf
WIYWCH+DejaVuSans*1 [10.4 0 0 -10.4 0 0 ]msf
-.0666428 456.8 mo
(-0.05)
[3.744 6.61442 3.29681 6.61441 0 ]xsh
19.9333 367.04 mo
(0)sh
3.93334 277.28 mo
(0.05)
[6.61442 3.29681 6.61441 0 ]xsh
10.3333 187.52 mo
(0.1)
[6.61442 3.29681 0 ]xsh
3.93334 97.76 mo
(0.15)
[6.61442 3.29681 6.61441 0 ]xsh
10.3333 8.00006 mo
(0.2)
[6.61442 3.29681 0 ]xsh
0 lc
2 lj
33.094 323.058 mo
34.785 370.218 li
36.477 427.261 li
38.172 393.495 li
39.863 325.179 li
41.559 312.46 li
43.25 390.585 li
44.941 433.999 li
46.637 348.234 li
48.328 303.378 li
50.02 342.398 li
51.715 415.78 li
53.406 430.909 li
55.098 342.273 li
56.793 293.253 li
58.484 335.089 li
60.176 393.609 li
61.871 404.706 li
63.562 360.894 li
65.258 338.054 li
66.949 373.187 li
68.641 402.362 li
70.336 360.148 li
72.027 335.956 li
73.719 362.796 li
75.414 323.515 li
77.105 297.612 li
78.797 355.534 li
80.492 369.394 li
82.184 354.323 li
83.875 337.882 li
85.57 336.511 li
87.262 345.359 li
88.957 346.722 li
90.648 349.659 li
92.34 341.327 li
94.035 341.382 li
95.727 344.066 li
97.418 343.972 li
99.113 344.257 li
102.496 343.273 li
104.191 343.273 li
105.883 342.976 li
107.574 344.273 li
109.27 334.312 li
110.961 329.48 li
112.656 362.804 li
114.348 409.05 li
116.039 405.527 li
.875212 .526726 .00314336 .000793469 cmyk
@
116.039 405.527 mo
117.734 339.452 li
119.426 317.913 li
121.117 368.73 li
122.812 408.073 li
124.504 405.206 li
126.195 347.89 li
127.891 320.374 li
129.582 366.663 li
131.273 414.921 li
132.969 413.058 li
134.66 345.089 li
136.355 319.952 li
138.047 354.757 li
139.738 405.917 li
141.434 413.941 li
143.125 356.734 li
144.816 336.421 li
146.512 368.468 li
148.203 382.573 li
149.895 367.515 li
151.59 361.698 li
153.281 368.374 li
154.973 327.53 li
156.668 295.816 li
158.359 310.198 li
160.055 331.105 li
161.746 342.968 li
163.438 334.812 li
165.133 339.839 li
166.824 340.784 li
168.516 341.343 li
170.211 343.066 li
171.902 342.663 li
173.594 342.109 li
175.289 343.429 li
176.98 343.542 li
178.672 342.796 li
180.367 342.855 li
182.059 343.073 li
183.754 343.433 li
185.445 343.73 li
187.137 343.292 li
188.832 342.398 li
190.523 337.312 li
192.215 357.78 li
193.91 401.441 li
195.602 396.612 li
197.293 341.624 li
198.988 324.32 li
@
198.988 324.32 mo
200.68 367.331 li
202.371 408.241 li
204.066 390.612 li
205.758 336.866 li
207.453 328.952 li
209.145 370.136 li
210.836 411.284 li
212.531 396.472 li
214.223 335.374 li
215.914 327.804 li
217.609 371.226 li
219.301 398.101 li
220.992 383.862 li
222.688 338.027 li
224.379 333.452 li
226.07 380.503 li
227.766 390.601 li
229.457 369.659 li
231.152 357.683 li
232.844 357.198 li
234.535 386.206 li
236.23 369.679 li
237.922 330.82 li
239.613 352.124 li
241.309 356.773 li
243 329.042 li
244.691 341.335 li
246.387 364.952 li
248.078 354.757 li
249.77 338.441 li
251.465 335.534 li
253.156 340.222 li
254.848 340.847 li
256.543 345.362 li
258.234 352.214 li
259.93 353.03 li
261.621 350.886 li
263.312 348.78 li
265.008 350.355 li
266.699 351.495 li
268.391 349.749 li
270.086 349.788 li
271.777 350.546 li
273.469 349.816 li
275.164 350.034 li
276.855 350.187 li
278.547 349.972 li
280.242 350.362 li
281.934 350.421 li
@
281.934 350.421 mo
283.629 350.464 li
285.32 350.429 li
287.012 349.78 li
288.707 349.581 li
290.398 349.995 li
292.09 350.144 li
293.785 382.679 li
295.477 391.472 li
297.168 349.663 li
298.863 341.464 li
300.555 372.843 li
302.246 391.038 li
303.941 366.698 li
305.633 341.198 li
307.328 348.753 li
309.02 386.152 li
310.711 401.605 li
312.406 369.577 li
314.098 343.327 li
315.789 347.464 li
317.484 381.855 li
319.176 393.366 li
320.867 368.007 li
322.562 358.402 li
324.254 356.292 li
325.945 364.109 li
327.641 356.362 li
329.332 336.792 li
331.027 352.499 li
332.719 361.308 li
334.41 345.609 li
336.105 348.093 li
337.797 361.956 li
339.488 359.921 li
341.184 352.355 li
342.875 354.308 li
344.566 358.695 li
346.262 358.284 li
347.953 357.894 li
349.645 357.991 li
351.34 357.847 li
353.031 357.382 li
354.727 356.902 li
356.418 357.214 li
358.109 356.952 li
359.805 355.433 li
361.496 353.034 li
363.188 353.167 li
364.883 350.081 li
@
364.883 350.081 mo
366.574 338.179 li
368.266 335.183 li
369.961 343.011 li
371.652 342.73 li
373.344 341.698 li
375.039 347.538 li
376.73 355.632 li
378.426 360.257 li
380.117 361.691 li
381.809 376.64 li
383.504 379.874 li
385.195 364.066 li
386.887 359.421 li
388.582 358.288 li
390.273 357.378 li
391.965 358.859 li
393.66 357.648 li
395.352 349.573 li
397.043 358.695 li
398.738 382.566 li
400.43 386.769 li
402.125 356.038 li
403.816 342.034 li
405.508 370.612 li
407.203 393.855 li
408.895 378.011 li
410.586 346.112 li
412.281 347.71 li
413.973 372.101 li
415.664 387.894 li
417.359 372.116 li
419.051 347.57 li
420.742 347.882 li
422.438 375.585 li
424.129 382.097 li
425.824 363.499 li
427.516 362.218 li
429.207 356.015 li
430.902 332.945 li
432.594 328.753 li
434.285 342.757 li
435.98 346.234 li
437.672 337.07 li
439.363 334.726 li
441.059 340.448 li
442.75 338.702 li
444.441 334.523 li
446.137 331.741 li
447.828 332.48 li
@
447.828 332.48 mo
449.523 336.206 li
451.215 337.999 li
452.906 336.905 li
454.602 335.191 li
456.293 334.128 li
457.984 338.82 li
459.68 359.64 li
461.371 385.046 li
463.062 387.253 li
464.758 358.722 li
466.449 341.921 li
468.141 363.796 li
469.836 382.507 li
471.527 377.105 li
473.223 352.073 li
474.914 343.241 li
476.605 365.726 li
478.301 386.195 li
479.992 370.765 li
481.684 340.066 li
483.379 344.183 li
485.07 369.265 li
486.762 386.054 li
488.457 368.612 li
490.148 346.898 li
491.84 353.339 li
493.535 369.183 li
495.227 369.573 li
496.922 361.925 li
498.613 366.773 li
500.305 362.839 li
502 354.148 li
503.691 359.718 li
505.383 348.948 li
507.078 341.441 li
508.77 349.769 li
510.461 350.847 li
512.156 356.261 li
513.848 360.769 li
515.539 361.46 li
517.234 361.62 li
518.926 362.023 li
520.621 362.14 li
522.312 362.288 li
524.004 362.206 li
525.699 362.292 li
527.391 362.304 li
529.082 362.284 li
530.777 362.292 li
@
530.777 362.292 mo
532.469 367.644 li
534.16 374.98 li
535.855 378.37 li
537.547 361.238 li
539.238 346.702 li
540.934 364.839 li
542.625 387.12 li
544.32 377.398 li
546.012 348.171 li
547.703 346.632 li
549.398 370.05 li
551.09 384.62 li
552.781 370.03 li
554.477 350.288 li
556.168 353.734 li
557.859 369.788 li
559.555 369.695 li
561.246 358.695 li
562.938 352.956 li
564.633 357.898 li
566.324 359.78 li
568.02 350.343 li
569.711 346.093 li
571.402 351.909 li
573.098 348.277 li
574.789 341.777 li
576.48 347.366 li
578.176 352.503 li
579.867 353.136 li
581.559 348.417 li
583.254 343.183 li
584.945 346.335 li
586.637 352.984 li
588.332 352.659 li
590.023 351.612 li
591.719 350.253 li
593.41 350.148 li
595.102 351.265 li
596.797 351.495 li
598.488 351.027 li
600.18 350.448 li
601.875 349.706 li
603.566 349.171 li
605.258 349.605 li
606.953 350.245 li
608.645 350.195 li
610.336 349.816 li
612.031 349.304 li
613.723 358.386 li
@
613.723 358.386 mo
615.414 378.573 li
617.109 378.011 li
618.801 356.448 li
620.496 351.327 li
622.188 362.378 li
623.879 375.726 li
625.574 364.624 li
627.266 344.777 li
628.957 351.667 li
630.652 376.527 li
632.344 380.609 li
634.035 360.003 li
635.73 349.116 li
637.422 355.597 li
639.113 373.933 li
640.809 380.491 li
642.5 357.726 li
644.195 345.042 li
645.887 364.128 li
647.578 379.038 li
649.273 373.941 li
650.965 353.152 li
652.656 349.874 li
654.352 368.609 li
656.043 371.269 li
657.734 366.905 li
659.43 364.726 li
661.121 362.382 li
662.812 357.003 li
664.508 351.226 li
666.199 343.566 li
667.895 336.046 li
669.586 343.718 li
671.277 351.527 li
672.973 354.57 li
674.664 353.398 li
676.355 351.456 li
678.051 350.702 li
679.742 350.48 li
681.434 351.077 li
683.129 351.249 li
684.82 351.12 li
686.512 350.495 li
688.207 350.245 li
689.898 350.542 li
691.594 351.007 li
693.285 350.929 li
694.977 350.116 li
696.672 349.843 li
@
696.672 349.843 mo
698.363 350.167 li
700.055 350.527 li
701.75 350.847 li
703.441 350.523 li
705.133 349.988 li
706.828 349.624 li
708.52 349.847 li
710.211 350.456 li
711.906 350.663 li
713.598 350.554 li
715.293 347.202 li
716.984 347.898 li
718.676 357.409 li
720.371 374.019 li
722.062 376.55 li
723.754 359.89 li
725.449 352.82 li
727.141 368.198 li
728.832 384.964 li
730.527 375.175 li
732.219 354.777 li
733.91 351.253 li
735.605 365.14 li
737.297 375.675 li
738.992 366.175 li
740.684 353.234 li
742.375 352.488 li
744.07 368.812 li
745.762 384.066 li
747.453 372.905 li
749.148 353.874 li
750.84 350.585 li
752.531 364.921 li
754.227 377.198 li
755.918 367.015 li
757.609 349.882 li
759.305 351.038 li
760.996 374.218 li
762.691 380.929 li
764.383 363.984 li
766.074 348.855 li
767.77 351.898 li
769.461 375.882 li
771.152 377.128 li
772.848 359.257 li
774.539 352.222 li
776.23 358.179 li
777.926 374.773 li
779.617 380.042 li
@
779.617 380.042 mo
781.309 367.089 li
783.004 353.03 li
784.695 362.609 li
786.391 377.144 li
788.082 372.917 li
789.773 362.671 li
791.469 360.288 li
793.16 371.402 li
794.852 369.347 li
796.547 360.316 li
798.238 355.609 li
799.93 352.019 li
801.625 341.312 li
803.316 339.913 li
805.008 351.206 li
806.703 345.628 li
808.395 344.39 li
810.09 348.8 li
811.781 348.054 li
813.473 350.288 li
815.168 350.886 li
816.859 349.339 li
818.551 348.234 li
820.246 348.839 li
821.938 350.597 li
823.629 350.722 li
825.324 349.773 li
827.016 349.702 li
828.707 350.249 li
830.402 350.273 li
832.094 349.757 li
833.789 349.57 li
835.48 349.683 li
837.172 349.89 li
838.867 350.175 li
840.559 349.722 li
842.25 349.155 li
843.945 349.339 li
845.637 349.765 li
847.328 349.866 li
849.023 349.37 li
850.715 349.163 li
852.406 348.941 li
854.102 348.968 li
855.793 349.542 li
857.488 356.577 li
@
33.094 120.519 mo
34.785 72.155 li
36.477 62.616 li
38.172 84.097 li
39.863 56.269 li
41.559 81.644 li
43.25 105.163 li
44.941 62.925 li
46.637 79.441 li
48.328 83.741 li
50.02 97.23 li
51.715 137.202 li
53.406 107.163 li
55.098 89.722 li
56.793 88.808 li
58.484 79.554 li
60.176 77.816 li
61.871 69.687 li
63.562 82.265 li
65.258 123.605 li
66.949 128.347 li
68.641 96.433 li
70.336 142.972 li
72.027 221.593 li
73.719 275.691 li
75.414 287.253 li
77.105 362.187 li
78.797 399.226 li
80.492 326.612 li
82.184 312.253 li
83.875 308.12 li
85.57 313.179 li
87.262 319.452 li
88.957 314.437 li
90.648 316.933 li
92.34 324.527 li
94.035 326.628 li
95.727 322.648 li
97.418 322.972 li
99.113 322.601 li
100.805 321.179 li
102.496 322.07 li
104.191 322.445 li
105.883 321.964 li
107.574 322.655 li
109.27 272.89 li
110.961 190.835 li
112.656 161.624 li
114.348 162.866 li
116.039 142.991 li
.0951247 .812772 1 .0193484 cmyk
@
116.039 142.991 mo
117.734 139.702 li
119.426 149.46 li
121.117 155.214 li
122.812 165.214 li
124.504 143.589 li
126.195 143.304 li
127.891 157.062 li
129.582 165.347 li
131.273 186.527 li
132.969 177.175 li
134.66 156.64 li
136.355 160.03 li
138.047 161.046 li
139.738 175.425 li
141.434 165.3 li
143.125 158.718 li
144.816 201.995 li
146.512 226.886 li
148.203 203.675 li
149.895 239.093 li
151.59 287.394 li
153.281 274.374 li
154.973 296.542 li
156.668 314.07 li
158.359 330.234 li
160.055 335.757 li
161.746 316.421 li
163.438 335.261 li
165.133 355.323 li
166.824 346.093 li
168.516 339.187 li
170.211 337.589 li
171.902 343.241 li
173.594 347.452 li
175.289 347.112 li
176.98 344.241 li
178.672 342.155 li
180.367 343.468 li
182.059 344.218 li
183.754 343.628 li
185.445 344.058 li
187.137 345.937 li
188.832 348.327 li
190.523 279.019 li
192.215 196.347 li
193.91 199.769 li
195.602 201.015 li
197.293 199.347 li
198.988 206.628 li
@
198.988 206.628 mo
200.68 194.847 li
202.371 200.698 li
204.066 193.562 li
205.758 195.96 li
207.453 212.706 li
209.145 197.952 li
210.836 208.909 li
212.531 206.902 li
214.223 206.132 li
215.914 219.362 li
217.609 203.171 li
219.301 195.593 li
220.992 207.491 li
222.688 217.769 li
224.379 216.605 li
226.07 215.097 li
227.766 213.378 li
229.457 214.636 li
231.152 207.038 li
232.844 208.691 li
234.535 230.171 li
236.23 246.644 li
237.922 301.683 li
239.613 311.456 li
241.309 300.073 li
243 331.089 li
244.691 329.308 li
246.387 320.32 li
248.078 312.765 li
249.77 328.89 li
251.465 353.515 li
253.156 359.905 li
254.848 356.523 li
256.543 346.089 li
258.234 340.124 li
259.93 345.249 li
261.621 353.027 li
263.312 357.714 li
265.008 354.679 li
266.699 352.089 li
268.391 355.417 li
270.086 356.343 li
271.777 355.503 li
273.469 355.226 li
275.164 355.468 li
276.855 355.726 li
278.547 356.249 li
280.242 356.222 li
281.934 356.081 li
@
281.934 356.081 mo
283.629 356.191 li
285.32 355.921 li
287.012 355.648 li
288.707 355.988 li
290.398 355.851 li
292.09 356.12 li
293.785 291.253 li
295.477 246.597 li
297.168 251.503 li
298.863 244.78 li
300.555 259.585 li
302.246 245.593 li
303.941 238.148 li
305.633 236.823 li
307.328 230.913 li
309.02 245.257 li
310.711 244.484 li
312.406 240.062 li
314.098 231.612 li
315.789 239.206 li
317.484 243.347 li
319.176 247.226 li
320.867 266.21 li
322.562 259.042 li
324.254 268.202 li
325.945 277.753 li
327.641 294.019 li
329.332 321.136 li
331.027 321.3 li
332.719 322.429 li
334.41 339.07 li
336.105 347.042 li
337.797 337.878 li
339.488 339.874 li
341.184 351.284 li
342.875 354.652 li
344.566 356.218 li
346.262 358.327 li
347.953 357.847 li
349.645 357.905 li
351.34 357.519 li
353.031 357.441 li
354.727 357.937 li
356.418 358.765 li
358.109 359.187 li
359.805 357.796 li
361.496 352.605 li
363.188 347.948 li
364.883 350.386 li
@
364.883 350.386 mo
366.574 347.175 li
368.266 334.991 li
369.961 317.687 li
371.652 295.105 li
373.344 277.304 li
375.039 266.327 li
376.73 258.96 li
378.426 253.558 li
380.117 248.644 li
381.809 248.417 li
383.504 251.351 li
385.195 253.55 li
386.887 255.62 li
388.582 255.683 li
390.273 255.816 li
391.965 255.644 li
393.66 255.378 li
395.352 254.984 li
397.043 259.753 li
398.738 273.695 li
400.43 264.581 li
402.125 262.702 li
403.816 271.777 li
405.508 264.37 li
407.203 255.284 li
408.895 250.796 li
410.586 262.007 li
412.281 266.624 li
413.973 263.261 li
415.664 263.784 li
417.359 257.277 li
419.051 256.366 li
420.742 262.245 li
422.438 270.085 li
424.129 281.933 li
425.824 292.749 li
427.516 298.984 li
429.207 321.32 li
430.902 344.882 li
432.594 337.085 li
434.285 335.945 li
435.98 338.226 li
437.672 339.331 li
439.363 344.198 li
441.059 343.894 li
442.75 351.777 li
444.441 360.296 li
446.137 359.085 li
447.828 354.183 li
@
447.828 354.183 mo
449.523 349.952 li
451.215 348.413 li
452.906 351.163 li
454.602 354.82 li
456.293 355.796 li
457.984 339.144 li
459.68 293.952 li
461.371 267.32 li
463.062 264.765 li
464.758 260.23 li
466.449 269.124 li
468.141 267.82 li
469.836 272.402 li
471.527 261.82 li
473.223 260.96 li
474.914 283.007 li
476.605 270.609 li
478.301 263.566 li
479.992 257.976 li
481.684 270.804 li
483.379 282.749 li
485.07 267.609 li
486.762 265.07 li
488.457 267.07 li
490.148 272.175 li
491.84 274.257 li
493.535 268.097 li
495.227 272.605 li
496.922 297.761 li
498.613 308.132 li
500.305 326.402 li
502 333.359 li
503.691 329.62 li
505.383 348.48 li
507.078 348.937 li
508.77 374.96 li
510.461 382.859 li
512.156 360.421 li
513.848 358.89 li
515.539 359.171 li
517.234 359.265 li
518.926 359.011 li
520.621 359.085 li
522.312 359.206 li
524.004 359.105 li
525.699 358.859 li
527.391 358.964 li
529.082 358.999 li
530.777 358.788 li
@
530.777 358.788 mo
532.469 355.495 li
534.16 317.706 li
535.855 284.148 li
537.547 279.87 li
539.238 277.718 li
540.934 279.273 li
542.625 282.589 li
544.32 265.566 li
546.012 268.355 li
547.703 287.167 li
549.398 281.566 li
551.09 282.601 li
552.781 274.234 li
554.477 271.87 li
556.168 283.097 li
557.859 282.374 li
559.555 276.87 li
561.246 292.116 li
562.938 311.249 li
564.633 322.015 li
566.324 329.218 li
568.02 326.073 li
569.711 336.101 li
571.402 340.823 li
573.098 338.984 li
574.789 350.448 li
576.48 351.562 li
578.176 349.28 li
579.867 350.612 li
581.559 358.886 li
583.254 366.503 li
584.945 360.355 li
586.637 353.347 li
588.332 352.347 li
590.023 355.585 li
591.719 358.355 li
593.41 357.792 li
595.102 356.144 li
596.797 355.921 li
598.488 357.109 li
600.18 358.105 li
601.875 359.241 li
603.566 360.433 li
605.258 359.581 li
606.953 357.667 li
608.645 357.581 li
610.336 358.761 li
612.031 359.792 li
613.723 345.851 li
@
613.723 345.851 mo
615.414 305.214 li
617.109 279.144 li
618.801 284.87 li
620.496 290.573 li
622.188 295.46 li
623.879 293.429 li
625.574 292.015 li
627.266 290.898 li
628.957 285.878 li
630.652 280.577 li
632.344 279.905 li
634.035 294.648 li
635.73 294.198 li
637.422 284.484 li
639.113 288.105 li
640.809 291.277 li
642.5 290.745 li
644.195 288.878 li
645.887 287.089 li
647.578 290.769 li
649.273 278.441 li
650.965 275.491 li
652.656 290.316 li
654.352 301.273 li
656.043 299.081 li
657.734 301.945 li
659.43 314.53 li
661.121 321.472 li
662.812 336.784 li
664.508 345.687 li
666.199 344.605 li
667.895 356.753 li
669.586 362.394 li
671.277 350.409 li
672.973 347.8 li
674.664 349.112 li
676.355 350.409 li
678.051 352.238 li
679.742 353.327 li
681.434 352.609 li
683.129 352.226 li
684.82 352.976 li
686.512 354.179 li
688.207 354.612 li
689.898 354.448 li
691.594 353.659 li
693.285 353.659 li
694.977 354.984 li
696.672 355.394 li
@
696.672 355.394 mo
698.363 355.03 li
700.055 354.573 li
701.75 354.327 li
703.441 354.523 li
705.133 355.667 li
706.828 356.652 li
708.52 356.112 li
710.211 355.21 li
711.906 354.792 li
713.598 355.066 li
715.293 340.132 li
716.984 310.769 li
718.676 299.945 li
720.371 300.788 li
722.062 296.562 li
723.754 297.988 li
725.449 297.792 li
727.141 300.902 li
728.832 299.167 li
730.527 288.101 li
732.219 293.468 li
733.91 307.023 li
735.605 302.773 li
737.297 296.37 li
738.992 295.683 li
740.684 295.116 li
742.375 305.105 li
744.07 301.589 li
745.762 292.05 li
747.453 296.042 li
749.148 300.198 li
750.84 304.695 li
752.531 297.245 li
754.227 290.874 li
755.918 297.163 li
757.609 299.554 li
759.305 295.269 li
760.996 296.054 li
762.691 300.245 li
764.383 298.605 li
766.074 301.89 li
767.77 300.191 li
769.461 297.628 li
771.152 294.698 li
772.848 294.366 li
774.539 298.55 li
776.23 301.128 li
777.926 307.456 li
779.617 308.007 li
@
779.617 308.007 mo
781.309 304.652 li
783.004 300.952 li
784.695 301.077 li
786.391 301.362 li
788.082 298.769 li
789.773 301.175 li
791.469 300.761 li
793.16 308.573 li
794.852 308.382 li
796.547 319.312 li
798.238 339.71 li
799.93 340.718 li
801.625 346.167 li
803.316 355.675 li
805.008 352.503 li
806.703 344.702 li
808.395 353.933 li
810.09 361.464 li
811.781 358.155 li
813.473 353.577 li
815.168 353.913 li
816.859 356.644 li
818.551 358.148 li
820.246 357.402 li
821.938 355.534 li
823.629 355.558 li
825.324 356.82 li
827.016 356.894 li
828.707 356.234 li
830.402 356.409 li
832.094 356.941 li
833.789 357.159 li
835.48 357.144 li
837.172 356.823 li
838.867 356.632 li
840.559 356.96 li
842.25 357.546 li
843.945 357.64 li
845.637 357.484 li
847.328 357.71 li
849.023 358.07 li
850.715 358.476 li
852.406 358.636 li
854.102 358.445 li
855.793 358.089 li
857.488 360.636 li
@
33.094 314.374 mo
34.785 404.163 li
36.477 407.269 li
38.172 366.226 li
39.863 370.671 li
41.559 406.347 li
43.25 430.32 li
44.941 425.468 li
46.637 427.405 li
48.328 411.515 li
50.02 390.308 li
51.715 419.429 li
53.406 408.202 li
55.098 399.945 li
56.793 404.89 li
58.484 384.39 li
60.176 415.57 li
61.871 444.261 li
63.562 415.894 li
65.258 368.109 li
66.949 328.749 li
68.641 301.011 li
70.336 257.687 li
72.027 179.57 li
73.719 148.585 li
75.414 96.331 li
77.105 49.999 li
78.797 123.249 li
80.492 170.097 li
82.184 151.933 li
83.875 115.948 li
85.57 104.14 li
87.262 127.488 li
88.957 139.585 li
90.648 137.046 li
92.34 129.605 li
94.035 129.675 li
95.727 137.659 li
97.418 139.503 li
99.113 139.679 li
100.805 142.542 li
102.496 143.331 li
104.191 144.488 li
105.883 146.054 li
107.574 146.519 li
109.27 215.952 li
110.961 324.96 li
112.656 378.445 li
114.348 398.386 li
116.039 383.144 li
.0729076 .314366 1 0 cmyk
@
116.039 383.144 mo
117.734 361.265 li
119.426 364.206 li
121.117 370.909 li
122.812 387.831 li
124.504 392.409 li
126.195 377.589 li
127.891 365.913 li
129.582 375.304 li
131.273 396.956 li
132.969 393.183 li
134.66 375.644 li
136.355 377.667 li
138.047 390.245 li
139.738 418.37 li
141.434 427.214 li
143.125 408.144 li
144.816 384.093 li
146.512 343.601 li
148.203 293.152 li
149.895 242.632 li
151.59 219.077 li
153.281 206.472 li
154.973 187.14 li
156.668 165.55 li
158.359 166.695 li
160.055 190.945 li
161.746 194.027 li
163.438 183.749 li
165.133 177.851 li
166.824 181.374 li
168.516 189.73 li
170.211 190.468 li
171.902 188.988 li
173.594 187.405 li
175.289 187.554 li
176.98 190.116 li
178.672 192.956 li
180.367 193.331 li
182.059 193.402 li
183.754 195.093 li
185.445 196.53 li
187.137 196.534 li
188.832 195.53 li
190.523 291.398 li
192.215 372.484 li
193.91 380.222 li
195.602 387.87 li
197.293 382.437 li
198.988 376.73 li
@
198.988 376.73 mo
200.68 376.558 li
202.371 396.902 li
204.066 389.671 li
205.758 385.468 li
207.453 380.402 li
209.145 372.913 li
210.836 390.37 li
212.531 385.675 li
214.223 382.159 li
215.914 381.14 li
217.609 384.409 li
219.301 388.964 li
220.992 384.312 li
222.688 389.327 li
224.379 377.601 li
226.07 394.612 li
227.766 419.019 li
229.457 403.093 li
231.152 368.882 li
232.844 341.988 li
234.535 328.624 li
236.23 308.921 li
237.922 270.128 li
239.613 227.999 li
241.309 219.441 li
243 214.562 li
244.691 207.55 li
246.387 229.64 li
248.078 236.386 li
249.77 217.855 li
251.465 208.667 li
253.156 210.284 li
254.848 220.386 li
256.543 229.28 li
258.234 228.519 li
259.93 224.734 li
261.621 222.316 li
263.312 222.835 li
265.008 226.288 li
266.699 227.015 li
268.391 225.765 li
270.086 227.112 li
271.777 227.562 li
273.469 227.902 li
275.164 228.976 li
276.855 229.437 li
278.547 230.046 li
280.242 230.698 li
281.934 231.034 li
@
281.934 231.034 mo
283.629 231.609 li
285.32 231.956 li
287.012 232.683 li
288.707 233.374 li
290.398 233.495 li
292.09 233.8 li
293.785 303.882 li
295.477 382.296 li
297.168 380.757 li
298.863 367.507 li
300.555 375.511 li
302.246 374.917 li
303.941 363.038 li
305.633 361.718 li
307.328 366.003 li
309.02 386.105 li
310.711 385.972 li
312.406 381.734 li
314.098 377.468 li
315.789 386.968 li
317.484 409.968 li
319.176 386.109 li
320.867 350.128 li
322.562 333.749 li
324.254 318.132 li
325.945 302.616 li
327.641 269.87 li
329.332 235.749 li
331.027 253.8 li
332.719 262.562 li
334.41 235.019 li
336.105 231.468 li
337.797 247.855 li
339.488 243.609 li
341.184 236.765 li
342.875 244.976 li
344.566 248.425 li
346.262 247.124 li
347.953 247.855 li
349.645 248.491 li
351.34 248.234 li
353.031 248.523 li
354.727 248.87 li
356.418 247.999 li
358.109 247.534 li
359.805 248.495 li
361.496 251.433 li
363.188 247.288 li
364.883 237.28 li
@
364.883 237.28 mo
366.574 235.245 li
368.266 251.538 li
369.961 280.081 li
371.652 306.323 li
373.344 325.488 li
375.039 339.331 li
376.73 350.995 li
378.426 357.538 li
380.117 360.64 li
381.809 370.491 li
383.504 382.624 li
385.195 377.788 li
386.887 363.476 li
388.582 362.823 li
390.273 372.612 li
391.965 372.777 li
393.66 365.663 li
395.352 364.245 li
397.043 365.695 li
398.738 375.777 li
400.43 384.433 li
402.125 382.862 li
403.816 372.534 li
405.508 376.347 li
407.203 381.632 li
408.895 370.609 li
410.586 372.308 li
412.281 369.288 li
413.973 377.448 li
415.664 390.917 li
417.359 391.495 li
419.051 392.812 li
420.742 375.855 li
422.438 355.222 li
424.129 337.394 li
425.824 317.945 li
427.516 301.921 li
429.207 281.706 li
430.902 266.343 li
432.594 247.288 li
434.285 258.999 li
435.98 277.355 li
437.672 272.405 li
439.363 272.39 li
441.059 271.792 li
442.75 269.226 li
444.441 265.362 li
446.137 268.476 li
447.828 272.093 li
@
447.828 272.093 mo
449.523 274.21 li
451.215 274.913 li
452.906 273.288 li
454.602 271.038 li
456.293 271.109 li
457.984 291.812 li
459.68 339.23 li
461.371 367.112 li
463.062 365.538 li
464.758 365.655 li
466.449 365.745 li
468.141 364.503 li
469.836 374.468 li
471.527 370.89 li
473.223 371.257 li
474.914 378.109 li
476.605 371.706 li
478.301 373.898 li
479.992 367.632 li
481.684 371.28 li
483.379 372.71 li
485.07 367.48 li
486.762 370.73 li
488.457 369.386 li
490.148 378.23 li
491.84 380.905 li
493.535 368.859 li
495.227 358.304 li
496.922 342.538 li
498.613 309.046 li
500.305 283.062 li
502 269.589 li
503.691 260.945 li
505.383 269.886 li
507.078 280.933 li
508.77 273.464 li
510.461 269.503 li
512.156 275.847 li
513.848 276.433 li
515.539 276.183 li
517.234 276.339 li
518.926 276.917 li
520.621 276.995 li
522.312 277.105 li
524.004 277.316 li
525.699 277.577 li
527.391 277.87 li
529.082 278.116 li
530.777 278.257 li
@
530.777 278.257 mo
532.469 288.109 li
534.16 336.39 li
535.855 371.316 li
537.547 366.155 li
539.238 365.12 li
540.934 369.698 li
542.625 376.53 li
544.32 371.05 li
546.012 371.034 li
547.703 373.433 li
549.398 374.948 li
551.09 382.784 li
552.781 380.191 li
554.477 376.28 li
556.168 367.32 li
557.859 358.077 li
559.555 348.62 li
561.246 334.726 li
562.938 326.144 li
564.633 317.398 li
566.324 301.023 li
568.02 282.687 li
569.711 279.972 li
571.402 287.14 li
573.098 281.765 li
574.789 278.362 li
576.48 286.952 li
578.176 292.945 li
579.867 292.519 li
581.559 281.257 li
583.254 279.308 li
584.945 286.749 li
586.637 288.183 li
588.332 289.03 li
590.023 286.905 li
591.719 285.148 li
593.41 285.831 li
595.102 287.265 li
596.797 287.948 li
598.488 288.105 li
600.18 287.956 li
601.875 287.132 li
603.566 286.484 li
605.258 287.23 li
606.953 288.902 li
608.645 289.288 li
610.336 288.718 li
612.031 288.484 li
613.723 315.195 li
@
613.723 315.195 mo
615.414 353.913 li
617.109 363.351 li
618.801 359.339 li
620.496 360.355 li
622.188 376.702 li
623.879 382.187 li
625.574 370.062 li
627.266 367.14 li
628.957 369.757 li
630.652 369.738 li
632.344 363.046 li
634.035 362.405 li
635.73 364.546 li
637.422 370.14 li
639.113 379.609 li
640.809 378.433 li
642.5 376.691 li
644.195 372.405 li
645.887 370.554 li
647.578 375.183 li
649.273 377.796 li
650.965 382.054 li
652.656 371.714 li
654.352 355.847 li
656.043 349.929 li
657.734 339.519 li
659.43 328.081 li
661.121 321.202 li
662.812 308.175 li
664.508 298.331 li
666.199 291.171 li
667.895 290.488 li
669.586 294.409 li
671.277 291.995 li
672.973 294.718 li
674.664 296.624 li
676.355 295.929 li
678.051 295.265 li
679.742 295.12 li
681.434 295.64 li
683.129 296.32 li
684.82 296.03 li
686.512 295.519 li
688.207 295.784 li
689.898 296.476 li
691.594 297.038 li
693.285 296.835 li
694.977 296.327 li
696.672 296.191 li
@
696.672 296.191 mo
698.363 296.546 li
700.055 297.12 li
701.75 297.597 li
703.441 297.784 li
705.133 297.495 li
706.828 296.948 li
708.52 297.175 li
710.211 297.995 li
711.906 298.253 li
713.598 298.148 li
715.293 318.179 li
716.984 348.257 li
718.676 366.464 li
720.371 373.093 li
722.062 366.245 li
723.754 362.429 li
725.449 364.609 li
727.141 374.558 li
728.832 377.96 li
730.527 368.316 li
732.219 366.573 li
733.91 364.687 li
735.605 369.21 li
737.297 371.585 li
738.992 361.468 li
740.684 359.937 li
742.375 368.327 li
744.07 380.714 li
745.762 380.773 li
747.453 372.57 li
749.148 368.066 li
750.84 363.734 li
752.531 367.222 li
754.227 370.57 li
755.918 364.784 li
757.609 364.862 li
759.305 364.195 li
760.996 370.316 li
762.691 376.796 li
764.383 371.179 li
766.074 372.308 li
767.77 369.448 li
769.461 368.448 li
771.152 368.909 li
772.848 365.667 li
774.539 367.499 li
776.23 373.503 li
777.926 377.191 li
779.617 371.066 li
@
779.617 371.066 mo
781.309 366.562 li
783.004 365.32 li
784.695 366.019 li
786.391 376.862 li
788.082 383.304 li
789.773 372.097 li
791.469 355.53 li
793.16 347.015 li
794.852 341.792 li
796.547 330.429 li
798.238 317.214 li
799.93 311.855 li
801.625 294.78 li
803.316 290.191 li
805.008 305.351 li
806.703 310.519 li
808.395 306.913 li
810.09 302.495 li
811.781 303.917 li
813.473 305.23 li
815.168 306.534 li
816.859 305.101 li
818.551 304.37 li
820.246 305.261 li
821.938 306.222 li
823.629 306.109 li
825.324 305.519 li
827.016 305.698 li
828.707 306.234 li
830.402 306.351 li
832.094 306.386 li
833.789 306.296 li
835.48 306.413 li
837.172 306.722 li
838.867 306.605 li
840.559 306.523 li
842.25 306.593 li
843.945 306.902 li
845.637 307.331 li
847.328 307.433 li
849.023 307.425 li
850.715 307.312 li
852.406 307.245 li
854.102 307.53 li
855.793 308.038 li
857.488 335.839 li
@
33.094 360.128 mo
34.785 355.171 li
36.477 352.503 li
38.172 356.269 li
39.863 356.015 li
41.559 355.398 li
43.25 357.48 li
44.941 356.323 li
46.637 353.097 li
48.328 356.144 li
50.02 359.566 li
51.715 358.128 li
53.406 356.609 li
55.098 355.839 li
56.793 358.991 li
58.484 360.452 li
60.176 359.835 li
61.871 365.722 li
63.562 390.222 li
65.258 386.566 li
66.949 383.605 li
68.641 412.792 li
70.336 424.89 li
72.027 415.585 li
73.719 412.659 li
75.414 418.183 li
77.105 389.456 li
78.797 346.171 li
80.492 338.148 li
82.184 351.214 li
83.875 354.593 li
85.57 357.616 li
87.262 361.609 li
88.957 361.948 li
90.648 360.827 li
92.34 360.562 li
94.035 362.05 li
95.727 362.995 li
97.418 362.964 li
99.113 363.038 li
100.805 363.12 li
102.496 362.984 li
104.191 363.058 li
105.883 362.909 li
107.574 363.003 li
109.27 361.46 li
110.961 359.171 li
112.656 359.601 li
114.348 360.812 li
116.039 359.288 li
.613703 .976837 .0447395 .00808728 cmyk
@
116.039 359.288 mo
117.734 356.847 li
119.426 357.866 li
121.117 360.019 li
122.812 360.667 li
124.504 358.964 li
126.195 355.581 li
127.891 357.835 li
129.582 360.378 li
131.273 360.519 li
132.969 360.144 li
134.66 359.823 li
136.355 358.429 li
138.047 356.894 li
139.738 359.855 li
141.434 365.304 li
143.125 384.417 li
144.816 394.39 li
146.512 395.312 li
148.203 404.73 li
149.895 393.948 li
151.59 379.05 li
153.281 388.124 li
154.973 376.925 li
156.668 362.648 li
158.359 365.628 li
160.055 358.265 li
161.746 357.007 li
163.438 355.378 li
165.133 356.542 li
166.824 361.589 li
168.516 362.054 li
170.211 361.437 li
171.902 360.312 li
173.594 361.202 li
175.289 362.511 li
176.98 362.804 li
178.672 362.862 li
180.367 362.843 li
182.059 362.898 li
183.754 362.847 li
185.445 362.183 li
187.137 361.503 li
188.832 361.433 li
190.523 361.12 li
192.215 358.64 li
193.91 358.257 li
195.602 359.745 li
197.293 360.226 li
198.988 360.238 li
@
198.988 360.238 mo
200.68 360.612 li
202.371 359.948 li
204.066 359.452 li
205.758 360.968 li
207.453 361.425 li
209.145 359.968 li
210.836 358.64 li
212.531 358.605 li
214.223 359.218 li
215.914 359.862 li
217.609 360.308 li
219.301 360.46 li
220.992 358.175 li
222.688 358.362 li
224.379 360.741 li
226.07 360.577 li
227.766 359.46 li
229.457 374.085 li
231.152 387.745 li
232.844 378.745 li
234.535 382.652 li
236.23 395.886 li
237.922 392.245 li
239.613 385.316 li
241.309 373.823 li
243 363.402 li
244.691 361.902 li
246.387 357.859 li
248.078 355.702 li
249.77 362.378 li
251.465 364.628 li
253.156 361.101 li
254.848 360.234 li
256.543 359.698 li
258.234 360.71 li
259.93 359.999 li
261.621 359.573 li
263.312 361.577 li
265.008 362.886 li
266.699 362.616 li
268.391 362.624 li
270.086 363.015 li
271.777 363.03 li
273.469 363.023 li
275.164 363.03 li
276.855 363.038 li
278.547 363.027 li
280.242 363.042 li
281.934 363.042 li
@
281.934 363.042 mo
283.629 363.038 li
287.012 363.038 li
288.707 363.054 li
290.398 363.058 li
292.09 363.058 li
293.785 361.745 li
295.477 359.019 li
297.168 359.827 li
298.863 361.323 li
300.555 359.909 li
302.246 360.921 li
303.941 361.167 li
305.633 358.073 li
307.328 357.03 li
309.02 359.144 li
310.711 360.206 li
312.406 358.386 li
314.098 359.562 li
315.789 359.933 li
317.484 370.03 li
319.176 382.144 li
320.867 381.597 li
322.562 382.191 li
324.254 382.882 li
325.945 386.484 li
327.641 385.163 li
329.332 367.691 li
331.027 356.804 li
332.719 368.62 li
334.41 377.171 li
336.105 368.077 li
337.797 358.827 li
339.488 363.034 li
341.184 365.343 li
342.875 362.167 li
344.566 363.116 li
346.262 363.152 li
347.953 363.081 li
349.645 363.112 li
351.34 363.105 li
353.031 363.144 li
354.727 363.284 li
356.418 363.198 li
358.109 362.261 li
359.805 360.706 li
361.496 360.097 li
363.188 360.527 li
364.883 356.663 li
@
364.883 356.663 mo
366.574 350.3 li
368.266 346.339 li
369.961 342.284 li
371.652 341.105 li
373.344 344.527 li
375.039 347.82 li
376.73 350.312 li
378.426 353.327 li
380.117 355.261 li
381.809 356.749 li
383.504 359.46 li
385.195 361.448 li
386.887 362.273 li
388.582 362.753 li
390.273 363.046 li
391.965 363.097 li
393.66 362.995 li
395.352 361.312 li
397.043 360.882 li
398.738 361.124 li
400.43 360.663 li
402.125 361.23 li
403.816 361.284 li
405.508 361.323 li
407.203 361.089 li
408.895 360.398 li
410.586 361.054 li
412.281 362.331 li
413.973 362.132 li
415.664 361.191 li
417.359 357.874 li
419.051 365.152 li
420.742 377.902 li
422.438 380.691 li
424.129 380.972 li
425.824 380.015 li
427.516 380.085 li
429.207 380.468 li
430.902 378.659 li
432.594 367.445 li
434.285 358.859 li
435.98 360.464 li
437.672 358.62 li
439.363 358.308 li
441.059 358.527 li
442.75 357.73 li
444.441 359.855 li
446.137 361.171 li
447.828 361.003 li
@
447.828 361.003 mo
449.523 361.878 li
451.215 362.327 li
452.906 361.757 li
454.602 361.753 li
456.293 362.698 li
457.984 362.652 li
459.68 361.722 li
461.371 361.655 li
463.062 360.859 li
464.758 360.956 li
466.449 361.757 li
468.141 361.425 li
469.836 360.597 li
471.527 360.566 li
473.223 361.46 li
474.914 361.73 li
476.605 361.323 li
478.301 361.187 li
479.992 361.202 li
481.684 361.503 li
483.379 362.148 li
485.07 361.761 li
486.762 361.769 li
488.457 360.905 li
490.148 359.612 li
491.84 364.144 li
493.535 374.073 li
495.227 379.234 li
496.922 381.374 li
498.613 385.214 li
500.305 381.155 li
502 374.441 li
503.691 367.464 li
505.383 359.722 li
507.078 357.605 li
508.77 362.468 li
510.461 365.019 li
512.156 362.765 li
513.848 363.132 li
515.539 363.171 li
517.234 363.195 li
518.926 363.202 li
522.312 363.202 li
524.004 363.198 li
525.699 363.195 li
527.391 363.191 li
529.082 363.198 li
530.777 363.198 li
@
530.777 363.198 mo
532.469 362.761 li
534.16 361.925 li
535.855 361.116 li
537.547 361.355 li
539.238 361.351 li
540.934 361.476 li
542.625 361.527 li
544.32 361.05 li
546.012 361.577 li
547.703 362.39 li
549.398 362.347 li
551.09 361.628 li
552.781 361.398 li
554.477 358.878 li
556.168 359.519 li
557.859 369.464 li
559.555 376.55 li
561.246 377.07 li
562.938 376.226 li
564.633 375.14 li
566.324 373.062 li
568.02 372.312 li
569.711 367.851 li
571.402 360.511 li
573.098 361.39 li
574.789 362.534 li
576.48 361.601 li
578.176 361.081 li
579.867 361.402 li
581.559 361.96 li
583.254 361.437 li
584.945 361.261 li
586.637 361.652 li
588.332 362.296 li
590.023 362.081 li
591.719 362.405 li
593.41 363.015 li
595.102 363.171 li
596.797 363.023 li
598.488 362.589 li
600.18 362.32 li
601.875 362.378 li
603.566 362.827 li
605.258 363.019 li
606.953 363.038 li
608.645 362.917 li
610.336 362.612 li
612.031 362.698 li
613.723 362.046 li
@
613.723 362.046 mo
615.414 361.862 li
617.109 360.862 li
618.801 360.187 li
620.496 360.355 li
622.188 360.995 li
623.879 361.878 li
625.574 361.124 li
627.266 361.55 li
628.957 362.015 li
630.652 361.48 li
632.344 361.452 li
634.035 361.249 li
635.73 359.976 li
637.422 359.835 li
639.113 360.874 li
640.809 361.339 li
642.5 360.843 li
644.195 361.605 li
645.887 362.433 li
647.578 361.62 li
649.273 360.644 li
650.965 366.261 li
652.656 373.796 li
654.352 374.488 li
656.043 374.714 li
657.734 374.601 li
659.43 374.155 li
661.121 376.241 li
662.812 373.777 li
664.508 372.28 li
666.199 368.331 li
667.895 360.46 li
669.586 360.726 li
671.277 362.464 li
672.973 362.597 li
674.664 362.359 li
676.355 362.241 li
678.051 362.601 li
679.742 363.011 li
681.434 363.253 li
683.129 363.077 li
684.82 362.722 li
686.512 362.738 li
688.207 363.093 li
689.898 363.316 li
691.594 363.159 li
693.285 362.827 li
694.977 362.745 li
696.672 363.042 li
@
696.672 363.042 mo
698.363 363.312 li
700.055 363.359 li
701.75 363.163 li
703.441 362.89 li
705.133 362.808 li
706.828 363.03 li
708.52 363.222 li
710.211 363.277 li
711.906 363.253 li
713.598 363.081 li
715.293 362.8 li
716.984 362.366 li
718.676 361.792 li
720.371 361.823 li
722.062 361.476 li
723.754 361.183 li
725.449 360.378 li
727.141 360.691 li
728.832 362.159 li
730.527 361.456 li
732.219 361.316 li
733.91 362.148 li
735.605 361.644 li
737.297 361.605 li
738.992 361.464 li
740.684 360.214 li
742.375 359.019 li
744.07 359.745 li
745.762 361.421 li
747.453 360.253 li
749.148 360.605 li
750.84 362.218 li
752.531 361.964 li
754.227 362.171 li
755.918 362.202 li
757.609 361.195 li
759.305 360.78 li
760.996 361.667 li
762.691 362.034 li
764.383 360.726 li
766.074 361.198 li
767.77 362.648 li
769.461 362.57 li
771.152 362.171 li
772.848 361.706 li
774.539 361.855 li
776.23 362.327 li
777.926 362.335 li
779.617 362.128 li
@
779.617 362.128 mo
781.309 361.425 li
783.004 361.331 li
784.695 362.066 li
786.391 362.534 li
788.082 365.405 li
789.773 371.316 li
791.469 368.816 li
793.16 368.491 li
794.852 376.331 li
796.547 376.425 li
798.238 372.667 li
799.93 373.312 li
801.625 374.308 li
803.316 366.57 li
805.008 359.038 li
806.703 360.386 li
808.395 361.847 li
810.09 361.695 li
811.781 362.265 li
813.473 362.605 li
815.168 362.659 li
816.859 362.382 li
818.551 362.804 li
820.246 363.081 li
821.938 363.136 li
823.629 363.093 li
825.324 363.038 li
827.016 363.273 li
828.707 363.32 li
830.402 363.159 li
832.094 363.066 li
833.789 363.136 li
835.48 363.257 li
837.172 363.226 li
838.867 363.097 li
840.559 363.058 li
842.25 363.14 li
843.945 363.277 li
845.637 363.245 li
847.328 363.081 li
849.023 363.027 li
850.715 363.054 li
852.406 363.167 li
854.102 363.323 li
855.793 363.269 li
857.488 363.292 li
@
33.094 355.628 mo
34.785 353.671 li
36.477 356.015 li
38.172 354.98 li
39.863 355.382 li
41.559 356.136 li
43.25 354.55 li
44.941 351.48 li
46.637 353.089 li
48.328 353.222 li
50.02 354.589 li
51.715 357.683 li
53.406 356.624 li
55.098 365.265 li
56.793 361.503 li
58.484 354.335 li
60.176 357.187 li
61.871 356.128 li
63.562 356.812 li
65.258 355.82 li
66.949 351.089 li
68.641 352.105 li
70.336 356.464 li
72.027 357.038 li
73.719 354.636 li
75.414 364.073 li
77.105 363.89 li
78.797 353.21 li
80.492 353.534 li
82.184 353.316 li
83.875 355.964 li
85.57 359.726 li
87.262 361.429 li
88.957 361.714 li
90.648 361.667 li
92.34 361.495 li
94.035 362.343 li
95.727 363.011 li
97.418 363.308 li
99.113 363.359 li
100.805 363.32 li
102.496 363.241 li
104.191 363.277 li
107.574 363.308 li
109.27 362.238 li
110.961 359.37 li
112.656 359.011 li
114.348 360.183 li
116.039 358.784 li
.598047 .119753 1 .00653086 cmyk
@
116.039 358.784 mo
117.734 355.612 li
119.426 355.499 li
121.117 358.886 li
122.812 360.636 li
124.504 359.855 li
126.195 356.359 li
127.891 355.82 li
129.582 358.437 li
131.273 360.441 li
132.969 360.921 li
134.66 359.167 li
136.355 357.191 li
138.047 357.71 li
139.738 358.452 li
141.434 354.441 li
143.125 356.718 li
144.816 357.241 li
146.512 352.48 li
148.203 356.257 li
149.895 358.421 li
151.59 356.862 li
153.281 359.441 li
154.973 361.062 li
156.668 359.3 li
158.359 359.234 li
160.055 360.554 li
161.746 361.73 li
163.438 361.382 li
165.133 360.882 li
166.824 361.831 li
168.516 362.741 li
170.211 363.03 li
171.902 363.116 li
173.594 363.183 li
175.289 363.175 li
176.98 363.245 li
178.672 363.28 li
180.367 363.343 li
182.059 363.362 li
183.754 363.327 li
185.445 363.21 li
187.137 363.077 li
188.832 362.991 li
190.523 359.909 li
192.215 358.53 li
193.91 360.417 li
195.602 360.085 li
197.293 358.878 li
198.988 357.691 li
@
198.988 357.691 mo
200.68 358.726 li
202.371 360.101 li
204.066 358.316 li
205.758 357.706 li
207.453 357.847 li
209.145 358.468 li
210.836 359.765 li
212.531 359.304 li
214.223 361.32 li
215.914 360.792 li
217.609 358.417 li
219.301 358.632 li
220.992 360.925 li
222.688 361.081 li
224.379 358.484 li
226.07 358.507 li
227.766 359.48 li
229.457 360.96 li
231.152 361.593 li
232.844 359.648 li
234.535 358.234 li
236.23 356.761 li
237.922 358.3 li
239.613 358.441 li
241.309 356.679 li
243 354.933 li
244.691 355.773 li
246.387 359.741 li
248.078 358.925 li
249.77 359.019 li
251.465 360.655 li
253.156 361.659 li
254.848 360.573 li
256.543 359.468 li
258.234 360.378 li
259.93 361.921 li
261.621 362.527 li
263.312 362.698 li
265.008 362.991 li
266.699 362.96 li
268.391 363.148 li
270.086 363.269 li
271.777 363.316 li
273.469 363.343 li
275.164 363.32 li
276.855 363.347 li
278.547 363.398 li
280.242 363.409 li
281.934 363.394 li
@
281.934 363.394 mo
283.629 363.382 li
285.32 363.386 li
287.012 363.362 li
288.707 363.362 li
290.398 363.366 li
292.09 363.359 li
293.785 361.484 li
295.477 359.144 li
297.168 359.39 li
298.863 360.382 li
300.555 360.761 li
302.246 361.175 li
303.941 361.433 li
305.633 361.37 li
307.328 360.808 li
309.02 359.995 li
310.711 359.296 li
312.406 358.714 li
314.098 359.155 li
315.789 361.116 li
317.484 361.241 li
319.176 358.675 li
320.867 359.241 li
322.562 358.87 li
324.254 359.042 li
325.945 361.624 li
327.641 359.909 li
329.332 355.984 li
331.027 353.488 li
332.719 355.976 li
334.41 357.382 li
336.105 358.202 li
337.797 361.238 li
339.488 362.116 li
341.184 361.929 li
342.875 361.39 li
344.566 362.23 li
346.262 363.23 li
347.953 363.312 li
349.645 363.37 li
351.34 363.343 li
353.031 363.3 li
354.727 363.284 li
356.418 363.183 li
358.109 362.976 li
359.805 362.386 li
361.496 361.3 li
363.188 359.054 li
364.883 357.941 li
@
364.883 357.945 mo
366.574 358.241 li
368.266 360.058 li
369.961 360.362 li
371.652 356.816 li
373.344 357.503 li
375.039 361.003 li
376.73 362.12 li
378.426 361.046 li
380.117 360.945 li
381.809 361.476 li
383.504 361.839 li
385.195 362.566 li
386.887 362.753 li
388.582 363.109 li
391.965 363.116 li
393.66 363.03 li
395.352 361.933 li
397.043 361.038 li
398.738 361.441 li
400.43 361.273 li
402.125 360.175 li
403.816 359.421 li
405.508 359.706 li
407.203 360.362 li
408.895 361.359 li
410.586 361.374 li
412.281 360.777 li
413.973 360.636 li
415.664 360.327 li
417.359 359.823 li
419.051 360.046 li
420.742 357.945 li
422.438 357.722 li
424.129 360.269 li
425.824 360.874 li
427.516 361.339 li
429.207 358.448 li
430.902 357.226 li
432.594 357.659 li
434.285 358.519 li
435.98 360.374 li
437.672 360.362 li
439.363 361.3 li
441.059 362.495 li
442.75 362.261 li
444.441 361.952 li
446.137 362.507 li
447.828 362.304 li
@
447.828 362.304 mo
449.523 362.187 li
451.215 362.862 li
452.906 362.905 li
454.602 362.695 li
456.293 362.991 li
457.984 362.468 li
459.68 361.53 li
461.371 361.382 li
463.062 361.214 li
464.758 360.738 li
466.449 360.53 li
468.141 361.23 li
469.836 362.179 li
471.527 361.843 li
473.223 360.788 li
474.914 359.999 li
476.605 359.933 li
478.301 360.616 li
479.992 360.429 li
481.684 360.687 li
483.379 361.066 li
485.07 360.96 li
486.762 361.101 li
488.457 361.331 li
490.148 361.71 li
491.84 359.097 li
493.535 359.132 li
495.227 361.812 li
496.922 361.046 li
498.613 362.085 li
500.305 364.972 li
502 363.652 li
503.691 360.562 li
505.383 361.394 li
507.078 361.222 li
508.77 359.952 li
510.461 360.636 li
512.156 361.593 li
513.848 362.511 li
515.539 362.913 li
517.234 363.21 li
518.926 363.238 li
520.621 363.284 li
522.312 363.343 li
524.004 363.37 li
525.699 363.382 li
527.391 363.386 li
529.082 363.386 li
530.777 363.394 li
@
530.777 363.394 mo
532.469 363.171 li
534.16 362.452 li
535.855 361.741 li
537.547 360.984 li
539.238 360.452 li
540.934 361.081 li
542.625 361.851 li
544.32 361.398 li
546.012 360.675 li
547.703 360.327 li
549.398 360.745 li
551.09 361.265 li
552.781 360.527 li
554.477 360.859 li
556.168 360.562 li
557.859 360.351 li
559.555 360.788 li
561.246 361.339 li
562.938 361.898 li
564.633 360.753 li
566.324 361.534 li
568.02 362.128 li
569.711 360.976 li
571.402 360.398 li
573.098 360.999 li
574.789 361.558 li
576.48 362.195 li
578.176 362.507 li
579.867 362.351 li
581.559 361.495 li
583.254 360.89 li
584.945 361.042 li
586.637 361.343 li
588.332 362.64 li
590.023 363.015 li
591.719 363.019 li
593.41 363.144 li
595.102 363.245 li
596.797 363.343 li
598.488 363.277 li
600.18 363.073 li
601.875 362.972 li
603.566 363.179 li
605.258 363.222 li
606.953 363.253 li
608.645 363.312 li
610.336 363.206 li
612.031 363.206 li
613.723 362.98 li
@
613.723 362.98 mo
615.414 362.198 li
617.109 361.624 li
618.801 361.761 li
620.496 361.73 li
622.188 361.702 li
623.879 361.718 li
625.574 360.886 li
627.266 360.624 li
628.957 361.257 li
630.652 362.085 li
632.344 362.152 li
634.035 361.593 li
635.73 361.64 li
637.422 361.632 li
639.113 361.515 li
640.809 360.687 li
642.5 359.659 li
644.195 359.753 li
645.887 361.187 li
647.578 361.808 li
649.273 361.374 li
650.965 361.866 li
652.656 361.722 li
654.352 361.874 li
656.043 362.323 li
657.734 362.249 li
659.43 361.202 li
661.121 362.214 li
662.812 362.448 li
664.508 359.484 li
666.199 359.132 li
667.895 361.023 li
669.586 362.05 li
671.277 362.394 li
672.973 362.866 li
674.664 362.972 li
676.355 363.21 li
678.051 363.202 li
679.742 363.277 li
681.434 363.402 li
683.129 363.417 li
684.82 363.327 li
686.512 363.32 li
688.207 363.366 li
689.898 363.347 li
691.594 363.366 li
693.285 363.308 li
694.977 363.265 li
696.672 363.331 li
@
696.672 363.331 mo
698.363 363.355 li
700.055 363.359 li
701.75 363.374 li
703.441 363.304 li
705.133 363.292 li
706.828 363.362 li
708.52 363.32 li
710.211 363.292 li
711.906 363.37 li
713.598 363.413 li
715.293 362.71 li
716.984 361.675 li
718.676 361.827 li
720.371 362.421 li
722.062 362.046 li
723.754 361.831 li
725.449 362.073 li
727.141 362.085 li
728.832 361.98 li
730.527 361.702 li
732.219 361.187 li
733.91 361.187 li
735.605 361.976 li
737.297 362.362 li
738.992 362.155 li
740.684 361.909 li
742.375 361.855 li
744.07 361.331 li
745.762 361.3 li
747.453 360.96 li
749.148 360.706 li
750.84 361.636 li
752.531 362.265 li
754.227 362.476 li
755.918 362.335 li
757.609 362.058 li
759.305 361.648 li
760.996 361.445 li
762.691 361.503 li
764.383 361.179 li
766.074 361.073 li
767.77 361.745 li
769.461 362.245 li
771.152 362.175 li
772.848 361.413 li
774.539 361.249 li
776.23 361.773 li
777.926 362.054 li
779.617 362.179 li
@
779.617 362.183 mo
781.309 361.683 li
783.004 361.445 li
784.695 361.882 li
786.391 362.218 li
788.082 361.917 li
789.773 362.159 li
791.469 362.144 li
793.16 361.308 li
794.852 361.288 li
796.547 361.741 li
798.238 361.437 li
799.93 361.062 li
801.625 361.667 li
803.316 361.308 li
805.008 360.905 li
806.703 361.05 li
808.395 361.8 li
810.09 362.948 li
811.781 362.765 li
813.473 362.73 li
815.168 363.019 li
816.859 362.882 li
818.551 362.995 li
820.246 363.038 li
821.938 363.073 li
823.629 363.249 li
825.324 363.3 li
827.016 363.355 li
828.707 363.374 li
830.402 363.355 li
832.094 363.323 li
833.789 363.366 li
835.48 363.398 li
837.172 363.382 li
838.867 363.355 li
840.559 363.323 li
842.25 363.362 li
843.945 363.366 li
845.637 363.362 li
847.328 363.339 li
849.023 363.288 li
850.715 363.288 li
852.406 363.339 li
854.102 363.359 li
855.793 363.359 li
857.488 363.409 li
@
33.094 358.28 mo
34.785 356.101 li
36.477 355.019 li
38.172 356.886 li
39.863 358.808 li
41.559 358.898 li
43.25 358.566 li
44.941 356.995 li
46.637 355.839 li
48.328 358.128 li
50.02 357.499 li
51.715 357.761 li
53.406 355.862 li
55.098 355.331 li
56.793 358.683 li
58.484 357.132 li
60.176 357.198 li
61.871 358.253 li
63.562 358.917 li
65.258 361.148 li
68.641 354.187 li
70.336 355.644 li
72.027 357.366 li
73.719 350.878 li
75.414 345.831 li
77.105 353.843 li
78.797 354.855 li
80.492 351.273 li
82.184 352.238 li
83.875 355.331 li
85.57 359.999 li
87.262 361.804 li
88.957 362.652 li
90.648 362.999 li
92.34 362.972 li
94.035 363.085 li
95.727 363.234 li
97.418 363.339 li
99.113 363.32 li
100.805 363.238 li
102.496 363.288 li
104.191 363.327 li
105.883 363.304 li
107.574 363.288 li
109.27 361.167 li
110.961 360.183 li
112.656 359.175 li
114.348 358.499 li
116.039 357.249 li
.600824 .0568551 3.0518e-5 0 cmyk
@
116.039 357.249 mo
117.734 356.265 li
119.426 359.937 li
121.117 359.53 li
122.812 358.769 li
124.504 357.464 li
126.195 356.792 li
127.891 361.038 li
129.582 360.488 li
131.273 359.062 li
132.969 358.566 li
134.66 358.023 li
136.355 360.038 li
138.047 357.988 li
139.738 358.812 li
141.434 359.78 li
143.125 359.042 li
144.816 359.245 li
146.512 356.675 li
148.203 356.546 li
149.895 358.3 li
151.59 356.472 li
153.281 349.136 li
154.973 347.507 li
156.668 354.687 li
158.359 357.323 li
160.055 357.288 li
161.746 358.101 li
163.438 359.87 li
165.133 362.706 li
166.824 362.695 li
168.516 362.738 li
170.211 362.878 li
171.902 362.722 li
173.594 362.898 li
175.289 363.273 li
176.98 363.362 li
178.672 363.362 li
180.367 363.308 li
182.059 363.308 li
183.754 363.288 li
185.445 363.234 li
187.137 363.222 li
188.832 363.218 li
190.523 362.238 li
192.215 359.581 li
193.91 360.093 li
195.602 360.542 li
197.293 360.577 li
198.988 361.925 li
@
198.988 361.925 mo
200.68 360.202 li
202.371 360.308 li
204.066 360.023 li
205.758 360.155 li
207.453 361.534 li
209.145 359.89 li
210.836 360.503 li
212.531 360.089 li
214.223 360.03 li
215.914 361.71 li
217.609 360.366 li
219.301 360.882 li
220.992 360.28 li
222.688 360.148 li
224.379 361.964 li
226.07 361.116 li
227.766 360.933 li
229.457 361.655 li
231.152 361.831 li
232.844 360.288 li
234.535 356.855 li
236.23 357.945 li
237.922 359.734 li
239.613 353.62 li
241.309 346.898 li
243 350.163 li
244.691 357.433 li
246.387 359.831 li
248.078 359.534 li
249.77 359.093 li
251.465 360.452 li
253.156 362.077 li
254.848 362.519 li
256.543 362.652 li
258.234 362.702 li
259.93 362.749 li
261.621 362.948 li
263.312 363.179 li
265.008 363.144 li
266.699 363.222 li
268.391 363.339 li
270.086 363.355 li
271.777 363.366 li
273.469 363.366 li
275.164 363.359 li
276.855 363.355 li
278.547 363.366 li
280.242 363.355 li
281.934 363.351 li
@
281.934 363.351 mo
283.629 363.343 li
285.32 363.347 li
287.012 363.343 li
288.707 363.327 li
290.398 363.347 li
292.09 363.37 li
293.785 362.57 li
295.477 360.698 li
297.168 360.355 li
298.863 360.515 li
300.555 360.163 li
302.246 360.71 li
303.941 361.71 li
305.633 362.405 li
307.328 361.374 li
309.02 361.191 li
310.711 361.288 li
312.406 360.417 li
314.098 360.886 li
315.789 360.96 li
317.484 361.39 li
319.176 362.378 li
320.867 361.648 li
322.562 358.687 li
324.254 355.034 li
325.945 353.722 li
327.641 357.878 li
329.332 360.488 li
331.027 355.624 li
332.719 351.855 li
334.41 355.988 li
336.105 360.042 li
337.797 360.851 li
339.488 362.468 li
341.184 362.937 li
342.875 362.952 li
344.566 363.187 li
346.262 363.355 li
347.953 363.32 li
349.645 363.32 li
351.34 363.335 li
353.031 363.382 li
354.727 363.413 li
356.418 363.402 li
358.109 363.273 li
359.805 362.812 li
361.496 361.632 li
363.188 360.527 li
364.883 360.87 li
@
364.883 360.87 mo
366.574 360.991 li
368.266 360.28 li
369.961 359.202 li
371.652 357.007 li
373.344 355.847 li
375.039 356.89 li
376.73 357.573 li
378.426 357.249 li
380.117 357.593 li
381.809 359.62 li
383.504 361.652 li
385.195 361.859 li
386.887 362.308 li
388.582 363.136 li
390.273 363.112 li
391.965 363.187 li
393.66 363.331 li
395.352 362.331 li
397.043 360.909 li
398.738 360.702 li
400.43 360.777 li
402.125 361.101 li
403.816 361.913 li
405.508 361.8 li
407.203 361.73 li
408.895 361.163 li
410.586 361.245 li
412.281 361.812 li
413.973 361.757 li
415.664 362.05 li
417.359 361.265 li
419.051 361.777 li
420.742 362.808 li
422.438 362.862 li
424.129 362.085 li
425.824 361.179 li
427.516 356.878 li
429.207 350.683 li
430.902 349.773 li
432.594 354.695 li
434.285 359.695 li
435.98 361.073 li
437.672 362.12 li
439.363 362.628 li
441.059 361.866 li
442.75 361.734 li
444.441 362.726 li
446.137 363.038 li
447.828 363.062 li
@
447.828 363.062 mo
449.523 363.312 li
451.215 363.261 li
452.906 363.132 li
454.602 363.191 li
456.293 363.312 li
457.984 363.097 li
459.68 361.581 li
461.371 361.042 li
463.062 361.417 li
464.758 361.124 li
466.449 361.554 li
468.141 361.394 li
469.836 361.558 li
471.527 361.687 li
473.223 361.706 li
474.914 362.132 li
476.605 361.527 li
478.301 361.745 li
479.992 361.546 li
481.684 361.464 li
483.379 362.038 li
485.07 361.577 li
486.762 361.898 li
488.457 361.773 li
490.148 361.683 li
491.84 362.347 li
493.535 362.515 li
495.227 361.921 li
496.922 360.98 li
498.613 360.476 li
500.305 358.562 li
502 358.198 li
503.691 360.87 li
505.383 362.339 li
507.078 361.488 li
508.77 360.878 li
510.461 362.136 li
512.156 363.097 li
513.848 363.249 li
515.539 363.359 li
517.234 363.366 li
518.926 363.382 li
520.621 363.366 li
522.312 363.335 li
524.004 363.359 li
525.699 363.39 li
527.391 363.398 li
529.082 363.394 li
530.777 363.382 li
@
530.777 363.386 mo
532.469 363.335 li
534.16 362.3 li
535.855 361.464 li
537.547 361.905 li
539.238 362.327 li
540.934 361.886 li
542.625 361.991 li
544.32 361.738 li
546.012 361.624 li
547.703 362.566 li
549.398 362.214 li
551.09 362.179 li
552.781 361.78 li
554.477 361.702 li
556.168 362.265 li
557.859 361.448 li
559.555 360.956 li
561.246 361.777 li
562.938 360.695 li
564.633 358.612 li
566.324 358.476 li
568.02 360.312 li
569.711 361.941 li
571.402 360.679 li
573.098 359.999 li
574.789 361.722 li
576.48 362.874 li
578.176 362.757 li
579.867 362.445 li
581.559 362.609 li
583.254 362.917 li
584.945 362.82 li
586.637 362.878 li
588.332 363.112 li
590.023 363.273 li
591.719 363.343 li
593.41 363.37 li
595.102 363.355 li
596.797 363.292 li
598.488 363.238 li
600.18 363.288 li
601.875 363.359 li
603.566 363.382 li
605.258 363.374 li
606.953 363.366 li
608.645 363.308 li
610.336 363.323 li
612.031 363.374 li
613.723 362.839 li
@
613.723 362.839 mo
615.414 362.191 li
617.109 362.241 li
618.801 362.112 li
620.496 361.808 li
622.188 361.726 li
623.879 361.792 li
625.574 361.632 li
627.266 361.476 li
628.957 361.503 li
630.652 361.612 li
632.344 361.902 li
634.035 362.394 li
635.73 362.523 li
637.422 361.687 li
639.113 362.023 li
640.809 361.98 li
642.5 361.933 li
644.195 362.839 li
645.887 362.284 li
647.578 362.159 li
649.273 361.675 li
650.965 361.159 li
652.656 361.999 li
654.352 361.96 li
656.043 361.394 li
657.734 361.48 li
659.43 361.144 li
662.812 358.253 li
664.508 357.991 li
666.199 359.882 li
667.895 360.925 li
669.586 361.218 li
671.277 362.308 li
672.973 362.702 li
674.664 362.991 li
676.355 363.124 li
678.051 363.218 li
679.742 363.359 li
681.434 363.39 li
683.129 363.308 li
684.82 363.112 li
686.512 363.097 li
688.207 363.304 li
689.898 363.402 li
691.594 363.378 li
693.285 363.308 li
694.977 363.312 li
696.672 363.386 li
@
696.672 363.386 mo
698.363 363.405 li
700.055 363.405 li
701.75 363.402 li
703.441 363.374 li
705.133 363.323 li
706.828 363.323 li
708.52 363.39 li
710.211 363.413 li
711.906 363.394 li
713.598 363.359 li
715.293 362.913 li
716.984 362.386 li
718.676 361.745 li
720.371 361.433 li
722.062 362.202 li
723.754 362.429 li
725.449 362.343 li
727.141 361.995 li
728.832 361.862 li
730.527 361.917 li
732.219 361.413 li
733.91 361.78 li
735.605 361.855 li
737.297 361.769 li
738.992 362.413 li
740.684 362.538 li
742.375 362.112 li
744.07 361.933 li
745.762 362.21 li
747.453 361.964 li
749.148 361.804 li
750.84 362.007 li
752.531 361.96 li
754.227 362.105 li
755.918 362.452 li
757.609 362.792 li
759.305 362.023 li
760.996 361.909 li
762.691 362.362 li
764.383 362.112 li
766.074 362.429 li
767.77 362.187 li
769.461 362.23 li
771.152 362.448 li
772.848 362.312 li
774.539 362.757 li
776.23 362.128 li
777.926 362.066 li
779.617 362.433 li
@
779.617 362.433 mo
781.309 362.327 li
783.004 362.706 li
784.695 362.441 li
786.391 362.359 li
788.082 362.753 li
789.773 362.741 li
791.469 362.421 li
793.16 360.476 li
794.852 359.304 li
796.547 361.261 li
798.238 360.484 li
799.93 357.183 li
801.625 357.238 li
803.316 359.851 li
805.008 361.976 li
806.703 362.839 li
808.395 362.773 li
810.09 362.804 li
811.781 363.167 li
813.473 363.28 li
815.168 363.195 li
816.859 363.175 li
818.551 363.261 li
820.246 363.343 li
821.938 363.366 li
823.629 363.304 li
825.324 363.292 li
827.016 363.366 li
828.707 363.378 li
830.402 363.32 li
832.094 363.284 li
833.789 363.335 li
835.48 363.351 li
837.172 363.359 li
838.867 363.359 li
840.559 363.343 li
842.25 363.386 li
843.945 363.417 li
845.637 363.405 li
847.328 363.366 li
849.023 363.327 li
850.715 363.335 li
852.406 363.359 li
854.102 363.374 li
855.793 363.335 li
857.488 363.362 li
@
33.094 323.058 mo
34.785 370.218 li
36.477 427.261 li
38.172 393.495 li
39.863 325.179 li
41.559 312.46 li
43.25 390.585 li
44.941 433.999 li
46.637 348.234 li
48.328 303.378 li
50.02 342.398 li
51.715 415.78 li
53.406 430.909 li
55.098 342.273 li
56.793 293.253 li
58.484 335.089 li
60.176 393.609 li
61.871 404.706 li
63.562 360.894 li
65.258 338.054 li
66.949 373.187 li
68.641 402.362 li
70.336 360.148 li
72.027 335.956 li
73.719 362.796 li
75.414 323.515 li
77.105 297.612 li
78.797 355.534 li
80.492 369.394 li
82.184 354.323 li
83.875 337.882 li
85.57 336.511 li
87.262 345.359 li
88.957 346.722 li
90.648 349.659 li
92.34 341.327 li
94.035 341.382 li
95.727 344.066 li
97.418 343.972 li
99.113 344.257 li
102.496 343.273 li
104.191 343.273 li
105.883 342.976 li
107.574 344.273 li
109.27 334.312 li
110.961 329.48 li
112.656 362.804 li
114.348 409.05 li
116.039 405.527 li
.243381 1 .835172 .192233 cmyk
@
116.039 405.527 mo
117.734 339.452 li
119.426 317.913 li
121.117 368.73 li
122.812 408.073 li
124.504 405.206 li
126.195 347.89 li
127.891 320.374 li
129.582 366.663 li
131.273 414.921 li
132.969 413.058 li
134.66 345.089 li
136.355 319.952 li
138.047 354.757 li
139.738 405.917 li
141.434 413.941 li
143.125 356.734 li
144.816 336.421 li
146.512 368.468 li
148.203 382.573 li
149.895 367.515 li
151.59 361.698 li
153.281 368.374 li
154.973 327.53 li
156.668 295.816 li
158.359 310.198 li
160.055 331.105 li
161.746 342.968 li
163.438 334.812 li
165.133 339.839 li
166.824 340.784 li
168.516 341.343 li
170.211 343.066 li
171.902 342.663 li
173.594 342.109 li
175.289 343.429 li
176.98 343.542 li
178.672 342.796 li
180.367 342.855 li
182.059 343.073 li
183.754 343.433 li
185.445 343.73 li
187.137 343.292 li
188.832 342.398 li
190.523 337.312 li
192.215 357.78 li
193.91 401.441 li
195.602 396.612 li
197.293 341.624 li
198.988 324.32 li
@
198.988 324.32 mo
200.68 367.331 li
202.371 408.241 li
204.066 390.612 li
205.758 336.866 li
207.453 328.952 li
209.145 370.136 li
210.836 411.284 li
212.531 396.472 li
214.223 335.374 li
215.914 327.804 li
217.609 371.226 li
219.301 398.101 li
220.992 383.862 li
222.688 338.027 li
224.379 333.452 li
226.07 380.503 li
227.766 390.601 li
229.457 369.659 li
231.152 357.683 li
232.844 357.198 li
234.535 386.206 li
236.23 369.679 li
237.922 330.82 li
239.613 352.124 li
241.309 356.773 li
243 329.042 li
244.691 341.335 li
246.387 364.952 li
248.078 354.757 li
249.77 338.441 li
251.465 335.534 li
253.156 340.222 li
254.848 340.847 li
256.543 345.362 li
258.234 352.214 li
259.93 353.03 li
261.621 350.886 li
263.312 348.78 li
265.008 350.355 li
266.699 351.495 li
268.391 349.749 li
270.086 349.788 li
271.777 350.546 li
273.469 349.816 li
275.164 350.034 li
276.855 350.187 li
278.547 349.972 li
280.242 350.362 li
281.934 350.421 li
@
281.934 350.421 mo
283.629 350.464 li
285.32 350.429 li
287.012 349.78 li
288.707 349.581 li
290.398 349.995 li
292.09 350.144 li
293.785 382.679 li
295.477 391.472 li
297.168 349.663 li
298.863 341.464 li
300.555 372.843 li
302.246 391.038 li
303.941 366.698 li
305.633 341.198 li
307.328 348.753 li
309.02 386.152 li
310.711 401.605 li
312.406 369.577 li
314.098 343.327 li
315.789 347.464 li
317.484 381.855 li
319.176 393.366 li
320.867 368.007 li
322.562 358.402 li
324.254 356.292 li
325.945 364.109 li
327.641 356.362 li
329.332 336.792 li
331.027 352.499 li
332.719 361.308 li
334.41 345.609 li
336.105 348.093 li
337.797 361.956 li
339.488 359.921 li
341.184 352.355 li
342.875 354.308 li
344.566 358.695 li
346.262 358.284 li
347.953 357.894 li
349.645 357.991 li
351.34 357.847 li
353.031 357.382 li
354.727 356.902 li
356.418 357.214 li
358.109 356.952 li
359.805 355.433 li
361.496 353.034 li
363.188 353.167 li
364.883 350.081 li
@
364.883 350.081 mo
366.574 338.179 li
368.266 335.183 li
369.961 343.011 li
371.652 342.73 li
373.344 341.698 li
375.039 347.538 li
376.73 355.632 li
378.426 360.257 li
380.117 361.691 li
381.809 376.64 li
383.504 379.874 li
385.195 364.066 li
386.887 359.421 li
388.582 358.288 li
390.273 357.378 li
391.965 358.859 li
393.66 357.648 li
395.352 349.573 li
397.043 358.695 li
398.738 382.566 li
400.43 386.769 li
402.125 356.038 li
403.816 342.034 li
405.508 370.612 li
407.203 393.855 li
408.895 378.011 li
410.586 346.112 li
412.281 347.71 li
413.973 372.101 li
415.664 387.894 li
417.359 372.116 li
419.051 347.57 li
420.742 347.882 li
422.438 375.585 li
424.129 382.097 li
425.824 363.499 li
427.516 362.218 li
429.207 356.015 li
430.902 332.945 li
432.594 328.753 li
434.285 342.757 li
435.98 346.234 li
437.672 337.07 li
439.363 334.726 li
441.059 340.448 li
442.75 338.702 li
444.441 334.523 li
446.137 331.741 li
447.828 332.48 li
@
447.828 332.48 mo
449.523 336.206 li
451.215 337.999 li
452.906 336.905 li
454.602 335.191 li
456.293 334.128 li
457.984 338.82 li
459.68 359.64 li
461.371 385.046 li
463.062 387.253 li
464.758 358.722 li
466.449 341.921 li
468.141 363.796 li
469.836 382.507 li
471.527 377.105 li
473.223 352.073 li
474.914 343.241 li
476.605 365.726 li
478.301 386.195 li
479.992 370.765 li
481.684 340.066 li
483.379 344.183 li
485.07 369.265 li
486.762 386.054 li
488.457 368.612 li
490.148 346.898 li
491.84 353.339 li
493.535 369.183 li
495.227 369.573 li
496.922 361.925 li
498.613 366.773 li
500.305 362.839 li
502 354.148 li
503.691 359.718 li
505.383 348.948 li
507.078 341.441 li
508.77 349.769 li
510.461 350.847 li
512.156 356.261 li
513.848 360.769 li
515.539 361.46 li
517.234 361.62 li
518.926 362.023 li
520.621 362.14 li
522.312 362.288 li
524.004 362.206 li
525.699 362.292 li
527.391 362.304 li
529.082 362.284 li
530.777 362.292 li
@
530.777 362.292 mo
532.469 367.644 li
534.16 374.98 li
535.855 378.37 li
537.547 361.238 li
539.238 346.702 li
540.934 364.839 li
542.625 387.12 li
544.32 377.398 li
546.012 348.171 li
547.703 346.632 li
549.398 370.05 li
551.09 384.62 li
552.781 370.03 li
554.477 350.288 li
556.168 353.734 li
557.859 369.788 li
559.555 369.695 li
561.246 358.695 li
562.938 352.956 li
564.633 357.898 li
566.324 359.78 li
568.02 350.343 li
569.711 346.093 li
571.402 351.909 li
573.098 348.277 li
574.789 341.777 li
576.48 347.366 li
578.176 352.503 li
579.867 353.136 li
581.559 348.417 li
583.254 343.183 li
584.945 346.335 li
586.637 352.984 li
588.332 352.659 li
590.023 351.612 li
591.719 350.253 li
593.41 350.148 li
595.102 351.265 li
596.797 351.495 li
598.488 351.027 li
600.18 350.448 li
601.875 349.706 li
603.566 349.171 li
605.258 349.605 li
606.953 350.245 li
608.645 350.195 li
610.336 349.816 li
612.031 349.304 li
613.723 358.386 li
@
613.723 358.386 mo
615.414 378.573 li
617.109 378.011 li
618.801 356.448 li
620.496 351.327 li
622.188 362.378 li
623.879 375.726 li
625.574 364.624 li
627.266 344.777 li
628.957 351.667 li
630.652 376.527 li
632.344 380.609 li
634.035 360.003 li
635.73 349.116 li
637.422 355.597 li
639.113 373.933 li
640.809 380.491 li
642.5 357.726 li
644.195 345.042 li
645.887 364.128 li
647.578 379.038 li
649.273 373.941 li
650.965 353.152 li
652.656 349.874 li
654.352 368.609 li
656.043 371.269 li
657.734 366.905 li
659.43 364.726 li
661.121 362.382 li
662.812 357.003 li
664.508 351.226 li
666.199 343.566 li
667.895 336.046 li
669.586 343.718 li
671.277 351.527 li
672.973 354.57 li
674.664 353.398 li
676.355 351.456 li
678.051 350.702 li
679.742 350.48 li
681.434 351.077 li
683.129 351.249 li
684.82 351.12 li
686.512 350.495 li
688.207 350.245 li
689.898 350.542 li
691.594 351.007 li
693.285 350.929 li
694.977 350.116 li
696.672 349.843 li
@
696.672 349.843 mo
698.363 350.167 li
700.055 350.527 li
701.75 350.847 li
703.441 350.523 li
705.133 349.988 li
706.828 349.624 li
708.52 349.847 li
710.211 350.456 li
711.906 350.663 li
713.598 350.554 li
715.293 347.202 li
716.984 347.898 li
718.676 357.409 li
720.371 374.019 li
722.062 376.55 li
723.754 359.89 li
725.449 352.82 li
727.141 368.198 li
728.832 384.964 li
730.527 375.175 li
732.219 354.777 li
733.91 351.253 li
735.605 365.14 li
737.297 375.675 li
738.992 366.175 li
740.684 353.234 li
742.375 352.488 li
744.07 368.812 li
745.762 384.066 li
747.453 372.905 li
749.148 353.874 li
750.84 350.585 li
752.531 364.921 li
754.227 377.198 li
755.918 367.015 li
757.609 349.882 li
759.305 351.038 li
760.996 374.218 li
762.691 380.929 li
764.383 363.984 li
766.074 348.855 li
767.77 351.898 li
769.461 375.882 li
771.152 377.128 li
772.848 359.257 li
774.539 352.222 li
776.23 358.179 li
777.926 374.773 li
779.617 380.042 li
@
779.617 380.042 mo
781.309 367.089 li
783.004 353.03 li
784.695 362.609 li
786.391 377.144 li
788.082 372.917 li
789.773 362.671 li
791.469 360.288 li
793.16 371.402 li
794.852 369.347 li
796.547 360.316 li
798.238 355.609 li
799.93 352.019 li
801.625 341.312 li
803.316 339.913 li
805.008 351.206 li
806.703 345.628 li
808.395 344.39 li
810.09 348.8 li
811.781 348.054 li
813.473 350.288 li
815.168 350.886 li
816.859 349.339 li
818.551 348.234 li
820.246 348.839 li
821.938 350.597 li
823.629 350.722 li
825.324 349.773 li
827.016 349.702 li
828.707 350.249 li
830.402 350.273 li
832.094 349.757 li
833.789 349.57 li
835.48 349.683 li
837.172 349.89 li
838.867 350.175 li
840.559 349.722 li
842.25 349.155 li
843.945 349.339 li
845.637 349.765 li
847.328 349.866 li
849.023 349.37 li
850.715 349.163 li
852.406 348.941 li
854.102 348.968 li
855.793 349.542 li
857.488 356.577 li
@
33.094 120.519 mo
34.785 72.155 li
36.477 62.616 li
38.172 84.097 li
39.863 56.269 li
41.559 81.644 li
43.25 105.163 li
44.941 62.925 li
46.637 79.441 li
48.328 83.741 li
50.02 97.23 li
51.715 137.202 li
53.406 107.163 li
55.098 89.722 li
56.793 88.808 li
58.484 79.554 li
60.176 77.816 li
61.871 69.687 li
63.562 82.265 li
65.258 123.605 li
66.949 128.347 li
68.641 96.433 li
70.336 142.972 li
72.027 221.593 li
73.719 275.691 li
75.414 287.253 li
77.105 362.187 li
78.797 399.226 li
80.492 326.612 li
82.184 312.253 li
83.875 308.12 li
85.57 313.179 li
87.262 319.452 li
88.957 314.437 li
90.648 316.933 li
92.34 324.527 li
94.035 326.628 li
95.727 322.648 li
97.418 322.972 li
99.113 322.601 li
100.805 321.179 li
102.496 322.07 li
104.191 322.445 li
105.883 321.964 li
107.574 322.655 li
109.27 272.89 li
110.961 190.835 li
112.656 161.624 li
114.348 162.866 li
116.039 142.991 li
.875212 .526726 .00314336 .000793469 cmyk
@
116.039 142.991 mo
117.734 139.702 li
119.426 149.46 li
121.117 155.214 li
122.812 165.214 li
124.504 143.589 li
126.195 143.304 li
127.891 157.062 li
129.582 165.347 li
131.273 186.527 li
132.969 177.175 li
134.66 156.64 li
136.355 160.03 li
138.047 161.046 li
139.738 175.425 li
141.434 165.3 li
143.125 158.718 li
144.816 201.995 li
146.512 226.886 li
148.203 203.675 li
149.895 239.093 li
151.59 287.394 li
153.281 274.374 li
154.973 296.542 li
156.668 314.07 li
158.359 330.234 li
160.055 335.757 li
161.746 316.421 li
163.438 335.261 li
165.133 355.323 li
166.824 346.093 li
168.516 339.187 li
170.211 337.589 li
171.902 343.241 li
173.594 347.452 li
175.289 347.112 li
176.98 344.241 li
178.672 342.155 li
180.367 343.468 li
182.059 344.218 li
183.754 343.628 li
185.445 344.058 li
187.137 345.937 li
188.832 348.327 li
190.523 279.019 li
192.215 196.347 li
193.91 199.769 li
195.602 201.015 li
197.293 199.347 li
198.988 206.628 li
@
198.988 206.628 mo
200.68 194.847 li
202.371 200.698 li
204.066 193.562 li
205.758 195.96 li
207.453 212.706 li
209.145 197.952 li
210.836 208.909 li
212.531 206.902 li
214.223 206.132 li
215.914 219.362 li
217.609 203.171 li
219.301 195.593 li
220.992 207.491 li
222.688 217.769 li
224.379 216.605 li
226.07 215.097 li
227.766 213.378 li
229.457 214.636 li
231.152 207.038 li
232.844 208.691 li
234.535 230.171 li
236.23 246.644 li
237.922 301.683 li
239.613 311.456 li
241.309 300.073 li
243 331.089 li
244.691 329.308 li
246.387 320.32 li
248.078 312.765 li
249.77 328.89 li
251.465 353.515 li
253.156 359.905 li
254.848 356.523 li
256.543 346.089 li
258.234 340.124 li
259.93 345.249 li
261.621 353.027 li
263.312 357.714 li
265.008 354.679 li
266.699 352.089 li
268.391 355.417 li
270.086 356.343 li
271.777 355.503 li
273.469 355.226 li
275.164 355.468 li
276.855 355.726 li
278.547 356.249 li
280.242 356.222 li
281.934 356.081 li
@
281.934 356.081 mo
283.629 356.191 li
285.32 355.921 li
287.012 355.648 li
288.707 355.988 li
290.398 355.851 li
292.09 356.12 li
293.785 291.253 li
295.477 246.597 li
297.168 251.503 li
298.863 244.78 li
300.555 259.585 li
302.246 245.593 li
303.941 238.148 li
305.633 236.823 li
307.328 230.913 li
309.02 245.257 li
310.711 244.484 li
312.406 240.062 li
314.098 231.612 li
315.789 239.206 li
317.484 243.347 li
319.176 247.226 li
320.867 266.21 li
322.562 259.042 li
324.254 268.202 li
325.945 277.753 li
327.641 294.019 li
329.332 321.136 li
331.027 321.3 li
332.719 322.429 li
334.41 339.07 li
336.105 347.042 li
337.797 337.878 li
339.488 339.874 li
341.184 351.284 li
342.875 354.652 li
344.566 356.218 li
346.262 358.327 li
347.953 357.847 li
349.645 357.905 li
351.34 357.519 li
353.031 357.441 li
354.727 357.937 li
356.418 358.765 li
358.109 359.187 li
359.805 357.796 li
361.496 352.605 li
363.188 347.948 li
364.883 350.386 li
@
364.883 350.386 mo
366.574 347.175 li
368.266 334.991 li
369.961 317.687 li
371.652 295.105 li
373.344 277.304 li
375.039 266.327 li
376.73 258.96 li
378.426 253.558 li
380.117 248.644 li
381.809 248.417 li
383.504 251.351 li
385.195 253.55 li
386.887 255.62 li
388.582 255.683 li
390.273 255.816 li
391.965 255.644 li
393.66 255.378 li
395.352 254.984 li
397.043 259.753 li
398.738 273.695 li
400.43 264.581 li
402.125 262.702 li
403.816 271.777 li
405.508 264.37 li
407.203 255.284 li
408.895 250.796 li
410.586 262.007 li
412.281 266.624 li
413.973 263.261 li
415.664 263.784 li
417.359 257.277 li
419.051 256.366 li
420.742 262.245 li
422.438 270.085 li
424.129 281.933 li
425.824 292.749 li
427.516 298.984 li
429.207 321.32 li
430.902 344.882 li
432.594 337.085 li
434.285 335.945 li
435.98 338.226 li
437.672 339.331 li
439.363 344.198 li
441.059 343.894 li
442.75 351.777 li
444.441 360.296 li
446.137 359.085 li
447.828 354.183 li
@
447.828 354.183 mo
449.523 349.952 li
451.215 348.413 li
452.906 351.163 li
454.602 354.82 li
456.293 355.796 li
457.984 339.144 li
459.68 293.952 li
461.371 267.32 li
463.062 264.765 li
464.758 260.23 li
466.449 269.124 li
468.141 267.82 li
469.836 272.402 li
471.527 261.82 li
473.223 260.96 li
474.914 283.007 li
476.605 270.609 li
478.301 263.566 li
479.992 257.976 li
481.684 270.804 li
483.379 282.749 li
485.07 267.609 li
486.762 265.07 li
488.457 267.07 li
490.148 272.175 li
491.84 274.257 li
493.535 268.097 li
495.227 272.605 li
496.922 297.761 li
498.613 308.132 li
500.305 326.402 li
502 333.359 li
503.691 329.62 li
505.383 348.48 li
507.078 348.937 li
508.77 374.96 li
510.461 382.859 li
512.156 360.421 li
513.848 358.89 li
515.539 359.171 li
517.234 359.265 li
518.926 359.011 li
520.621 359.085 li
522.312 359.206 li
524.004 359.105 li
525.699 358.859 li
527.391 358.964 li
529.082 358.999 li
530.777 358.788 li
@
530.777 358.788 mo
532.469 355.495 li
534.16 317.706 li
535.855 284.148 li
537.547 279.87 li
539.238 277.718 li
540.934 279.273 li
542.625 282.589 li
544.32 265.566 li
546.012 268.355 li
547.703 287.167 li
549.398 281.566 li
551.09 282.601 li
552.781 274.234 li
554.477 271.87 li
556.168 283.097 li
557.859 282.374 li
559.555 276.87 li
561.246 292.116 li
562.938 311.249 li
564.633 322.015 li
566.324 329.218 li
568.02 326.073 li
569.711 336.101 li
571.402 340.823 li
573.098 338.984 li
574.789 350.448 li
576.48 351.562 li
578.176 349.28 li
579.867 350.612 li
581.559 358.886 li
583.254 366.503 li
584.945 360.355 li
586.637 353.347 li
588.332 352.347 li
590.023 355.585 li
591.719 358.355 li
593.41 357.792 li
595.102 356.144 li
596.797 355.921 li
598.488 357.109 li
600.18 358.105 li
601.875 359.241 li
603.566 360.433 li
605.258 359.581 li
606.953 357.667 li
608.645 357.581 li
610.336 358.761 li
612.031 359.792 li
613.723 345.851 li
@
613.723 345.851 mo
615.414 305.214 li
617.109 279.144 li
618.801 284.87 li
620.496 290.573 li
622.188 295.46 li
623.879 293.429 li
625.574 292.015 li
627.266 290.898 li
628.957 285.878 li
630.652 280.577 li
632.344 279.905 li
634.035 294.648 li
635.73 294.198 li
637.422 284.484 li
639.113 288.105 li
640.809 291.277 li
642.5 290.745 li
644.195 288.878 li
645.887 287.089 li
647.578 290.769 li
649.273 278.441 li
650.965 275.491 li
652.656 290.316 li
654.352 301.273 li
656.043 299.081 li
657.734 301.945 li
659.43 314.53 li
661.121 321.472 li
662.812 336.784 li
664.508 345.687 li
666.199 344.605 li
667.895 356.753 li
669.586 362.394 li
671.277 350.409 li
672.973 347.8 li
674.664 349.112 li
676.355 350.409 li
678.051 352.238 li
679.742 353.327 li
681.434 352.609 li
683.129 352.226 li
684.82 352.976 li
686.512 354.179 li
688.207 354.612 li
689.898 354.448 li
691.594 353.659 li
693.285 353.659 li
694.977 354.984 li
696.672 355.394 li
@
696.672 355.394 mo
698.363 355.03 li
700.055 354.573 li
701.75 354.327 li
703.441 354.523 li
705.133 355.667 li
706.828 356.652 li
708.52 356.112 li
710.211 355.21 li
711.906 354.792 li
713.598 355.066 li
715.293 340.132 li
716.984 310.769 li
718.676 299.945 li
720.371 300.788 li
722.062 296.562 li
723.754 297.988 li
725.449 297.792 li
727.141 300.902 li
728.832 299.167 li
730.527 288.101 li
732.219 293.468 li
733.91 307.023 li
735.605 302.773 li
737.297 296.37 li
738.992 295.683 li
740.684 295.116 li
742.375 305.105 li
744.07 301.589 li
745.762 292.05 li
747.453 296.042 li
749.148 300.198 li
750.84 304.695 li
752.531 297.245 li
754.227 290.874 li
755.918 297.163 li
757.609 299.554 li
759.305 295.269 li
760.996 296.054 li
762.691 300.245 li
764.383 298.605 li
766.074 301.89 li
767.77 300.191 li
769.461 297.628 li
771.152 294.698 li
772.848 294.366 li
774.539 298.55 li
776.23 301.128 li
777.926 307.456 li
779.617 308.007 li
@
779.617 308.007 mo
781.309 304.652 li
783.004 300.952 li
784.695 301.077 li
786.391 301.362 li
788.082 298.769 li
789.773 301.175 li
791.469 300.761 li
793.16 308.573 li
794.852 308.382 li
796.547 319.312 li
798.238 339.71 li
799.93 340.718 li
801.625 346.167 li
803.316 355.675 li
805.008 352.503 li
806.703 344.702 li
808.395 353.933 li
810.09 361.464 li
811.781 358.155 li
813.473 353.577 li
815.168 353.913 li
816.859 356.644 li
818.551 358.148 li
820.246 357.402 li
821.938 355.534 li
823.629 355.558 li
825.324 356.82 li
827.016 356.894 li
828.707 356.234 li
830.402 356.409 li
832.094 356.941 li
833.789 357.159 li
835.48 357.144 li
837.172 356.823 li
838.867 356.632 li
840.559 356.96 li
842.25 357.546 li
843.945 357.64 li
845.637 357.484 li
847.328 357.71 li
849.023 358.07 li
850.715 358.476 li
852.406 358.636 li
854.102 358.445 li
855.793 358.089 li
857.488 360.636 li
@
33.094 314.374 mo
34.785 404.163 li
36.477 407.269 li
38.172 366.226 li
39.863 370.671 li
41.559 406.347 li
43.25 430.32 li
44.941 425.468 li
46.637 427.405 li
48.328 411.515 li
50.02 390.308 li
51.715 419.429 li
53.406 408.202 li
55.098 399.945 li
56.793 404.89 li
58.484 384.39 li
60.176 415.57 li
61.871 444.261 li
63.562 415.894 li
65.258 368.109 li
66.949 328.749 li
68.641 301.011 li
70.336 257.687 li
72.027 179.57 li
73.719 148.585 li
75.414 96.331 li
77.105 49.999 li
78.797 123.249 li
80.492 170.097 li
82.184 151.933 li
83.875 115.948 li
85.57 104.14 li
87.262 127.488 li
88.957 139.585 li
90.648 137.046 li
92.34 129.605 li
94.035 129.675 li
95.727 137.659 li
97.418 139.503 li
99.113 139.679 li
100.805 142.542 li
102.496 143.331 li
104.191 144.488 li
105.883 146.054 li
107.574 146.519 li
109.27 215.952 li
110.961 324.96 li
112.656 378.445 li
114.348 398.386 li
116.039 383.144 li
.0951247 .812772 1 .0193484 cmyk
@
116.039 383.144 mo
117.734 361.265 li
119.426 364.206 li
121.117 370.909 li
122.812 387.831 li
124.504 392.409 li
126.195 377.589 li
127.891 365.913 li
129.582 375.304 li
131.273 396.956 li
132.969 393.183 li
134.66 375.644 li
136.355 377.667 li
138.047 390.245 li
139.738 418.37 li
141.434 427.214 li
143.125 408.144 li
144.816 384.093 li
146.512 343.601 li
148.203 293.152 li
149.895 242.632 li
151.59 219.077 li
153.281 206.472 li
154.973 187.14 li
156.668 165.55 li
158.359 166.695 li
160.055 190.945 li
161.746 194.027 li
163.438 183.749 li
165.133 177.851 li
166.824 181.374 li
168.516 189.73 li
170.211 190.468 li
171.902 188.988 li
173.594 187.405 li
175.289 187.554 li
176.98 190.116 li
178.672 192.956 li
180.367 193.331 li
182.059 193.402 li
183.754 195.093 li
185.445 196.53 li
187.137 196.534 li
188.832 195.53 li
190.523 291.398 li
192.215 372.484 li
193.91 380.222 li
195.602 387.87 li
197.293 382.437 li
198.988 376.73 li
@
198.988 376.73 mo
200.68 376.558 li
202.371 396.902 li
204.066 389.671 li
205.758 385.468 li
207.453 380.402 li
209.145 372.913 li
210.836 390.37 li
212.531 385.675 li
214.223 382.159 li
215.914 381.14 li
217.609 384.409 li
219.301 388.964 li
220.992 384.312 li
222.688 389.327 li
224.379 377.601 li
226.07 394.612 li
227.766 419.019 li
229.457 403.093 li
231.152 368.882 li
232.844 341.988 li
234.535 328.624 li
236.23 308.921 li
237.922 270.128 li
239.613 227.999 li
241.309 219.441 li
243 214.562 li
244.691 207.55 li
246.387 229.64 li
248.078 236.386 li
249.77 217.855 li
251.465 208.667 li
253.156 210.284 li
254.848 220.386 li
256.543 229.28 li
258.234 228.519 li
259.93 224.734 li
261.621 222.316 li
263.312 222.835 li
265.008 226.288 li
266.699 227.015 li
268.391 225.765 li
270.086 227.112 li
271.777 227.562 li
273.469 227.902 li
275.164 228.976 li
276.855 229.437 li
278.547 230.046 li
280.242 230.698 li
281.934 231.034 li
@
281.934 231.034 mo
283.629 231.609 li
285.32 231.956 li
287.012 232.683 li
288.707 233.374 li
290.398 233.495 li
292.09 233.8 li
293.785 303.882 li
295.477 382.296 li
297.168 380.757 li
298.863 367.507 li
300.555 375.511 li
302.246 374.917 li
303.941 363.038 li
305.633 361.718 li
307.328 366.003 li
309.02 386.105 li
310.711 385.972 li
312.406 381.734 li
314.098 377.468 li
315.789 386.968 li
317.484 409.968 li
319.176 386.109 li
320.867 350.128 li
322.562 333.749 li
324.254 318.132 li
325.945 302.616 li
327.641 269.87 li
329.332 235.749 li
331.027 253.8 li
332.719 262.562 li
334.41 235.019 li
336.105 231.468 li
337.797 247.855 li
339.488 243.609 li
341.184 236.765 li
342.875 244.976 li
344.566 248.425 li
346.262 247.124 li
347.953 247.855 li
349.645 248.491 li
351.34 248.234 li
353.031 248.523 li
354.727 248.87 li
356.418 247.999 li
358.109 247.534 li
359.805 248.495 li
361.496 251.433 li
363.188 247.288 li
364.883 237.28 li
@
364.883 237.28 mo
366.574 235.245 li
368.266 251.538 li
369.961 280.081 li
371.652 306.323 li
373.344 325.488 li
375.039 339.331 li
376.73 350.995 li
378.426 357.538 li
380.117 360.64 li
381.809 370.491 li
383.504 382.624 li
385.195 377.788 li
386.887 363.476 li
388.582 362.823 li
390.273 372.612 li
391.965 372.777 li
393.66 365.663 li
395.352 364.245 li
397.043 365.695 li
398.738 375.777 li
400.43 384.433 li
402.125 382.862 li
403.816 372.534 li
405.508 376.347 li
407.203 381.632 li
408.895 370.609 li
410.586 372.308 li
412.281 369.288 li
413.973 377.448 li
415.664 390.917 li
417.359 391.495 li
419.051 392.812 li
420.742 375.855 li
422.438 355.222 li
424.129 337.394 li
425.824 317.945 li
427.516 301.921 li
429.207 281.706 li
430.902 266.343 li
432.594 247.288 li
434.285 258.999 li
435.98 277.355 li
437.672 272.405 li
439.363 272.39 li
441.059 271.792 li
442.75 269.226 li
444.441 265.362 li
446.137 268.476 li
447.828 272.093 li
@
447.828 272.093 mo
449.523 274.21 li
451.215 274.913 li
452.906 273.288 li
454.602 271.038 li
456.293 271.109 li
457.984 291.812 li
459.68 339.23 li
461.371 367.112 li
463.062 365.538 li
464.758 365.655 li
466.449 365.745 li
468.141 364.503 li
469.836 374.468 li
471.527 370.89 li
473.223 371.257 li
474.914 378.109 li
476.605 371.706 li
478.301 373.898 li
479.992 367.632 li
481.684 371.28 li
483.379 372.71 li
485.07 367.48 li
486.762 370.73 li
488.457 369.386 li
490.148 378.23 li
491.84 380.905 li
493.535 368.859 li
495.227 358.304 li
496.922 342.538 li
498.613 309.046 li
500.305 283.062 li
502 269.589 li
503.691 260.945 li
505.383 269.886 li
507.078 280.933 li
508.77 273.464 li
510.461 269.503 li
512.156 275.847 li
513.848 276.433 li
515.539 276.183 li
517.234 276.339 li
518.926 276.917 li
520.621 276.995 li
522.312 277.105 li
524.004 277.316 li
525.699 277.577 li
527.391 277.87 li
529.082 278.116 li
530.777 278.257 li
@
530.777 278.257 mo
532.469 288.109 li
534.16 336.39 li
535.855 371.316 li
537.547 366.155 li
539.238 365.12 li
540.934 369.698 li
542.625 376.53 li
544.32 371.05 li
546.012 371.034 li
547.703 373.433 li
549.398 374.948 li
551.09 382.784 li
552.781 380.191 li
554.477 376.28 li
556.168 367.32 li
557.859 358.077 li
559.555 348.62 li
561.246 334.726 li
562.938 326.144 li
564.633 317.398 li
566.324 301.023 li
568.02 282.687 li
569.711 279.972 li
571.402 287.14 li
573.098 281.765 li
574.789 278.362 li
576.48 286.952 li
578.176 292.945 li
579.867 292.519 li
581.559 281.257 li
583.254 279.308 li
584.945 286.749 li
586.637 288.183 li
588.332 289.03 li
590.023 286.905 li
591.719 285.148 li
593.41 285.831 li
595.102 287.265 li
596.797 287.948 li
598.488 288.105 li
600.18 287.956 li
601.875 287.132 li
603.566 286.484 li
605.258 287.23 li
606.953 288.902 li
608.645 289.288 li
610.336 288.718 li
612.031 288.484 li
613.723 315.195 li
@
613.723 315.195 mo
615.414 353.913 li
617.109 363.351 li
618.801 359.339 li
620.496 360.355 li
622.188 376.702 li
623.879 382.187 li
625.574 370.062 li
627.266 367.14 li
628.957 369.757 li
630.652 369.738 li
632.344 363.046 li
634.035 362.405 li
635.73 364.546 li
637.422 370.14 li
639.113 379.609 li
640.809 378.433 li
642.5 376.691 li
644.195 372.405 li
645.887 370.554 li
647.578 375.183 li
649.273 377.796 li
650.965 382.054 li
652.656 371.714 li
654.352 355.847 li
656.043 349.929 li
657.734 339.519 li
659.43 328.081 li
661.121 321.202 li
662.812 308.175 li
664.508 298.331 li
666.199 291.171 li
667.895 290.488 li
669.586 294.409 li
671.277 291.995 li
672.973 294.718 li
674.664 296.624 li
676.355 295.929 li
678.051 295.265 li
679.742 295.12 li
681.434 295.64 li
683.129 296.32 li
684.82 296.03 li
686.512 295.519 li
688.207 295.784 li
689.898 296.476 li
691.594 297.038 li
693.285 296.835 li
694.977 296.327 li
696.672 296.191 li
@
696.672 296.191 mo
698.363 296.546 li
700.055 297.12 li
701.75 297.597 li
703.441 297.784 li
705.133 297.495 li
706.828 296.948 li
708.52 297.175 li
710.211 297.995 li
711.906 298.253 li
713.598 298.148 li
715.293 318.179 li
716.984 348.257 li
718.676 366.464 li
720.371 373.093 li
722.062 366.245 li
723.754 362.429 li
725.449 364.609 li
727.141 374.558 li
728.832 377.96 li
730.527 368.316 li
732.219 366.573 li
733.91 364.687 li
735.605 369.21 li
737.297 371.585 li
738.992 361.468 li
740.684 359.937 li
742.375 368.327 li
744.07 380.714 li
745.762 380.773 li
747.453 372.57 li
749.148 368.066 li
750.84 363.734 li
752.531 367.222 li
754.227 370.57 li
755.918 364.784 li
757.609 364.862 li
759.305 364.195 li
760.996 370.316 li
762.691 376.796 li
764.383 371.179 li
766.074 372.308 li
767.77 369.448 li
769.461 368.448 li
771.152 368.909 li
772.848 365.667 li
774.539 367.499 li
776.23 373.503 li
777.926 377.191 li
779.617 371.066 li
@
779.617 371.066 mo
781.309 366.562 li
783.004 365.32 li
784.695 366.019 li
786.391 376.862 li
788.082 383.304 li
789.773 372.097 li
791.469 355.53 li
793.16 347.015 li
794.852 341.792 li
796.547 330.429 li
798.238 317.214 li
799.93 311.855 li
801.625 294.78 li
803.316 290.191 li
805.008 305.351 li
806.703 310.519 li
808.395 306.913 li
810.09 302.495 li
811.781 303.917 li
813.473 305.23 li
815.168 306.534 li
816.859 305.101 li
818.551 304.37 li
820.246 305.261 li
821.938 306.222 li
823.629 306.109 li
825.324 305.519 li
827.016 305.698 li
828.707 306.234 li
830.402 306.351 li
832.094 306.386 li
833.789 306.296 li
835.48 306.413 li
837.172 306.722 li
838.867 306.605 li
840.559 306.523 li
842.25 306.593 li
843.945 306.902 li
845.637 307.331 li
847.328 307.433 li
849.023 307.425 li
850.715 307.312 li
852.406 307.245 li
854.102 307.53 li
855.793 308.038 li
857.488 335.839 li
@
33.094 360.128 mo
34.785 355.171 li
36.477 352.503 li
38.172 356.269 li
39.863 356.015 li
41.559 355.398 li
43.25 357.48 li
44.941 356.323 li
46.637 353.097 li
48.328 356.144 li
50.02 359.566 li
51.715 358.128 li
53.406 356.609 li
55.098 355.839 li
56.793 358.991 li
58.484 360.452 li
60.176 359.835 li
61.871 365.722 li
63.562 390.222 li
65.258 386.566 li
66.949 383.605 li
68.641 412.792 li
70.336 424.89 li
72.027 415.585 li
73.719 412.659 li
75.414 418.183 li
77.105 389.456 li
78.797 346.171 li
80.492 338.148 li
82.184 351.214 li
83.875 354.593 li
85.57 357.616 li
87.262 361.609 li
88.957 361.948 li
90.648 360.827 li
92.34 360.562 li
94.035 362.05 li
95.727 362.995 li
97.418 362.964 li
99.113 363.038 li
100.805 363.12 li
102.496 362.984 li
104.191 363.058 li
105.883 362.909 li
107.574 363.003 li
109.27 361.46 li
110.961 359.171 li
112.656 359.601 li
114.348 360.812 li
116.039 359.288 li
.0729076 .314366 1 0 cmyk
@
116.039 359.288 mo
117.734 356.847 li
119.426 357.866 li
121.117 360.019 li
122.812 360.667 li
124.504 358.964 li
126.195 355.581 li
127.891 357.835 li
129.582 360.378 li
131.273 360.519 li
132.969 360.144 li
134.66 359.823 li
136.355 358.429 li
138.047 356.894 li
139.738 359.855 li
141.434 365.304 li
143.125 384.417 li
144.816 394.39 li
146.512 395.312 li
148.203 404.73 li
149.895 393.948 li
151.59 379.05 li
153.281 388.124 li
154.973 376.925 li
156.668 362.648 li
158.359 365.628 li
160.055 358.265 li
161.746 357.007 li
163.438 355.378 li
165.133 356.542 li
166.824 361.589 li
168.516 362.054 li
170.211 361.437 li
171.902 360.312 li
173.594 361.202 li
175.289 362.511 li
176.98 362.804 li
178.672 362.862 li
180.367 362.843 li
182.059 362.898 li
183.754 362.847 li
185.445 362.183 li
187.137 361.503 li
188.832 361.433 li
190.523 361.12 li
192.215 358.64 li
193.91 358.257 li
195.602 359.745 li
197.293 360.226 li
198.988 360.238 li
@
198.988 360.238 mo
200.68 360.612 li
202.371 359.948 li
204.066 359.452 li
205.758 360.968 li
207.453 361.425 li
209.145 359.968 li
210.836 358.64 li
212.531 358.605 li
214.223 359.218 li
215.914 359.862 li
217.609 360.308 li
219.301 360.46 li
220.992 358.175 li
222.688 358.362 li
224.379 360.741 li
226.07 360.577 li
227.766 359.46 li
229.457 374.085 li
231.152 387.745 li
232.844 378.745 li
234.535 382.652 li
236.23 395.886 li
237.922 392.245 li
239.613 385.316 li
241.309 373.823 li
243 363.402 li
244.691 361.902 li
246.387 357.859 li
248.078 355.702 li
249.77 362.378 li
251.465 364.628 li
253.156 361.101 li
254.848 360.234 li
256.543 359.698 li
258.234 360.71 li
259.93 359.999 li
261.621 359.573 li
263.312 361.577 li
265.008 362.886 li
266.699 362.616 li
268.391 362.624 li
270.086 363.015 li
271.777 363.03 li
273.469 363.023 li
275.164 363.03 li
276.855 363.038 li
278.547 363.027 li
280.242 363.042 li
281.934 363.042 li
@
281.934 363.042 mo
283.629 363.038 li
287.012 363.038 li
288.707 363.054 li
290.398 363.058 li
292.09 363.058 li
293.785 361.745 li
295.477 359.019 li
297.168 359.827 li
298.863 361.323 li
300.555 359.909 li
302.246 360.921 li
303.941 361.167 li
305.633 358.073 li
307.328 357.03 li
309.02 359.144 li
310.711 360.206 li
312.406 358.386 li
314.098 359.562 li
315.789 359.933 li
317.484 370.03 li
319.176 382.144 li
320.867 381.597 li
322.562 382.191 li
324.254 382.882 li
325.945 386.484 li
327.641 385.163 li
329.332 367.691 li
331.027 356.804 li
332.719 368.62 li
334.41 377.171 li
336.105 368.077 li
337.797 358.827 li
339.488 363.034 li
341.184 365.343 li
342.875 362.167 li
344.566 363.116 li
346.262 363.152 li
347.953 363.081 li
349.645 363.112 li
351.34 363.105 li
353.031 363.144 li
354.727 363.284 li
356.418 363.198 li
358.109 362.261 li
359.805 360.706 li
361.496 360.097 li
363.188 360.527 li
364.883 356.663 li
@
364.883 356.663 mo
366.574 350.3 li
368.266 346.339 li
369.961 342.284 li
371.652 341.105 li
373.344 344.527 li
375.039 347.82 li
376.73 350.312 li
378.426 353.327 li
380.117 355.261 li
381.809 356.749 li
383.504 359.46 li
385.195 361.448 li
386.887 362.273 li
388.582 362.753 li
390.273 363.046 li
391.965 363.097 li
393.66 362.995 li
395.352 361.312 li
397.043 360.882 li
398.738 361.124 li
400.43 360.663 li
402.125 361.23 li
403.816 361.284 li
405.508 361.323 li
407.203 361.089 li
408.895 360.398 li
410.586 361.054 li
412.281 362.331 li
413.973 362.132 li
415.664 361.191 li
417.359 357.874 li
419.051 365.152 li
420.742 377.902 li
422.438 380.691 li
424.129 380.972 li
425.824 380.015 li
427.516 380.085 li
429.207 380.468 li
430.902 378.659 li
432.594 367.445 li
434.285 358.859 li
435.98 360.464 li
437.672 358.62 li
439.363 358.308 li
441.059 358.527 li
442.75 357.73 li
444.441 359.855 li
446.137 361.171 li
447.828 361.003 li
@
447.828 361.003 mo
449.523 361.878 li
451.215 362.327 li
452.906 361.757 li
454.602 361.753 li
456.293 362.698 li
457.984 362.652 li
459.68 361.722 li
461.371 361.655 li
463.062 360.859 li
464.758 360.956 li
466.449 361.757 li
468.141 361.425 li
469.836 360.597 li
471.527 360.566 li
473.223 361.46 li
474.914 361.73 li
476.605 361.323 li
478.301 361.187 li
479.992 361.202 li
481.684 361.503 li
483.379 362.148 li
485.07 361.761 li
486.762 361.769 li
488.457 360.905 li
490.148 359.612 li
491.84 364.144 li
493.535 374.073 li
495.227 379.234 li
496.922 381.374 li
498.613 385.214 li
500.305 381.155 li
502 374.441 li
503.691 367.464 li
505.383 359.722 li
507.078 357.605 li
508.77 362.468 li
510.461 365.019 li
512.156 362.765 li
513.848 363.132 li
515.539 363.171 li
517.234 363.195 li
518.926 363.202 li
522.312 363.202 li
524.004 363.198 li
525.699 363.195 li
527.391 363.191 li
529.082 363.198 li
530.777 363.198 li
@
530.777 363.198 mo
532.469 362.761 li
534.16 361.925 li
535.855 361.116 li
537.547 361.355 li
539.238 361.351 li
540.934 361.476 li
542.625 361.527 li
544.32 361.05 li
546.012 361.577 li
547.703 362.39 li
549.398 362.347 li
551.09 361.628 li
552.781 361.398 li
554.477 358.878 li
556.168 359.519 li
557.859 369.464 li
559.555 376.55 li
561.246 377.07 li
562.938 376.226 li
564.633 375.14 li
566.324 373.062 li
568.02 372.312 li
569.711 367.851 li
571.402 360.511 li
573.098 361.39 li
574.789 362.534 li
576.48 361.601 li
578.176 361.081 li
579.867 361.402 li
581.559 361.96 li
583.254 361.437 li
584.945 361.261 li
586.637 361.652 li
588.332 362.296 li
590.023 362.081 li
591.719 362.405 li
593.41 363.015 li
595.102 363.171 li
596.797 363.023 li
598.488 362.589 li
600.18 362.32 li
601.875 362.378 li
603.566 362.827 li
605.258 363.019 li
606.953 363.038 li
608.645 362.917 li
610.336 362.612 li
612.031 362.698 li
613.723 362.046 li
@
613.723 362.046 mo
615.414 361.862 li
617.109 360.862 li
618.801 360.187 li
620.496 360.355 li
622.188 360.995 li
623.879 361.878 li
625.574 361.124 li
627.266 361.55 li
628.957 362.015 li
630.652 361.48 li
632.344 361.452 li
634.035 361.249 li
635.73 359.976 li
637.422 359.835 li
639.113 360.874 li
640.809 361.339 li
642.5 360.843 li
644.195 361.605 li
645.887 362.433 li
647.578 361.62 li
649.273 360.644 li
650.965 366.261 li
652.656 373.796 li
654.352 374.488 li
656.043 374.714 li
657.734 374.601 li
659.43 374.155 li
661.121 376.241 li
662.812 373.777 li
664.508 372.28 li
666.199 368.331 li
667.895 360.46 li
669.586 360.726 li
671.277 362.464 li
672.973 362.597 li
674.664 362.359 li
676.355 362.241 li
678.051 362.601 li
679.742 363.011 li
681.434 363.253 li
683.129 363.077 li
684.82 362.722 li
686.512 362.738 li
688.207 363.093 li
689.898 363.316 li
691.594 363.159 li
693.285 362.827 li
694.977 362.745 li
696.672 363.042 li
@
696.672 363.042 mo
698.363 363.312 li
700.055 363.359 li
701.75 363.163 li
703.441 362.89 li
705.133 362.808 li
706.828 363.03 li
708.52 363.222 li
710.211 363.277 li
711.906 363.253 li
713.598 363.081 li
715.293 362.8 li
716.984 362.366 li
718.676 361.792 li
720.371 361.823 li
722.062 361.476 li
723.754 361.183 li
725.449 360.378 li
727.141 360.691 li
728.832 362.159 li
730.527 361.456 li
732.219 361.316 li
733.91 362.148 li
735.605 361.644 li
737.297 361.605 li
738.992 361.464 li
740.684 360.214 li
742.375 359.019 li
744.07 359.745 li
745.762 361.421 li
747.453 360.253 li
749.148 360.605 li
750.84 362.218 li
752.531 361.964 li
754.227 362.171 li
755.918 362.202 li
757.609 361.195 li
759.305 360.78 li
760.996 361.667 li
762.691 362.034 li
764.383 360.726 li
766.074 361.198 li
767.77 362.648 li
769.461 362.57 li
771.152 362.171 li
772.848 361.706 li
774.539 361.855 li
776.23 362.327 li
777.926 362.335 li
779.617 362.128 li
@
779.617 362.128 mo
781.309 361.425 li
783.004 361.331 li
784.695 362.066 li
786.391 362.534 li
788.082 365.405 li
789.773 371.316 li
791.469 368.816 li
793.16 368.491 li
794.852 376.331 li
796.547 376.425 li
798.238 372.667 li
799.93 373.312 li
801.625 374.308 li
803.316 366.57 li
805.008 359.038 li
806.703 360.386 li
808.395 361.847 li
810.09 361.695 li
811.781 362.265 li
813.473 362.605 li
815.168 362.659 li
816.859 362.382 li
818.551 362.804 li
820.246 363.081 li
821.938 363.136 li
823.629 363.093 li
825.324 363.038 li
827.016 363.273 li
828.707 363.32 li
830.402 363.159 li
832.094 363.066 li
833.789 363.136 li
835.48 363.257 li
837.172 363.226 li
838.867 363.097 li
840.559 363.058 li
842.25 363.14 li
843.945 363.277 li
845.637 363.245 li
847.328 363.081 li
849.023 363.027 li
850.715 363.054 li
852.406 363.167 li
854.102 363.323 li
855.793 363.269 li
857.488 363.292 li
@
33.094 355.628 mo
34.785 353.671 li
36.477 356.015 li
38.172 354.98 li
39.863 355.382 li
41.559 356.136 li
43.25 354.55 li
44.941 351.48 li
46.637 353.089 li
48.328 353.222 li
50.02 354.589 li
51.715 357.683 li
53.406 356.624 li
55.098 365.265 li
56.793 361.503 li
58.484 354.335 li
60.176 357.187 li
61.871 356.128 li
63.562 356.812 li
65.258 355.82 li
66.949 351.089 li
68.641 352.105 li
70.336 356.464 li
72.027 357.038 li
73.719 354.636 li
75.414 364.073 li
77.105 363.89 li
78.797 353.21 li
80.492 353.534 li
82.184 353.316 li
83.875 355.964 li
85.57 359.726 li
87.262 361.429 li
88.957 361.714 li
90.648 361.667 li
92.34 361.495 li
94.035 362.343 li
95.727 363.011 li
97.418 363.308 li
99.113 363.359 li
100.805 363.32 li
102.496 363.241 li
104.191 363.277 li
107.574 363.308 li
109.27 362.238 li
110.961 359.37 li
112.656 359.011 li
114.348 360.183 li
116.039 358.784 li
.613703 .976837 .0447395 .00808728 cmyk
@
116.039 358.784 mo
117.734 355.612 li
119.426 355.499 li
121.117 358.886 li
122.812 360.636 li
124.504 359.855 li
126.195 356.359 li
127.891 355.82 li
129.582 358.437 li
131.273 360.441 li
132.969 360.921 li
134.66 359.167 li
136.355 357.191 li
138.047 357.71 li
139.738 358.452 li
141.434 354.441 li
143.125 356.718 li
144.816 357.241 li
146.512 352.48 li
148.203 356.257 li
149.895 358.421 li
151.59 356.862 li
153.281 359.441 li
154.973 361.062 li
156.668 359.3 li
158.359 359.234 li
160.055 360.554 li
161.746 361.73 li
163.438 361.382 li
165.133 360.882 li
166.824 361.831 li
168.516 362.741 li
170.211 363.03 li
171.902 363.116 li
173.594 363.183 li
175.289 363.175 li
176.98 363.245 li
178.672 363.28 li
180.367 363.343 li
182.059 363.362 li
183.754 363.327 li
185.445 363.21 li
187.137 363.077 li
188.832 362.991 li
190.523 359.909 li
192.215 358.53 li
193.91 360.417 li
195.602 360.085 li
197.293 358.878 li
198.988 357.691 li
@
198.988 357.691 mo
200.68 358.726 li
202.371 360.101 li
204.066 358.316 li
205.758 357.706 li
207.453 357.847 li
209.145 358.468 li
210.836 359.765 li
212.531 359.304 li
214.223 361.32 li
215.914 360.792 li
217.609 358.417 li
219.301 358.632 li
220.992 360.925 li
222.688 361.081 li
224.379 358.484 li
226.07 358.507 li
227.766 359.48 li
229.457 360.96 li
231.152 361.593 li
232.844 359.648 li
234.535 358.234 li
236.23 356.761 li
237.922 358.3 li
239.613 358.441 li
241.309 356.679 li
243 354.933 li
244.691 355.773 li
246.387 359.741 li
248.078 358.925 li
249.77 359.019 li
251.465 360.655 li
253.156 361.659 li
254.848 360.573 li
256.543 359.468 li
258.234 360.378 li
259.93 361.921 li
261.621 362.527 li
263.312 362.698 li
265.008 362.991 li
266.699 362.96 li
268.391 363.148 li
270.086 363.269 li
271.777 363.316 li
273.469 363.343 li
275.164 363.32 li
276.855 363.347 li
278.547 363.398 li
280.242 363.409 li
281.934 363.394 li
@
281.934 363.394 mo
283.629 363.382 li
285.32 363.386 li
287.012 363.362 li
288.707 363.362 li
290.398 363.366 li
292.09 363.359 li
293.785 361.484 li
295.477 359.144 li
297.168 359.39 li
298.863 360.382 li
300.555 360.761 li
302.246 361.175 li
303.941 361.433 li
305.633 361.37 li
307.328 360.808 li
309.02 359.995 li
310.711 359.296 li
312.406 358.714 li
314.098 359.155 li
315.789 361.116 li
317.484 361.241 li
319.176 358.675 li
320.867 359.241 li
322.562 358.87 li
324.254 359.042 li
325.945 361.624 li
327.641 359.909 li
329.332 355.984 li
331.027 353.488 li
332.719 355.976 li
334.41 357.382 li
336.105 358.202 li
337.797 361.238 li
339.488 362.116 li
341.184 361.929 li
342.875 361.39 li
344.566 362.23 li
346.262 363.23 li
347.953 363.312 li
349.645 363.37 li
351.34 363.343 li
353.031 363.3 li
354.727 363.284 li
356.418 363.183 li
358.109 362.976 li
359.805 362.386 li
361.496 361.3 li
363.188 359.054 li
364.883 357.941 li
@
364.883 357.945 mo
366.574 358.241 li
368.266 360.058 li
369.961 360.362 li
371.652 356.816 li
373.344 357.503 li
375.039 361.003 li
376.73 362.12 li
378.426 361.046 li
380.117 360.945 li
381.809 361.476 li
383.504 361.839 li
385.195 362.566 li
386.887 362.753 li
388.582 363.109 li
391.965 363.116 li
393.66 363.03 li
395.352 361.933 li
397.043 361.038 li
398.738 361.441 li
400.43 361.273 li
402.125 360.175 li
403.816 359.421 li
405.508 359.706 li
407.203 360.362 li
408.895 361.359 li
410.586 361.374 li
412.281 360.777 li
413.973 360.636 li
415.664 360.327 li
417.359 359.823 li
419.051 360.046 li
420.742 357.945 li
422.438 357.722 li
424.129 360.269 li
425.824 360.874 li
427.516 361.339 li
429.207 358.448 li
430.902 357.226 li
432.594 357.659 li
434.285 358.519 li
435.98 360.374 li
437.672 360.362 li
439.363 361.3 li
441.059 362.495 li
442.75 362.261 li
444.441 361.952 li
446.137 362.507 li
447.828 362.304 li
@
447.828 362.304 mo
449.523 362.187 li
451.215 362.862 li
452.906 362.905 li
454.602 362.695 li
456.293 362.991 li
457.984 362.468 li
459.68 361.53 li
461.371 361.382 li
463.062 361.214 li
464.758 360.738 li
466.449 360.53 li
468.141 361.23 li
469.836 362.179 li
471.527 361.843 li
473.223 360.788 li
474.914 359.999 li
476.605 359.933 li
478.301 360.616 li
479.992 360.429 li
481.684 360.687 li
483.379 361.066 li
485.07 360.96 li
486.762 361.101 li
488.457 361.331 li
490.148 361.71 li
491.84 359.097 li
493.535 359.132 li
495.227 361.812 li
496.922 361.046 li
498.613 362.085 li
500.305 364.972 li
502 363.652 li
503.691 360.562 li
505.383 361.394 li
507.078 361.222 li
508.77 359.952 li
510.461 360.636 li
512.156 361.593 li
513.848 362.511 li
515.539 362.913 li
517.234 363.21 li
518.926 363.238 li
520.621 363.284 li
522.312 363.343 li
524.004 363.37 li
525.699 363.382 li
527.391 363.386 li
529.082 363.386 li
530.777 363.394 li
@
530.777 363.394 mo
532.469 363.171 li
534.16 362.452 li
535.855 361.741 li
537.547 360.984 li
539.238 360.452 li
540.934 361.081 li
542.625 361.851 li
544.32 361.398 li
546.012 360.675 li
547.703 360.327 li
549.398 360.745 li
551.09 361.265 li
552.781 360.527 li
554.477 360.859 li
556.168 360.562 li
557.859 360.351 li
559.555 360.788 li
561.246 361.339 li
562.938 361.898 li
564.633 360.753 li
566.324 361.534 li
568.02 362.128 li
569.711 360.976 li
571.402 360.398 li
573.098 360.999 li
574.789 361.558 li
576.48 362.195 li
578.176 362.507 li
579.867 362.351 li
581.559 361.495 li
583.254 360.89 li
584.945 361.042 li
586.637 361.343 li
588.332 362.64 li
590.023 363.015 li
591.719 363.019 li
593.41 363.144 li
595.102 363.245 li
596.797 363.343 li
598.488 363.277 li
600.18 363.073 li
601.875 362.972 li
603.566 363.179 li
605.258 363.222 li
606.953 363.253 li
608.645 363.312 li
610.336 363.206 li
612.031 363.206 li
613.723 362.98 li
@
613.723 362.98 mo
615.414 362.198 li
617.109 361.624 li
618.801 361.761 li
620.496 361.73 li
622.188 361.702 li
623.879 361.718 li
625.574 360.886 li
627.266 360.624 li
628.957 361.257 li
630.652 362.085 li
632.344 362.152 li
634.035 361.593 li
635.73 361.64 li
637.422 361.632 li
639.113 361.515 li
640.809 360.687 li
642.5 359.659 li
644.195 359.753 li
645.887 361.187 li
647.578 361.808 li
649.273 361.374 li
650.965 361.866 li
652.656 361.722 li
654.352 361.874 li
656.043 362.323 li
657.734 362.249 li
659.43 361.202 li
661.121 362.214 li
662.812 362.448 li
664.508 359.484 li
666.199 359.132 li
667.895 361.023 li
669.586 362.05 li
671.277 362.394 li
672.973 362.866 li
674.664 362.972 li
676.355 363.21 li
678.051 363.202 li
679.742 363.277 li
681.434 363.402 li
683.129 363.417 li
684.82 363.327 li
686.512 363.32 li
688.207 363.366 li
689.898 363.347 li
691.594 363.366 li
693.285 363.308 li
694.977 363.265 li
696.672 363.331 li
@
696.672 363.331 mo
698.363 363.355 li
700.055 363.359 li
701.75 363.374 li
703.441 363.304 li
705.133 363.292 li
706.828 363.362 li
708.52 363.32 li
710.211 363.292 li
711.906 363.37 li
713.598 363.413 li
715.293 362.71 li
716.984 361.675 li
718.676 361.827 li
720.371 362.421 li
722.062 362.046 li
723.754 361.831 li
725.449 362.073 li
727.141 362.085 li
728.832 361.98 li
730.527 361.702 li
732.219 361.187 li
733.91 361.187 li
735.605 361.976 li
737.297 362.362 li
738.992 362.155 li
740.684 361.909 li
742.375 361.855 li
744.07 361.331 li
745.762 361.3 li
747.453 360.96 li
749.148 360.706 li
750.84 361.636 li
752.531 362.265 li
754.227 362.476 li
755.918 362.335 li
757.609 362.058 li
759.305 361.648 li
760.996 361.445 li
762.691 361.503 li
764.383 361.179 li
766.074 361.073 li
767.77 361.745 li
769.461 362.245 li
771.152 362.175 li
772.848 361.413 li
774.539 361.249 li
776.23 361.773 li
777.926 362.054 li
779.617 362.179 li
@
779.617 362.183 mo
781.309 361.683 li
783.004 361.445 li
784.695 361.882 li
786.391 362.218 li
788.082 361.917 li
789.773 362.159 li
791.469 362.144 li
793.16 361.308 li
794.852 361.288 li
796.547 361.741 li
798.238 361.437 li
799.93 361.062 li
801.625 361.667 li
803.316 361.308 li
805.008 360.905 li
806.703 361.05 li
808.395 361.8 li
810.09 362.948 li
811.781 362.765 li
813.473 362.73 li
815.168 363.019 li
816.859 362.882 li
818.551 362.995 li
820.246 363.038 li
821.938 363.073 li
823.629 363.249 li
825.324 363.3 li
827.016 363.355 li
828.707 363.374 li
830.402 363.355 li
832.094 363.323 li
833.789 363.366 li
835.48 363.398 li
837.172 363.382 li
838.867 363.355 li
840.559 363.323 li
842.25 363.362 li
843.945 363.366 li
845.637 363.362 li
847.328 363.339 li
849.023 363.288 li
850.715 363.288 li
852.406 363.339 li
854.102 363.359 li
855.793 363.359 li
857.488 363.409 li
@
33.094 358.28 mo
34.785 356.101 li
36.477 355.019 li
38.172 356.886 li
39.863 358.808 li
41.559 358.898 li
43.25 358.566 li
44.941 356.995 li
46.637 355.839 li
48.328 358.128 li
50.02 357.499 li
51.715 357.761 li
53.406 355.862 li
55.098 355.331 li
56.793 358.683 li
58.484 357.132 li
60.176 357.198 li
61.871 358.253 li
63.562 358.917 li
65.258 361.148 li
68.641 354.187 li
70.336 355.644 li
72.027 357.366 li
73.719 350.878 li
75.414 345.831 li
77.105 353.843 li
78.797 354.855 li
80.492 351.273 li
82.184 352.238 li
83.875 355.331 li
85.57 359.999 li
87.262 361.804 li
88.957 362.652 li
90.648 362.999 li
92.34 362.972 li
94.035 363.085 li
95.727 363.234 li
97.418 363.339 li
99.113 363.32 li
100.805 363.238 li
102.496 363.288 li
104.191 363.327 li
105.883 363.304 li
107.574 363.288 li
109.27 361.167 li
110.961 360.183 li
112.656 359.175 li
114.348 358.499 li
116.039 357.249 li
.598047 .119753 1 .00653086 cmyk
@
116.039 357.249 mo
117.734 356.265 li
119.426 359.937 li
121.117 359.53 li
122.812 358.769 li
124.504 357.464 li
126.195 356.792 li
127.891 361.038 li
129.582 360.488 li
131.273 359.062 li
132.969 358.566 li
134.66 358.023 li
136.355 360.038 li
138.047 357.988 li
139.738 358.812 li
141.434 359.78 li
143.125 359.042 li
144.816 359.245 li
146.512 356.675 li
148.203 356.546 li
149.895 358.3 li
151.59 356.472 li
153.281 349.136 li
154.973 347.507 li
156.668 354.687 li
158.359 357.323 li
160.055 357.288 li
161.746 358.101 li
163.438 359.87 li
165.133 362.706 li
166.824 362.695 li
168.516 362.738 li
170.211 362.878 li
171.902 362.722 li
173.594 362.898 li
175.289 363.273 li
176.98 363.362 li
178.672 363.362 li
180.367 363.308 li
182.059 363.308 li
183.754 363.288 li
185.445 363.234 li
187.137 363.222 li
188.832 363.218 li
190.523 362.238 li
192.215 359.581 li
193.91 360.093 li
195.602 360.542 li
197.293 360.577 li
198.988 361.925 li
@
198.988 361.925 mo
200.68 360.202 li
202.371 360.308 li
204.066 360.023 li
205.758 360.155 li
207.453 361.534 li
209.145 359.89 li
210.836 360.503 li
212.531 360.089 li
214.223 360.03 li
215.914 361.71 li
217.609 360.366 li
219.301 360.882 li
220.992 360.28 li
222.688 360.148 li
224.379 361.964 li
226.07 361.116 li
227.766 360.933 li
229.457 361.655 li
231.152 361.831 li
232.844 360.288 li
234.535 356.855 li
236.23 357.945 li
237.922 359.734 li
239.613 353.62 li
241.309 346.898 li
243 350.163 li
244.691 357.433 li
246.387 359.831 li
248.078 359.534 li
249.77 359.093 li
251.465 360.452 li
253.156 362.077 li
254.848 362.519 li
256.543 362.652 li
258.234 362.702 li
259.93 362.749 li
261.621 362.948 li
263.312 363.179 li
265.008 363.144 li
266.699 363.222 li
268.391 363.339 li
270.086 363.355 li
271.777 363.366 li
273.469 363.366 li
275.164 363.359 li
276.855 363.355 li
278.547 363.366 li
280.242 363.355 li
281.934 363.351 li
@
281.934 363.351 mo
283.629 363.343 li
285.32 363.347 li
287.012 363.343 li
288.707 363.327 li
290.398 363.347 li
292.09 363.37 li
293.785 362.57 li
295.477 360.698 li
297.168 360.355 li
298.863 360.515 li
300.555 360.163 li
302.246 360.71 li
303.941 361.71 li
305.633 362.405 li
307.328 361.374 li
309.02 361.191 li
310.711 361.288 li
312.406 360.417 li
314.098 360.886 li
315.789 360.96 li
317.484 361.39 li
319.176 362.378 li
320.867 361.648 li
322.562 358.687 li
324.254 355.034 li
325.945 353.722 li
327.641 357.878 li
329.332 360.488 li
331.027 355.624 li
332.719 351.855 li
334.41 355.988 li
336.105 360.042 li
337.797 360.851 li
339.488 362.468 li
341.184 362.937 li
342.875 362.952 li
344.566 363.187 li
346.262 363.355 li
347.953 363.32 li
349.645 363.32 li
351.34 363.335 li
353.031 363.382 li
354.727 363.413 li
356.418 363.402 li
358.109 363.273 li
359.805 362.812 li
361.496 361.632 li
363.188 360.527 li
364.883 360.87 li
@
364.883 360.87 mo
366.574 360.991 li
368.266 360.28 li
369.961 359.202 li
371.652 357.007 li
373.344 355.847 li
375.039 356.89 li
376.73 357.573 li
378.426 357.249 li
380.117 357.593 li
381.809 359.62 li
383.504 361.652 li
385.195 361.859 li
386.887 362.308 li
388.582 363.136 li
390.273 363.112 li
391.965 363.187 li
393.66 363.331 li
395.352 362.331 li
397.043 360.909 li
398.738 360.702 li
400.43 360.777 li
402.125 361.101 li
403.816 361.913 li
405.508 361.8 li
407.203 361.73 li
408.895 361.163 li
410.586 361.245 li
412.281 361.812 li
413.973 361.757 li
415.664 362.05 li
417.359 361.265 li
419.051 361.777 li
420.742 362.808 li
422.438 362.862 li
424.129 362.085 li
425.824 361.179 li
427.516 356.878 li
429.207 350.683 li
430.902 349.773 li
432.594 354.695 li
434.285 359.695 li
435.98 361.073 li
437.672 362.12 li
439.363 362.628 li
441.059 361.866 li
442.75 361.734 li
444.441 362.726 li
446.137 363.038 li
447.828 363.062 li
@
447.828 363.062 mo
449.523 363.312 li
451.215 363.261 li
452.906 363.132 li
454.602 363.191 li
456.293 363.312 li
457.984 363.097 li
459.68 361.581 li
461.371 361.042 li
463.062 361.417 li
464.758 361.124 li
466.449 361.554 li
468.141 361.394 li
469.836 361.558 li
471.527 361.687 li
473.223 361.706 li
474.914 362.132 li
476.605 361.527 li
478.301 361.745 li
479.992 361.546 li
481.684 361.464 li
483.379 362.038 li
485.07 361.577 li
486.762 361.898 li
488.457 361.773 li
490.148 361.683 li
491.84 362.347 li
493.535 362.515 li
495.227 361.921 li
496.922 360.98 li
498.613 360.476 li
500.305 358.562 li
502 358.198 li
503.691 360.87 li
505.383 362.339 li
507.078 361.488 li
508.77 360.878 li
510.461 362.136 li
512.156 363.097 li
513.848 363.249 li
515.539 363.359 li
517.234 363.366 li
518.926 363.382 li
520.621 363.366 li
522.312 363.335 li
524.004 363.359 li
525.699 363.39 li
527.391 363.398 li
529.082 363.394 li
530.777 363.382 li
@
530.777 363.386 mo
532.469 363.335 li
534.16 362.3 li
535.855 361.464 li
537.547 361.905 li
539.238 362.327 li
540.934 361.886 li
542.625 361.991 li
544.32 361.738 li
546.012 361.624 li
547.703 362.566 li
549.398 362.214 li
551.09 362.179 li
552.781 361.78 li
554.477 361.702 li
556.168 362.265 li
557.859 361.448 li
559.555 360.956 li
561.246 361.777 li
562.938 360.695 li
564.633 358.612 li
566.324 358.476 li
568.02 360.312 li
569.711 361.941 li
571.402 360.679 li
573.098 359.999 li
574.789 361.722 li
576.48 362.874 li
578.176 362.757 li
579.867 362.445 li
581.559 362.609 li
583.254 362.917 li
584.945 362.82 li
586.637 362.878 li
588.332 363.112 li
590.023 363.273 li
591.719 363.343 li
593.41 363.37 li
595.102 363.355 li
596.797 363.292 li
598.488 363.238 li
600.18 363.288 li
601.875 363.359 li
603.566 363.382 li
605.258 363.374 li
606.953 363.366 li
608.645 363.308 li
610.336 363.323 li
612.031 363.374 li
613.723 362.839 li
@
613.723 362.839 mo
615.414 362.191 li
617.109 362.241 li
618.801 362.112 li
620.496 361.808 li
622.188 361.726 li
623.879 361.792 li
625.574 361.632 li
627.266 361.476 li
628.957 361.503 li
630.652 361.612 li
632.344 361.902 li
634.035 362.394 li
635.73 362.523 li
637.422 361.687 li
639.113 362.023 li
640.809 361.98 li
642.5 361.933 li
644.195 362.839 li
645.887 362.284 li
647.578 362.159 li
649.273 361.675 li
650.965 361.159 li
652.656 361.999 li
654.352 361.96 li
656.043 361.394 li
657.734 361.48 li
659.43 361.144 li
662.812 358.253 li
664.508 357.991 li
666.199 359.882 li
667.895 360.925 li
669.586 361.218 li
671.277 362.308 li
672.973 362.702 li
674.664 362.991 li
676.355 363.124 li
678.051 363.218 li
679.742 363.359 li
681.434 363.39 li
683.129 363.308 li
684.82 363.112 li
686.512 363.097 li
688.207 363.304 li
689.898 363.402 li
691.594 363.378 li
693.285 363.308 li
694.977 363.312 li
696.672 363.386 li
@
696.672 363.386 mo
698.363 363.405 li
700.055 363.405 li
701.75 363.402 li
703.441 363.374 li
705.133 363.323 li
706.828 363.323 li
708.52 363.39 li
710.211 363.413 li
711.906 363.394 li
713.598 363.359 li
715.293 362.913 li
716.984 362.386 li
718.676 361.745 li
720.371 361.433 li
722.062 362.202 li
723.754 362.429 li
725.449 362.343 li
727.141 361.995 li
728.832 361.862 li
730.527 361.917 li
732.219 361.413 li
733.91 361.78 li
735.605 361.855 li
737.297 361.769 li
738.992 362.413 li
740.684 362.538 li
742.375 362.112 li
744.07 361.933 li
745.762 362.21 li
747.453 361.964 li
749.148 361.804 li
750.84 362.007 li
752.531 361.96 li
754.227 362.105 li
755.918 362.452 li
757.609 362.792 li
759.305 362.023 li
760.996 361.909 li
762.691 362.362 li
764.383 362.112 li
766.074 362.429 li
767.77 362.187 li
769.461 362.23 li
771.152 362.448 li
772.848 362.312 li
774.539 362.757 li
776.23 362.128 li
777.926 362.066 li
779.617 362.433 li
@
779.617 362.433 mo
781.309 362.327 li
783.004 362.706 li
784.695 362.441 li
786.391 362.359 li
788.082 362.753 li
789.773 362.741 li
791.469 362.421 li
793.16 360.476 li
794.852 359.304 li
796.547 361.261 li
798.238 360.484 li
799.93 357.183 li
801.625 357.238 li
803.316 359.851 li
805.008 361.976 li
806.703 362.839 li
808.395 362.773 li
810.09 362.804 li
811.781 363.167 li
813.473 363.28 li
815.168 363.195 li
816.859 363.175 li
818.551 363.261 li
820.246 363.343 li
821.938 363.366 li
823.629 363.304 li
825.324 363.292 li
827.016 363.366 li
828.707 363.378 li
830.402 363.32 li
832.094 363.284 li
833.789 363.335 li
835.48 363.351 li
837.172 363.359 li
838.867 363.359 li
840.559 363.343 li
842.25 363.386 li
843.945 363.417 li
845.637 363.405 li
847.328 363.366 li
849.023 363.327 li
850.715 363.335 li
852.406 363.359 li
854.102 363.374 li
855.793 363.335 li
857.488 363.362 li
@
68.199 273.601 mo
75.398 273.601 li
.627314 0 1 0 cmyk
@
71.801 277.198 mo
71.801 269.999 li
@
69.801 273.601 mo
77 273.601 li
@
73.398 277.198 mo
73.398 269.999 li
@
72.199 273.601 mo
79.398 273.601 li
@
75.801 277.198 mo
75.801 269.999 li
@
73.801 273.601 mo
81 273.601 li
@
77.398 277.198 mo
77.398 269.999 li
@
75.398 273.601 mo
82.602 273.601 li
@
79 277.198 mo
79 269.999 li
@
77 273.601 mo
84.199 273.601 li
@
80.602 277.198 mo
80.602 269.999 li
@
78.602 273.601 mo
85.801 273.601 li
@
82.199 277.198 mo
82.199 269.999 li
@
80.199 273.601 mo
87.398 273.601 li
@
83.801 277.198 mo
83.801 269.999 li
@
81.801 273.601 mo
89 273.601 li
@
85.398 277.198 mo
85.398 269.999 li
@
83.398 273.601 mo
90.602 273.601 li
@
87 277.198 mo
87 269.999 li
@
85 273.601 mo
92.199 273.601 li
@
88.602 277.198 mo
88.602 269.999 li
@
87.398 273.601 mo
94.602 273.601 li
@
91 277.198 mo
91 269.999 li
@
89 273.601 mo
96.199 273.601 li
@
92.602 277.198 mo
92.602 269.999 li
@
90.602 273.601 mo
97.801 273.601 li
@
94.199 277.198 mo
94.199 269.999 li
@
92.199 273.601 mo
99.398 273.601 li
@
95.801 277.198 mo
95.801 269.999 li
@
93.801 273.601 mo
101 273.601 li
@
97.398 277.198 mo
97.398 269.999 li
@
95.398 273.601 mo
102.602 273.601 li
@
99 277.198 mo
99 269.999 li
@
97 273.601 mo
104.199 273.601 li
@
100.602 277.198 mo
100.602 269.999 li
@
98.602 273.601 mo
105.801 273.601 li
@
102.199 277.198 mo
102.199 269.999 li
@
100.199 273.601 mo
107.398 273.601 li
@
103.801 277.198 mo
103.801 269.999 li
@
102.602 273.601 mo
109.801 273.601 li
@
106.199 277.198 mo
106.199 269.999 li
@
104.199 273.601 mo
111.398 273.601 li
@
107.801 277.198 mo
107.801 269.999 li
@
105.801 273.601 mo
113 273.601 li
@
109.398 277.198 mo
109.398 269.999 li
@
146.602 273.601 mo
153.801 273.601 li
@
150.199 277.198 mo
150.199 269.999 li
@
148.199 273.601 mo
155.398 273.601 li
@
151.801 277.198 mo
151.801 269.999 li
@
149.801 273.601 mo
157 273.601 li
@
153.398 277.198 mo
153.398 269.999 li
@
151.398 273.601 mo
158.602 273.601 li
@
155 277.198 mo
155 269.999 li
@
153 273.601 mo
160.199 273.601 li
@
156.602 277.198 mo
156.602 269.999 li
@
154.602 273.601 mo
161.801 273.601 li
@
158.199 277.198 mo
158.199 269.999 li
@
156.199 273.601 mo
163.398 273.601 li
@
159.801 277.198 mo
159.801 269.999 li
@
157.801 273.601 mo
165 273.601 li
@
161.398 277.198 mo
161.398 269.999 li
@
160.199 273.601 mo
167.398 273.601 li
@
163.801 277.198 mo
163.801 269.999 li
@
161.801 273.601 mo
169 273.601 li
@
165.398 277.198 mo
165.398 269.999 li
@
163.398 273.601 mo
170.602 273.601 li
@
167 277.198 mo
167 269.999 li
@
165 273.601 mo
172.199 273.601 li
@
168.602 277.198 mo
168.602 269.999 li
@
166.602 273.601 mo
173.801 273.601 li
@
170.199 277.198 mo
170.199 269.999 li
@
168.199 273.601 mo
175.398 273.601 li
@
171.801 277.198 mo
171.801 269.999 li
@
169.801 273.601 mo
177 273.601 li
@
173.398 277.198 mo
173.398 269.999 li
@
171.398 273.601 mo
178.602 273.601 li
@
175 277.198 mo
175 269.999 li
@
173 273.601 mo
180.199 273.601 li
@
176.602 277.198 mo
176.602 269.999 li
@
175.398 273.601 mo
182.602 273.601 li
@
179 277.198 mo
179 269.999 li
@
177 273.601 mo
184.199 273.601 li
@
180.602 277.198 mo
180.602 269.999 li
@
178.602 273.601 mo
185.801 273.601 li
@
182.199 277.198 mo
182.199 269.999 li
@
180.199 273.601 mo
187.398 273.601 li
@
183.801 277.198 mo
183.801 269.999 li
@
181.801 273.601 mo
189 273.601 li
@
185.398 277.198 mo
185.398 269.999 li
@
183.398 273.601 mo
190.602 273.601 li
@
187 277.198 mo
187 269.999 li
@
185 273.601 mo
192.199 273.601 li
@
188.602 277.198 mo
188.602 269.999 li
@
186.602 273.601 mo
193.801 273.601 li
@
190.199 277.198 mo
190.199 269.999 li
@
234.602 273.601 mo
241.801 273.601 li
@
238.199 277.198 mo
238.199 269.999 li
@
236.199 273.601 mo
243.398 273.601 li
@
239.801 277.198 mo
239.801 269.999 li
@
237.801 273.601 mo
245 273.601 li
@
241.398 277.198 mo
241.398 269.999 li
@
239.398 273.601 mo
246.602 273.601 li
@
243 277.198 mo
243 269.999 li
@
241 273.601 mo
248.199 273.601 li
@
244.602 277.198 mo
244.602 269.999 li
@
242.602 273.601 mo
249.801 273.601 li
@
246.199 277.198 mo
246.199 269.999 li
@
244.199 273.601 mo
251.398 273.601 li
@
247.801 277.198 mo
247.801 269.999 li
@
245.801 273.601 mo
253 273.601 li
@
249.398 277.198 mo
249.398 269.999 li
@
248.199 273.601 mo
255.398 273.601 li
@
251.801 277.198 mo
251.801 269.999 li
@
249.801 273.601 mo
257 273.601 li
@
253.398 277.198 mo
253.398 269.999 li
@
251.398 273.601 mo
258.602 273.601 li
@
255 277.198 mo
255 269.999 li
@
253 273.601 mo
260.199 273.601 li
@
256.602 277.198 mo
256.602 269.999 li
@
254.602 273.601 mo
261.801 273.601 li
@
258.199 277.198 mo
258.199 269.999 li
@
256.199 273.601 mo
263.398 273.601 li
@
259.801 277.198 mo
259.801 269.999 li
@
257.801 273.601 mo
265 273.601 li
@
261.398 277.198 mo
261.398 269.999 li
@
259.398 273.601 mo
266.602 273.601 li
@
263 277.198 mo
263 269.999 li
@
261.801 273.601 mo
269 273.601 li
@
265.398 277.198 mo
265.398 269.999 li
@
263.398 273.601 mo
270.602 273.601 li
@
267 277.198 mo
267 269.999 li
@
265 273.601 mo
272.199 273.601 li
@
268.602 277.198 mo
268.602 269.999 li
@
266.602 273.601 mo
273.801 273.601 li
@
270.199 277.198 mo
270.199 269.999 li
@
268.199 273.601 mo
275.398 273.601 li
@
271.801 277.198 mo
271.801 269.999 li
@
269.801 273.601 mo
277 273.601 li
@
273.398 277.198 mo
273.398 269.999 li
@
271.398 273.601 mo
278.602 273.601 li
@
275 277.198 mo
275 269.999 li
@
273 273.601 mo
280.199 273.601 li
@
276.602 277.198 mo
276.602 269.999 li
@
274.602 273.601 mo
281.801 273.601 li
@
278.199 277.198 mo
278.199 269.999 li
@
277 273.601 mo
284.199 273.601 li
@
280.602 277.198 mo
280.602 269.999 li
@
278.602 273.601 mo
285.801 273.601 li
@
282.199 277.198 mo
282.199 269.999 li
@
280.199 273.601 mo
287.398 273.601 li
@
283.801 277.198 mo
283.801 269.999 li
@
281.801 273.601 mo
289 273.601 li
@
285.398 277.198 mo
285.398 269.999 li
@
283.398 273.601 mo
290.602 273.601 li
@
287 277.198 mo
287 269.999 li
@
285 273.601 mo
292.199 273.601 li
@
288.602 277.198 mo
288.602 269.999 li
@
286.602 273.601 mo
293.801 273.601 li
@
290.199 277.198 mo
290.199 269.999 li
@
288.199 273.601 mo
295.398 273.601 li
@
291.801 277.198 mo
291.801 269.999 li
@
289.801 273.601 mo
297 273.601 li
@
293.398 277.198 mo
293.398 269.999 li
@
324.199 273.601 mo
331.398 273.601 li
@
327.801 277.198 mo
327.801 269.999 li
@
325.801 273.601 mo
333 273.601 li
@
329.398 277.198 mo
329.398 269.999 li
@
327.398 273.601 mo
334.602 273.601 li
@
331 277.198 mo
331 269.999 li
@
329 273.601 mo
336.199 273.601 li
@
332.602 277.198 mo
332.602 269.999 li
@
330.602 273.601 mo
337.801 273.601 li
@
334.199 277.198 mo
334.199 269.999 li
@
332.199 273.601 mo
339.398 273.601 li
@
335.801 277.198 mo
335.801 269.999 li
@
333.801 273.601 mo
341 273.601 li
@
337.398 277.198 mo
337.398 269.999 li
@
336.199 273.601 mo
343.398 273.601 li
@
339.801 277.198 mo
339.801 269.999 li
@
337.801 273.601 mo
345 273.601 li
@
341.398 277.198 mo
341.398 269.999 li
@
339.398 273.601 mo
346.602 273.601 li
@
343 277.198 mo
343 269.999 li
@
341 273.601 mo
348.199 273.601 li
@
344.602 277.198 mo
344.602 269.999 li
@
342.602 273.601 mo
349.801 273.601 li
@
346.199 277.198 mo
346.199 269.999 li
@
344.199 273.601 mo
351.398 273.601 li
@
347.801 277.198 mo
347.801 269.999 li
@
345.801 273.601 mo
353 273.601 li
@
349.398 277.198 mo
349.398 269.999 li
@
347.398 273.601 mo
354.602 273.601 li
@
351 277.198 mo
351 269.999 li
@
349.801 273.601 mo
357 273.601 li
@
353.398 277.198 mo
353.398 269.999 li
@
351.398 273.601 mo
358.602 273.601 li
@
355 277.198 mo
355 269.999 li
@
353 273.601 mo
360.199 273.601 li
@
356.602 277.198 mo
356.602 269.999 li
@
354.602 273.601 mo
361.801 273.601 li
@
358.199 277.198 mo
358.199 269.999 li
@
356.199 273.601 mo
363.398 273.601 li
@
359.801 277.198 mo
359.801 269.999 li
@
357.801 273.601 mo
365 273.601 li
@
361.398 277.198 mo
361.398 269.999 li
@
359.398 273.601 mo
366.602 273.601 li
@
363 277.198 mo
363 269.999 li
@
361 273.601 mo
368.199 273.601 li
@
364.602 277.198 mo
364.602 269.999 li
@
362.602 273.601 mo
369.801 273.601 li
@
366.199 277.198 mo
366.199 269.999 li
@
365 273.601 mo
372.199 273.601 li
@
368.602 277.198 mo
368.602 269.999 li
@
366.602 273.601 mo
373.801 273.601 li
@
370.199 277.198 mo
370.199 269.999 li
@
368.199 273.601 mo
375.398 273.601 li
@
371.801 277.198 mo
371.801 269.999 li
@
424.199 273.601 mo
431.398 273.601 li
@
427.801 277.198 mo
427.801 269.999 li
@
425.801 273.601 mo
433 273.601 li
@
429.398 277.198 mo
429.398 269.999 li
@
427.398 273.601 mo
434.602 273.601 li
@
431 277.198 mo
431 269.999 li
@
429 273.601 mo
436.199 273.601 li
@
432.602 277.198 mo
432.602 269.999 li
@
430.602 273.601 mo
437.801 273.601 li
@
434.199 277.198 mo
434.199 269.999 li
@
432.199 273.601 mo
439.398 273.601 li
@
435.801 277.198 mo
435.801 269.999 li
@
433.801 273.601 mo
441 273.601 li
@
437.398 277.198 mo
437.398 269.999 li
@
435.398 273.601 mo
442.602 273.601 li
@
439 277.198 mo
439 269.999 li
@
437.801 273.601 mo
445 273.601 li
@
441.398 277.198 mo
441.398 269.999 li
@
439.398 273.601 mo
446.602 273.601 li
@
443 277.198 mo
443 269.999 li
@
441 273.601 mo
448.199 273.601 li
@
444.602 277.198 mo
444.602 269.999 li
@
442.602 273.601 mo
449.801 273.601 li
@
446.199 277.198 mo
446.199 269.999 li
@
444.199 273.601 mo
451.398 273.601 li
@
447.801 277.198 mo
447.801 269.999 li
@
445.801 273.601 mo
453 273.601 li
@
449.398 277.198 mo
449.398 269.999 li
@
447.398 273.601 mo
454.602 273.601 li
@
451 277.198 mo
451 269.999 li
@
449 273.601 mo
456.199 273.601 li
@
452.602 277.198 mo
452.602 269.999 li
@
451.398 273.601 mo
458.602 273.601 li
@
455 277.198 mo
455 269.999 li
@
453 273.601 mo
460.199 273.601 li
@
456.602 277.198 mo
456.602 269.999 li
@
454.602 273.601 mo
461.801 273.601 li
@
458.199 277.198 mo
458.199 269.999 li
@
495.398 273.601 mo
502.602 273.601 li
@
499 277.198 mo
499 269.999 li
@
497 273.601 mo
504.199 273.601 li
@
500.602 277.198 mo
500.602 269.999 li
@
498.602 273.601 mo
505.801 273.601 li
@
502.199 277.198 mo
502.199 269.999 li
@
500.199 273.601 mo
507.398 273.601 li
@
503.801 277.198 mo
503.801 269.999 li
@
501.801 273.601 mo
509 273.601 li
@
505.398 277.198 mo
505.398 269.999 li
@
503.398 273.601 mo
510.602 273.601 li
@
507 277.198 mo
507 269.999 li
@
505 273.601 mo
512.199 273.601 li
@
508.602 277.198 mo
508.602 269.999 li
@
506.602 273.601 mo
513.801 273.601 li
@
510.199 277.198 mo
510.199 269.999 li
@
508.199 273.601 mo
515.398 273.601 li
@
511.801 277.198 mo
511.801 269.999 li
@
510.602 273.601 mo
517.801 273.601 li
@
514.199 277.198 mo
514.199 269.999 li
@
512.199 273.601 mo
519.398 273.601 li
@
515.801 277.198 mo
515.801 269.999 li
@
513.801 273.601 mo
521 273.601 li
@
517.398 277.198 mo
517.398 269.999 li
@
515.398 273.601 mo
522.602 273.601 li
@
519 277.198 mo
519 269.999 li
@
517 273.601 mo
524.199 273.601 li
@
520.602 277.198 mo
520.602 269.999 li
@
518.602 273.601 mo
525.801 273.601 li
@
522.199 277.198 mo
522.199 269.999 li
@
520.199 273.601 mo
527.398 273.601 li
@
523.801 277.198 mo
523.801 269.999 li
@
521.801 273.601 mo
529 273.601 li
@
525.398 277.198 mo
525.398 269.999 li
@
523.398 273.601 mo
530.602 273.601 li
@
527 277.198 mo
527 269.999 li
@
525.801 273.601 mo
533 273.601 li
@
529.398 277.198 mo
529.398 269.999 li
@
527.398 273.601 mo
534.602 273.601 li
@
531 277.198 mo
531 269.999 li
@
529 273.601 mo
536.199 273.601 li
@
532.602 277.198 mo
532.602 269.999 li
@
559.398 273.601 mo
566.602 273.601 li
@
563 277.198 mo
563 269.999 li
@
561 273.601 mo
568.199 273.601 li
@
564.602 277.198 mo
564.602 269.999 li
@
562.602 273.601 mo
569.801 273.601 li
@
566.199 277.198 mo
566.199 269.999 li
@
564.199 273.601 mo
571.398 273.601 li
@
567.801 277.198 mo
567.801 269.999 li
@
565.801 273.601 mo
573 273.601 li
@
569.398 277.198 mo
569.398 269.999 li
@
568.199 273.601 mo
575.398 273.601 li
@
571.801 277.198 mo
571.801 269.999 li
@
569.801 273.601 mo
577 273.601 li
@
573.398 277.198 mo
573.398 269.999 li
@
571.398 273.601 mo
578.602 273.601 li
@
575 277.198 mo
575 269.999 li
@
573 273.601 mo
580.199 273.601 li
@
576.602 277.198 mo
576.602 269.999 li
@
574.602 273.601 mo
581.801 273.601 li
@
578.199 277.198 mo
578.199 269.999 li
@
576.199 273.601 mo
583.398 273.601 li
@
579.801 277.198 mo
579.801 269.999 li
@
577.801 273.601 mo
585 273.601 li
@
581.398 277.198 mo
581.398 269.999 li
@
579.398 273.601 mo
586.602 273.601 li
@
583 277.198 mo
583 269.999 li
@
581 273.601 mo
588.199 273.601 li
@
584.602 277.198 mo
584.602 269.999 li
@
583.398 273.601 mo
590.602 273.601 li
@
587 277.198 mo
587 269.999 li
@
585 273.601 mo
592.199 273.601 li
@
588.602 277.198 mo
588.602 269.999 li
@
586.602 273.601 mo
593.801 273.601 li
@
590.199 277.198 mo
590.199 269.999 li
@
588.199 273.601 mo
595.398 273.601 li
@
591.801 277.198 mo
591.801 269.999 li
@
589.801 273.601 mo
597 273.601 li
@
593.398 277.198 mo
593.398 269.999 li
@
591.398 273.601 mo
598.602 273.601 li
@
595 277.198 mo
595 269.999 li
@
593 273.601 mo
600.199 273.601 li
@
596.602 277.198 mo
596.602 269.999 li
@
594.602 273.601 mo
601.801 273.601 li
@
598.199 277.198 mo
598.199 269.999 li
@
596.199 273.601 mo
603.398 273.601 li
@
599.801 277.198 mo
599.801 269.999 li
@
598.602 273.601 mo
605.801 273.601 li
@
602.199 277.198 mo
602.199 269.999 li
@
600.199 273.601 mo
607.398 273.601 li
@
603.801 277.198 mo
603.801 269.999 li
@
601.801 273.601 mo
609 273.601 li
@
605.398 277.198 mo
605.398 269.999 li
@
603.398 273.601 mo
610.602 273.601 li
@
607 277.198 mo
607 269.999 li
@
605 273.601 mo
612.199 273.601 li
@
608.602 277.198 mo
608.602 269.999 li
@
606.602 273.601 mo
613.801 273.601 li
@
610.199 277.198 mo
610.199 269.999 li
@
608.199 273.601 mo
615.398 273.601 li
@
611.801 277.198 mo
611.801 269.999 li
@
609.801 273.601 mo
617 273.601 li
@
613.398 277.198 mo
613.398 269.999 li
@
656.199 273.601 mo
663.398 273.601 li
@
659.801 277.198 mo
659.801 269.999 li
@
657.801 273.601 mo
665 273.601 li
@
661.398 277.198 mo
661.398 269.999 li
@
659.398 273.601 mo
666.602 273.601 li
@
663 277.198 mo
663 269.999 li
@
661 273.601 mo
668.199 273.601 li
@
664.602 277.198 mo
664.602 269.999 li
@
662.602 273.601 mo
669.801 273.601 li
@
666.199 277.198 mo
666.199 269.999 li
@
664.199 273.601 mo
671.398 273.601 li
@
667.801 277.198 mo
667.801 269.999 li
@
665.801 273.601 mo
673 273.601 li
@
669.398 277.198 mo
669.398 269.999 li
@
667.398 273.601 mo
674.602 273.601 li
@
671 277.198 mo
671 269.999 li
@
669 273.601 mo
676.199 273.601 li
@
672.602 277.198 mo
672.602 269.999 li
@
671.398 273.601 mo
678.602 273.601 li
@
675 277.198 mo
675 269.999 li
@
673 273.601 mo
680.199 273.601 li
@
676.602 277.198 mo
676.602 269.999 li
@
674.602 273.601 mo
681.801 273.601 li
@
678.199 277.198 mo
678.199 269.999 li
@
676.199 273.601 mo
683.398 273.601 li
@
679.801 277.198 mo
679.801 269.999 li
@
677.801 273.601 mo
685 273.601 li
@
681.398 277.198 mo
681.398 269.999 li
@
679.398 273.601 mo
686.602 273.601 li
@
683 277.198 mo
683 269.999 li
@
681 273.601 mo
688.199 273.601 li
@
684.602 277.198 mo
684.602 269.999 li
@
682.602 273.601 mo
689.801 273.601 li
@
686.199 277.198 mo
686.199 269.999 li
@
685 273.601 mo
692.199 273.601 li
@
688.602 277.198 mo
688.602 269.999 li
@
686.602 273.601 mo
693.801 273.601 li
@
690.199 277.198 mo
690.199 269.999 li
@
688.199 273.601 mo
695.398 273.601 li
@
691.801 277.198 mo
691.801 269.999 li
@
689.801 273.601 mo
697 273.601 li
@
693.398 277.198 mo
693.398 269.999 li
@
691.398 273.601 mo
698.602 273.601 li
@
695 277.198 mo
695 269.999 li
@
693 273.601 mo
700.199 273.601 li
@
696.602 277.198 mo
696.602 269.999 li
@
694.602 273.601 mo
701.801 273.601 li
@
698.199 277.198 mo
698.199 269.999 li
@
696.199 273.601 mo
703.398 273.601 li
@
699.801 277.198 mo
699.801 269.999 li
@
697.801 273.601 mo
705 273.601 li
@
701.398 277.198 mo
701.398 269.999 li
@
700.199 273.601 mo
707.398 273.601 li
@
703.801 277.198 mo
703.801 269.999 li
@
701.801 273.601 mo
709 273.601 li
@
705.398 277.198 mo
705.398 269.999 li
@
703.398 273.601 mo
710.602 273.601 li
@
707 277.198 mo
707 269.999 li
@
705 273.601 mo
712.199 273.601 li
@
708.602 277.198 mo
708.602 269.999 li
@
706.602 273.601 mo
713.801 273.601 li
@
710.199 277.198 mo
710.199 269.999 li
@
708.199 273.601 mo
715.398 273.601 li
@
711.801 277.198 mo
711.801 269.999 li
@
709.801 273.601 mo
717 273.601 li
@
713.398 277.198 mo
713.398 269.999 li
@
711.398 273.601 mo
718.602 273.601 li
@
715 277.198 mo
715 269.999 li
@
793 273.601 mo
800.199 273.601 li
@
796.602 277.198 mo
796.602 269.999 li
@
794.602 273.601 mo
801.801 273.601 li
@
798.199 277.198 mo
798.199 269.999 li
@
796.199 273.601 mo
803.398 273.601 li
@
799.801 277.198 mo
799.801 269.999 li
@
797.801 273.601 mo
805 273.601 li
@
801.398 277.198 mo
801.398 269.999 li
@
799.398 273.601 mo
806.602 273.601 li
@
803 277.198 mo
803 269.999 li
@
801.801 273.601 mo
809 273.601 li
@
805.398 277.198 mo
805.398 269.999 li
@
803.398 273.601 mo
810.602 273.601 li
@
807 277.198 mo
807 269.999 li
@
805 273.601 mo
812.199 273.601 li
@
808.602 277.198 mo
808.602 269.999 li
@
806.602 273.601 mo
813.801 273.601 li
@
810.199 277.198 mo
810.199 269.999 li
@
808.199 273.601 mo
815.398 273.601 li
@
811.801 277.198 mo
811.801 269.999 li
@
809.801 273.601 mo
817 273.601 li
@
813.398 277.198 mo
813.398 269.999 li
@
811.398 273.601 mo
818.602 273.601 li
@
815 277.198 mo
815 269.999 li
@
813 273.601 mo
820.199 273.601 li
@
816.602 277.198 mo
816.602 269.999 li
@
814.602 273.601 mo
821.801 273.601 li
@
818.199 277.198 mo
818.199 269.999 li
@
817 273.601 mo
824.199 273.601 li
@
820.602 277.198 mo
820.602 269.999 li
@
818.602 273.601 mo
825.801 273.601 li
@
822.199 277.198 mo
822.199 269.999 li
@
820.199 273.601 mo
827.398 273.601 li
@
823.801 277.198 mo
823.801 269.999 li
@
821.801 273.601 mo
829 273.601 li
@
825.398 277.198 mo
825.398 269.999 li
@
823.398 273.601 mo
830.602 273.601 li
@
827 277.198 mo
827 269.999 li
@
825 273.601 mo
832.199 273.601 li
@
828.602 277.198 mo
828.602 269.999 li
@
826.602 273.601 mo
833.801 273.601 li
@
830.199 277.198 mo
830.199 269.999 li
@
828.199 273.601 mo
835.398 273.601 li
@
831.801 277.198 mo
831.801 269.999 li
@
829.801 273.601 mo
837 273.601 li
@
833.398 277.198 mo
833.398 269.999 li
@
832.199 273.601 mo
839.398 273.601 li
@
835.801 277.198 mo
835.801 269.999 li
@
833.801 273.601 mo
841 273.601 li
@
837.398 277.198 mo
837.398 269.999 li
@
835.398 273.601 mo
842.602 273.601 li
@
839 277.198 mo
839 269.999 li
@
837 273.601 mo
844.199 273.601 li
@
840.602 277.198 mo
840.602 269.999 li
@
838.602 273.601 mo
845.801 273.601 li
@
842.199 277.198 mo
842.199 269.999 li
@
840.199 273.601 mo
847.398 273.601 li
@
843.801 277.198 mo
843.801 269.999 li
@
841.801 273.601 mo
849 273.601 li
@
845.398 277.198 mo
845.398 269.999 li
@
843.398 273.601 mo
850.602 273.601 li
@
847 277.198 mo
847 269.999 li
@
845.801 273.601 mo
853 273.601 li
@
849.398 277.198 mo
849.398 269.999 li
@
847.398 273.601 mo
854.602 273.601 li
@
851 277.198 mo
851 269.999 li
@
849 273.601 mo
856.199 273.601 li
@
852.602 277.198 mo
852.602 269.999 li
@
850.602 273.601 mo
857.801 273.601 li
@
854.199 277.198 mo
854.199 269.999 li
@
852.199 273.601 mo
859.398 273.601 li
@
855.801 277.198 mo
855.801 269.999 li
@
853.801 273.601 mo
861 273.601 li
@
857.398 277.198 mo
857.398 269.999 li
@
30.602 186.8 mo
36.199 181.198 li
0 0 0 1 cmyk
@
30.602 181.198 mo
36.199 186.8 li
@
32.199 186.8 mo
37.801 181.198 li
@
32.199 181.198 mo
37.801 186.8 li
@
33.801 186.8 mo
39.398 181.198 li
@
33.801 181.198 mo
39.398 186.8 li
@
35.398 186.8 mo
41 181.198 li
@
35.398 181.198 mo
41 186.8 li
@
37 186.8 mo
42.602 181.198 li
@
37 181.198 mo
42.602 186.8 li
@
38.602 186.8 mo
44.199 181.198 li
@
38.602 181.198 mo
44.199 186.8 li
@
40.199 186.8 mo
45.801 181.198 li
@
40.199 181.198 mo
45.801 186.8 li
@
41.801 186.8 mo
47.398 181.198 li
@
41.801 181.198 mo
47.398 186.8 li
@
44.199 186.8 mo
49.801 181.198 li
@
44.199 181.198 mo
49.801 186.8 li
@
45.801 186.8 mo
51.398 181.198 li
@
45.801 181.198 mo
51.398 186.8 li
@
47.398 186.8 mo
53 181.198 li
@
47.398 181.198 mo
53 186.8 li
@
49 186.8 mo
54.602 181.198 li
@
49 181.198 mo
54.602 186.8 li
@
50.602 186.8 mo
56.199 181.198 li
@
50.602 181.198 mo
56.199 186.8 li
@
52.199 186.8 mo
57.801 181.198 li
@
52.199 181.198 mo
57.801 186.8 li
@
53.801 186.8 mo
59.398 181.198 li
@
53.801 181.198 mo
59.398 186.8 li
@
55.398 186.8 mo
61 181.198 li
@
55.398 181.198 mo
61 186.8 li
@
57 186.8 mo
62.602 181.198 li
@
57 181.198 mo
62.602 186.8 li
@
59.398 186.8 mo
65 181.198 li
@
59.398 181.198 mo
65 186.8 li
@
61 186.8 mo
66.602 181.198 li
@
61 181.198 mo
66.602 186.8 li
@
62.602 186.8 mo
68.199 181.198 li
@
62.602 181.198 mo
68.199 186.8 li
@
64.199 186.8 mo
69.801 181.198 li
@
64.199 181.198 mo
69.801 186.8 li
@
65.801 186.8 mo
71.398 181.198 li
@
65.801 181.198 mo
71.398 186.8 li
@
67.398 186.8 mo
73 181.198 li
@
67.398 181.198 mo
73 186.8 li
@
108.199 186.8 mo
113.801 181.198 li
@
108.199 181.198 mo
113.801 186.8 li
@
109.801 186.8 mo
115.398 181.198 li
@
109.801 181.198 mo
115.398 186.8 li
@
111.398 186.8 mo
117 181.198 li
@
111.398 181.198 mo
117 186.8 li
@
113 186.8 mo
118.602 181.198 li
@
113 181.198 mo
118.602 186.8 li
@
114.602 186.8 mo
120.199 181.198 li
@
114.602 181.198 mo
120.199 186.8 li
@
117 186.8 mo
122.602 181.198 li
@
117 181.198 mo
122.602 186.8 li
@
118.602 186.8 mo
124.199 181.198 li
@
118.602 181.198 mo
124.199 186.8 li
@
120.199 186.8 mo
125.801 181.198 li
@
120.199 181.198 mo
125.801 186.8 li
@
121.801 186.8 mo
127.398 181.198 li
@
121.801 181.198 mo
127.398 186.8 li
@
123.398 186.8 mo
129 181.198 li
@
123.398 181.198 mo
129 186.8 li
@
125 186.8 mo
130.602 181.198 li
@
125 181.198 mo
130.602 186.8 li
@
126.602 186.8 mo
132.199 181.198 li
@
126.602 181.198 mo
132.199 186.8 li
@
128.199 186.8 mo
133.801 181.198 li
@
128.199 181.198 mo
133.801 186.8 li
@
129.801 186.8 mo
135.398 181.198 li
@
129.801 181.198 mo
135.398 186.8 li
@
132.199 186.8 mo
137.801 181.198 li
@
132.199 181.198 mo
137.801 186.8 li
@
133.801 186.8 mo
139.398 181.198 li
@
133.801 181.198 mo
139.398 186.8 li
@
135.398 186.8 mo
141 181.198 li
@
135.398 181.198 mo
141 186.8 li
@
137 186.8 mo
142.602 181.198 li
@
137 181.198 mo
142.602 186.8 li
@
138.602 186.8 mo
144.199 181.198 li
@
138.602 181.198 mo
144.199 186.8 li
@
140.199 186.8 mo
145.801 181.198 li
@
140.199 181.198 mo
145.801 186.8 li
@
141.801 186.8 mo
147.398 181.198 li
@
141.801 181.198 mo
147.398 186.8 li
@
143.398 186.8 mo
149 181.198 li
@
143.398 181.198 mo
149 186.8 li
@
145.801 186.8 mo
151.398 181.198 li
@
145.801 181.198 mo
151.398 186.8 li
@
189.801 186.8 mo
195.398 181.198 li
@
189.801 181.198 mo
195.398 186.8 li
@
191.398 186.8 mo
197 181.198 li
@
191.398 181.198 mo
197 186.8 li
@
193 186.8 mo
198.602 181.198 li
@
193 181.198 mo
198.602 186.8 li
@
194.602 186.8 mo
200.199 181.198 li
@
194.602 181.198 mo
200.199 186.8 li
@
196.199 186.8 mo
201.801 181.198 li
@
196.199 181.198 mo
201.801 186.8 li
@
197.801 186.8 mo
203.398 181.198 li
@
197.801 181.198 mo
203.398 186.8 li
@
199.398 186.8 mo
205 181.198 li
@
199.398 181.198 mo
205 186.8 li
@
201 186.8 mo
206.602 181.198 li
@
201 181.198 mo
206.602 186.8 li
@
202.602 186.8 mo
208.199 181.198 li
@
202.602 181.198 mo
208.199 186.8 li
@
205 186.8 mo
210.602 181.198 li
@
205 181.198 mo
210.602 186.8 li
@
206.602 186.8 mo
212.199 181.198 li
@
206.602 181.198 mo
212.199 186.8 li
@
208.199 186.8 mo
213.801 181.198 li
@
208.199 181.198 mo
213.801 186.8 li
@
209.801 186.8 mo
215.398 181.198 li
@
209.801 181.198 mo
215.398 186.8 li
@
211.398 186.8 mo
217 181.198 li
@
211.398 181.198 mo
217 186.8 li
@
213 186.8 mo
218.602 181.198 li
@
213 181.198 mo
218.602 186.8 li
@
214.602 186.8 mo
220.199 181.198 li
@
214.602 181.198 mo
220.199 186.8 li
@
216.199 186.8 mo
221.801 181.198 li
@
216.199 181.198 mo
221.801 186.8 li
@
217.801 186.8 mo
223.398 181.198 li
@
217.801 181.198 mo
223.398 186.8 li
@
220.199 186.8 mo
225.801 181.198 li
@
220.199 181.198 mo
225.801 186.8 li
@
221.801 186.8 mo
227.398 181.198 li
@
221.801 181.198 mo
227.398 186.8 li
@
223.398 186.8 mo
229 181.198 li
@
223.398 181.198 mo
229 186.8 li
@
225 186.8 mo
230.602 181.198 li
@
225 181.198 mo
230.602 186.8 li
@
226.602 186.8 mo
232.199 181.198 li
@
226.602 181.198 mo
232.199 186.8 li
@
228.199 186.8 mo
233.801 181.198 li
@
228.199 181.198 mo
233.801 186.8 li
@
229.801 186.8 mo
235.398 181.198 li
@
229.801 181.198 mo
235.398 186.8 li
@
231.398 186.8 mo
237 181.198 li
@
231.398 181.198 mo
237 186.8 li
@
233.801 186.8 mo
239.398 181.198 li
@
233.801 181.198 mo
239.398 186.8 li
@
293 186.8 mo
298.602 181.198 li
@
293 181.198 mo
298.602 186.8 li
@
294.602 186.8 mo
300.199 181.198 li
@
294.602 181.198 mo
300.199 186.8 li
@
296.199 186.8 mo
301.801 181.198 li
@
296.199 181.198 mo
301.801 186.8 li
@
297.801 186.8 mo
303.398 181.198 li
@
297.801 181.198 mo
303.398 186.8 li
@
299.398 186.8 mo
305 181.198 li
@
299.398 181.198 mo
305 186.8 li
@
301 186.8 mo
306.602 181.198 li
@
301 181.198 mo
306.602 186.8 li
@
302.602 186.8 mo
308.199 181.198 li
@
302.602 181.198 mo
308.199 186.8 li
@
304.199 186.8 mo
309.801 181.198 li
@
304.199 181.198 mo
309.801 186.8 li
@
306.602 186.8 mo
312.199 181.198 li
@
306.602 181.198 mo
312.199 186.8 li
@
308.199 186.8 mo
313.801 181.198 li
@
308.199 181.198 mo
313.801 186.8 li
@
309.801 186.8 mo
315.398 181.198 li
@
309.801 181.198 mo
315.398 186.8 li
@
311.398 186.8 mo
317 181.198 li
@
311.398 181.198 mo
317 186.8 li
@
313 186.8 mo
318.602 181.198 li
@
313 181.198 mo
318.602 186.8 li
@
314.602 186.8 mo
320.199 181.198 li
@
314.602 181.198 mo
320.199 186.8 li
@
316.199 186.8 mo
321.801 181.198 li
@
316.199 181.198 mo
321.801 186.8 li
@
317.801 186.8 mo
323.398 181.198 li
@
317.801 181.198 mo
323.398 186.8 li
@
319.398 186.8 mo
325 181.198 li
@
319.398 181.198 mo
325 186.8 li
@
321.801 186.8 mo
327.398 181.198 li
@
321.801 181.198 mo
327.398 186.8 li
@
323.398 186.8 mo
329 181.198 li
@
323.398 181.198 mo
329 186.8 li
@
370.602 186.8 mo
376.199 181.198 li
@
370.602 181.198 mo
376.199 186.8 li
@
372.199 186.8 mo
377.801 181.198 li
@
372.199 181.198 mo
377.801 186.8 li
@
373.801 186.8 mo
379.398 181.198 li
@
373.801 181.198 mo
379.398 186.8 li
@
375.398 186.8 mo
381 181.198 li
@
375.398 181.198 mo
381 186.8 li
@
377 186.8 mo
382.602 181.198 li
@
377 181.198 mo
382.602 186.8 li
@
379.398 186.8 mo
385 181.198 li
@
379.398 181.198 mo
385 186.8 li
@
381 186.8 mo
386.602 181.198 li
@
381 181.198 mo
386.602 186.8 li
@
382.602 186.8 mo
388.199 181.198 li
@
382.602 181.198 mo
388.199 186.8 li
@
384.199 186.8 mo
389.801 181.198 li
@
384.199 181.198 mo
389.801 186.8 li
@
385.801 186.8 mo
391.398 181.198 li
@
385.801 181.198 mo
391.398 186.8 li
@
387.398 186.8 mo
393 181.198 li
@
387.398 181.198 mo
393 186.8 li
@
389 186.8 mo
394.602 181.198 li
@
389 181.198 mo
394.602 186.8 li
@
390.602 186.8 mo
396.199 181.198 li
@
390.602 181.198 mo
396.199 186.8 li
@
392.199 186.8 mo
397.801 181.198 li
@
392.199 181.198 mo
397.801 186.8 li
@
394.602 186.8 mo
400.199 181.198 li
@
394.602 181.198 mo
400.199 186.8 li
@
396.199 186.8 mo
401.801 181.198 li
@
396.199 181.198 mo
401.801 186.8 li
@
397.801 186.8 mo
403.398 181.198 li
@
397.801 181.198 mo
403.398 186.8 li
@
399.398 186.8 mo
405 181.198 li
@
399.398 181.198 mo
405 186.8 li
@
401 186.8 mo
406.602 181.198 li
@
401 181.198 mo
406.602 186.8 li
@
402.602 186.8 mo
408.199 181.198 li
@
402.602 181.198 mo
408.199 186.8 li
@
404.199 186.8 mo
409.801 181.198 li
@
404.199 181.198 mo
409.801 186.8 li
@
405.801 186.8 mo
411.398 181.198 li
@
405.801 181.198 mo
411.398 186.8 li
@
407.398 186.8 mo
413 181.198 li
@
407.398 181.198 mo
413 186.8 li
@
409.801 186.8 mo
415.398 181.198 li
@
409.801 181.198 mo
415.398 186.8 li
@
411.398 186.8 mo
417 181.198 li
@
411.398 181.198 mo
417 186.8 li
@
413 186.8 mo
418.602 181.198 li
@
413 181.198 mo
418.602 186.8 li
@
414.602 186.8 mo
420.199 181.198 li
@
414.602 181.198 mo
420.199 186.8 li
@
416.199 186.8 mo
421.801 181.198 li
@
416.199 181.198 mo
421.801 186.8 li
@
417.801 186.8 mo
423.398 181.198 li
@
417.801 181.198 mo
423.398 186.8 li
@
419.398 186.8 mo
425 181.198 li
@
419.398 181.198 mo
425 186.8 li
@
421 186.8 mo
426.602 181.198 li
@
421 181.198 mo
426.602 186.8 li
@
423.398 186.8 mo
429 181.198 li
@
423.398 181.198 mo
429 186.8 li
@
457 186.8 mo
462.602 181.198 li
@
457 181.198 mo
462.602 186.8 li
@
458.602 186.8 mo
464.199 181.198 li
@
458.602 181.198 mo
464.199 186.8 li
@
460.199 186.8 mo
465.801 181.198 li
@
460.199 181.198 mo
465.801 186.8 li
@
461.801 186.8 mo
467.398 181.198 li
@
461.801 181.198 mo
467.398 186.8 li
@
463.398 186.8 mo
469 181.198 li
@
463.398 181.198 mo
469 186.8 li
@
465 186.8 mo
470.602 181.198 li
@
465 181.198 mo
470.602 186.8 li
@
467.398 186.8 mo
473 181.198 li
@
467.398 181.198 mo
473 186.8 li
@
469 186.8 mo
474.602 181.198 li
@
469 181.198 mo
474.602 186.8 li
@
470.602 186.8 mo
476.199 181.198 li
@
470.602 181.198 mo
476.199 186.8 li
@
472.199 186.8 mo
477.801 181.198 li
@
472.199 181.198 mo
477.801 186.8 li
@
473.801 186.8 mo
479.398 181.198 li
@
473.801 181.198 mo
479.398 186.8 li
@
475.398 186.8 mo
481 181.198 li
@
475.398 181.198 mo
481 186.8 li
@
477 186.8 mo
482.602 181.198 li
@
477 181.198 mo
482.602 186.8 li
@
478.602 186.8 mo
484.199 181.198 li
@
478.602 181.198 mo
484.199 186.8 li
@
480.199 186.8 mo
485.801 181.198 li
@
480.199 181.198 mo
485.801 186.8 li
@
482.602 186.8 mo
488.199 181.198 li
@
482.602 181.198 mo
488.199 186.8 li
@
484.199 186.8 mo
489.801 181.198 li
@
484.199 181.198 mo
489.801 186.8 li
@
485.801 186.8 mo
491.398 181.198 li
@
485.801 181.198 mo
491.398 186.8 li
@
487.398 186.8 mo
493 181.198 li
@
487.398 181.198 mo
493 186.8 li
@
489 186.8 mo
494.602 181.198 li
@
489 181.198 mo
494.602 186.8 li
@
490.602 186.8 mo
496.199 181.198 li
@
490.602 181.198 mo
496.199 186.8 li
@
492.199 186.8 mo
497.801 181.198 li
@
492.199 181.198 mo
497.801 186.8 li
@
493.801 186.8 mo
499.398 181.198 li
@
493.801 181.198 mo
499.398 186.8 li
@
531.398 186.8 mo
537 181.198 li
@
531.398 181.198 mo
537 186.8 li
@
533 186.8 mo
538.602 181.198 li
@
533 181.198 mo
538.602 186.8 li
@
534.602 186.8 mo
540.199 181.198 li
@
534.602 181.198 mo
540.199 186.8 li
@
536.199 186.8 mo
541.801 181.198 li
@
536.199 181.198 mo
541.801 186.8 li
@
537.801 186.8 mo
543.398 181.198 li
@
537.801 181.198 mo
543.398 186.8 li
@
540.199 186.8 mo
545.801 181.198 li
@
540.199 181.198 mo
545.801 186.8 li
@
541.801 186.8 mo
547.398 181.198 li
@
541.801 181.198 mo
547.398 186.8 li
@
543.398 186.8 mo
549 181.198 li
@
543.398 181.198 mo
549 186.8 li
@
545 186.8 mo
550.602 181.198 li
@
545 181.198 mo
550.602 186.8 li
@
546.602 186.8 mo
552.199 181.198 li
@
546.602 181.198 mo
552.199 186.8 li
@
548.199 186.8 mo
553.801 181.198 li
@
548.199 181.198 mo
553.801 186.8 li
@
549.801 186.8 mo
555.398 181.198 li
@
549.801 181.198 mo
555.398 186.8 li
@
551.398 186.8 mo
557 181.198 li
@
551.398 181.198 mo
557 186.8 li
@
553 186.8 mo
558.602 181.198 li
@
553 181.198 mo
558.602 186.8 li
@
555.398 186.8 mo
561 181.198 li
@
555.398 181.198 mo
561 186.8 li
@
557 186.8 mo
562.602 181.198 li
@
557 181.198 mo
562.602 186.8 li
@
558.602 186.8 mo
564.199 181.198 li
@
558.602 181.198 mo
564.199 186.8 li
@
613 186.8 mo
618.602 181.198 li
@
613 181.198 mo
618.602 186.8 li
@
614.602 186.8 mo
620.199 181.198 li
@
614.602 181.198 mo
620.199 186.8 li
@
616.199 186.8 mo
621.801 181.198 li
@
616.199 181.198 mo
621.801 186.8 li
@
617.801 186.8 mo
623.398 181.198 li
@
617.801 181.198 mo
623.398 186.8 li
@
619.398 186.8 mo
625 181.198 li
@
619.398 181.198 mo
625 186.8 li
@
621 186.8 mo
626.602 181.198 li
@
621 181.198 mo
626.602 186.8 li
@
622.602 186.8 mo
628.199 181.198 li
@
622.602 181.198 mo
628.199 186.8 li
@
624.199 186.8 mo
629.801 181.198 li
@
624.199 181.198 mo
629.801 186.8 li
@
625.801 186.8 mo
631.398 181.198 li
@
625.801 181.198 mo
631.398 186.8 li
@
628.199 186.8 mo
633.801 181.198 li
@
628.199 181.198 mo
633.801 186.8 li
@
629.801 186.8 mo
635.398 181.198 li
@
629.801 181.198 mo
635.398 186.8 li
@
631.398 186.8 mo
637 181.198 li
@
631.398 181.198 mo
637 186.8 li
@
633 186.8 mo
638.602 181.198 li
@
633 181.198 mo
638.602 186.8 li
@
634.602 186.8 mo
640.199 181.198 li
@
634.602 181.198 mo
640.199 186.8 li
@
636.199 186.8 mo
641.801 181.198 li
@
636.199 181.198 mo
641.801 186.8 li
@
637.801 186.8 mo
643.398 181.198 li
@
637.801 181.198 mo
643.398 186.8 li
@
639.398 186.8 mo
645 181.198 li
@
639.398 181.198 mo
645 186.8 li
@
641 186.8 mo
646.602 181.198 li
@
641 181.198 mo
646.602 186.8 li
@
643.398 186.8 mo
649 181.198 li
@
643.398 181.198 mo
649 186.8 li
@
645 186.8 mo
650.602 181.198 li
@
645 181.198 mo
650.602 186.8 li
@
646.602 186.8 mo
652.199 181.198 li
@
646.602 181.198 mo
652.199 186.8 li
@
648.199 186.8 mo
653.801 181.198 li
@
648.199 181.198 mo
653.801 186.8 li
@
649.801 186.8 mo
655.398 181.198 li
@
649.801 181.198 mo
655.398 186.8 li
@
651.398 186.8 mo
657 181.198 li
@
651.398 181.198 mo
657 186.8 li
@
653 186.8 mo
658.602 181.198 li
@
653 181.198 mo
658.602 186.8 li
@
654.602 186.8 mo
660.199 181.198 li
@
654.602 181.198 mo
660.199 186.8 li
@
713.801 186.8 mo
719.398 181.198 li
@
713.801 181.198 mo
719.398 186.8 li
@
716.199 186.8 mo
721.801 181.198 li
@
716.199 181.198 mo
721.801 186.8 li
@
717.801 186.8 mo
723.398 181.198 li
@
717.801 181.198 mo
723.398 186.8 li
@
719.398 186.8 mo
725 181.198 li
@
719.398 181.198 mo
725 186.8 li
@
721 186.8 mo
726.602 181.198 li
@
721 181.198 mo
726.602 186.8 li
@
722.602 186.8 mo
728.199 181.198 li
@
722.602 181.198 mo
728.199 186.8 li
@
724.199 186.8 mo
729.801 181.198 li
@
724.199 181.198 mo
729.801 186.8 li
@
725.801 186.8 mo
731.398 181.198 li
@
725.801 181.198 mo
731.398 186.8 li
@
727.398 186.8 mo
733 181.198 li
@
727.398 181.198 mo
733 186.8 li
@
729.801 186.8 mo
735.398 181.198 li
@
729.801 181.198 mo
735.398 186.8 li
@
731.398 186.8 mo
737 181.198 li
@
731.398 181.198 mo
737 186.8 li
@
733 186.8 mo
738.602 181.198 li
@
733 181.198 mo
738.602 186.8 li
@
734.602 186.8 mo
740.199 181.198 li
@
734.602 181.198 mo
740.199 186.8 li
@
736.199 186.8 mo
741.801 181.198 li
@
736.199 181.198 mo
741.801 186.8 li
@
737.801 186.8 mo
743.398 181.198 li
@
737.801 181.198 mo
743.398 186.8 li
@
739.398 186.8 mo
745 181.198 li
@
739.398 181.198 mo
745 186.8 li
@
741 186.8 mo
746.602 181.198 li
@
741 181.198 mo
746.602 186.8 li
@
742.602 186.8 mo
748.199 181.198 li
@
742.602 181.198 mo
748.199 186.8 li
@
745 186.8 mo
750.602 181.198 li
@
745 181.198 mo
750.602 186.8 li
@
746.602 186.8 mo
752.199 181.198 li
@
746.602 181.198 mo
752.199 186.8 li
@
748.199 186.8 mo
753.801 181.198 li
@
748.199 181.198 mo
753.801 186.8 li
@
749.801 186.8 mo
755.398 181.198 li
@
749.801 181.198 mo
755.398 186.8 li
@
751.398 186.8 mo
757 181.198 li
@
751.398 181.198 mo
757 186.8 li
@
753 186.8 mo
758.602 181.198 li
@
753 181.198 mo
758.602 186.8 li
@
754.602 186.8 mo
760.199 181.198 li
@
754.602 181.198 mo
760.199 186.8 li
@
756.199 186.8 mo
761.801 181.198 li
@
756.199 181.198 mo
761.801 186.8 li
@
757.801 186.8 mo
763.398 181.198 li
@
757.801 181.198 mo
763.398 186.8 li
@
760.199 186.8 mo
765.801 181.198 li
@
760.199 181.198 mo
765.801 186.8 li
@
761.801 186.8 mo
767.398 181.198 li
@
761.801 181.198 mo
767.398 186.8 li
@
763.398 186.8 mo
769 181.198 li
@
763.398 181.198 mo
769 186.8 li
@
765 186.8 mo
770.602 181.198 li
@
765 181.198 mo
770.602 186.8 li
@
766.602 186.8 mo
772.199 181.198 li
@
766.602 181.198 mo
772.199 186.8 li
@
768.199 186.8 mo
773.801 181.198 li
@
768.199 181.198 mo
773.801 186.8 li
@
769.801 186.8 mo
775.398 181.198 li
@
769.801 181.198 mo
775.398 186.8 li
@
771.398 186.8 mo
777 181.198 li
@
771.398 181.198 mo
777 186.8 li
@
773.801 186.8 mo
779.398 181.198 li
@
773.801 181.198 mo
779.398 186.8 li
@
775.398 186.8 mo
781 181.198 li
@
775.398 181.198 mo
781 186.8 li
@
777 186.8 mo
782.602 181.198 li
@
777 181.198 mo
782.602 186.8 li
@
778.602 186.8 mo
784.199 181.198 li
@
778.602 181.198 mo
784.199 186.8 li
@
780.199 186.8 mo
785.801 181.198 li
@
780.199 181.198 mo
785.801 186.8 li
@
781.801 186.8 mo
787.398 181.198 li
@
781.801 181.198 mo
787.398 186.8 li
@
783.398 186.8 mo
789 181.198 li
@
783.398 181.198 mo
789 186.8 li
@
785 186.8 mo
790.602 181.198 li
@
785 181.198 mo
790.602 186.8 li
@
786.602 186.8 mo
792.199 181.198 li
@
786.602 181.198 mo
792.199 186.8 li
@
789 186.8 mo
794.602 181.198 li
@
789 181.198 mo
794.602 186.8 li
@
790.602 186.8 mo
796.199 181.198 li
@
790.602 181.198 mo
796.199 186.8 li
@
792.199 186.8 mo
797.801 181.198 li
@
792.199 181.198 mo
797.801 186.8 li
@
.817404 lw
0 lj
264.777 268.398 mo
264.777 95.761 li
@
264.777 260.226 mo
261.508 256.956 li
264.777 268.398 li
268.047 256.956 li
cp
ef
2 lc
264.777 260.226 mo
261.508 256.956 li
264.777 268.398 li
268.047 256.956 li
cp
@
.591317 lw
0 lc
547.301 177.105 mo
547.301 95.648 li
@
547.301 171.195 mo
544.938 168.827 li
547.301 177.105 li
549.668 168.827 li
cp
ef
2 lc
547.301 171.195 mo
544.938 168.827 li
547.301 177.105 li
549.668 168.827 li
cp
@
194.879 75.507 mo
180.664 75.507 li
180.664 76.612 li
183.207 76.612 li
183.207 90.378 li
180.664 90.378 li
180.664 91.48 li
181.559 91.405 183.93 91.405 184.965 91.405 cv
186.113 91.405 188.68 91.405 189.707 91.48 cv
189.707 90.378 li
186.535 90.378 li
186.535 84.03 li
187.715 84.03 li
189.969 84.03 190.18 85.038 190.18 86.78 cv
191.289 86.78 li
191.289 80.179 li
190.18 80.179 li
190.18 81.917 189.992 82.925 187.715 82.925 cv
186.535 82.925 li
186.535 76.612 li
189.828 76.612 li
193.609 76.612 194.156 78.417 194.5 81.167 cv
195.602 81.167 li
cp
f
203.254 89.671 mo
203.254 89.812 li
203.258 89.96 li
203.266 90.109 li
203.277 90.183 li
203.289 90.261 li
203.305 90.335 li
203.328 90.409 li
203.352 90.487 li
203.379 90.562 li
203.418 90.636 li
203.457 90.706 li
203.504 90.78 li
203.559 90.851 li
203.617 90.917 li
203.688 90.98 li
203.762 91.042 li
203.805 91.07 li
203.848 91.101 li
203.941 91.155 li
203.992 91.183 li
204.102 91.23 li
204.16 91.257 li
204.219 91.28 li
204.281 91.304 li
204.348 91.32 li
204.559 91.378 li
204.641 91.394 li
204.719 91.405 li
204.801 91.421 li
204.883 91.433 li
204.973 91.445 li
205.07 91.452 li
205.164 91.464 li
205.262 91.468 li
205.367 91.476 li
205.469 91.476 li
205.578 91.48 li
206.816 91.48 li
207.289 91.48 207.574 91.48 207.574 90.917 cv
207.574 90.378 207.27 90.378 206.961 90.378 cv
205.531 90.355 205.531 90.042 205.531 89.507 cv
205.531 84.46 li
205.531 82.366 203.855 80.843 200.355 80.843 cv
199.023 80.843 196.156 80.933 196.156 83.003 cv
196.156 84.03 196.977 84.484 197.609 84.484 cv
198.34 84.484 199.09 83.987 199.09 83.003 cv
199.09 82.296 198.645 81.894 198.574 81.851 cv
199.23 81.71 199.98 81.683 200.266 81.683 cv
202.031 81.683 202.848 82.667 202.848 84.46 cv
202.848 88.218 li
202.848 90.472 200.688 90.773 200.098 90.773 cv
198.906 90.773 197.961 89.96 197.961 88.917 cv
197.961 86.382 201.676 86.054 202.848 85.984 cv
202.848 85.257 li
201.184 85.327 195.211 85.534 195.211 88.948 cv
195.211 91.202 198.121 91.624 199.742 91.624 cv
201.629 91.624 202.73 90.655 203.254 89.671 cv
cp
f
212.855 75.175 mo
208.695 75.366 li
208.695 76.472 li
210.156 76.472 210.316 76.472 210.316 77.386 cv
210.316 90.378 li
208.695 90.378 li
208.695 91.48 li
209.449 91.456 210.578 91.405 211.586 91.405 cv
212.594 91.405 213.68 91.456 214.473 91.48 cv
214.473 90.378 li
212.855 90.378 li
cp
f
220.375 75.175 mo
216.223 75.366 li
216.223 76.472 li
217.68 76.472 217.844 76.472 217.844 77.386 cv
217.844 90.378 li
216.223 90.378 li
216.223 91.48 li
216.973 91.456 218.098 91.405 219.109 91.405 cv
220.117 91.405 221.203 91.456 222 91.48 cv
222 90.378 li
220.375 90.378 li
cp
f
242.773 75.691 mo
242.738 75.609 li
242.727 75.585 li
242.711 75.562 li
242.703 75.53 li
242.68 75.491 li
242.648 75.448 li
242.602 75.37 li
242.574 75.339 li
242.551 75.304 li
242.5 75.253 li
242.473 75.23 li
242.441 75.206 li
242.387 75.167 li
242.359 75.155 li
242.328 75.14 li
242.301 75.132 li
242.273 75.12 li
242.238 75.112 li
242.211 75.105 li
242.18 75.097 li
242.086 75.085 li
242.051 75.085 li
242.02 75.081 li
241.84 75.081 li
241.184 75.081 241.09 75.273 240.918 75.691 cv
235.094 89.839 li
234.957 90.195 234.883 90.378 233.102 90.378 cv
232.605 90.378 li
232.605 91.48 li
233.496 91.456 234.625 91.405 235.355 91.405 cv
236.27 91.405 237.586 91.405 238.457 91.48 cv
238.457 90.378 li
238.406 90.378 236.363 90.378 236.363 90.077 cv
236.363 90.042 236.43 89.816 236.457 89.788 cv
237.633 86.948 li
238.105 85.847 li
240.777 79.308 li
243.461 85.847 li
238.105 85.847 li
237.633 86.948 li
243.934 86.948 li
245.34 90.378 li
243.105 90.378 li
243.105 91.48 li
244 91.405 246.23 91.405 247.238 91.405 cv
248.184 91.405 250.246 91.405 251.074 91.48 cv
251.074 90.378 li
248.793 90.378 li
cp
f
254.742 83.12 mo
254.742 90.378 li
253.121 90.378 li
253.121 91.48 li
253.785 91.456 255.195 91.405 256.086 91.405 cv
257.004 91.405 258.391 91.456 259.047 91.48 cv
259.047 90.378 li
257.426 90.378 li
257.426 85.468 li
257.426 82.902 259.445 81.757 260.926 81.757 cv
261.727 81.757 262.215 82.249 262.215 84.03 cv
262.215 90.378 li
260.594 90.378 li
260.594 91.48 li
261.254 91.456 262.664 91.405 263.555 91.405 cv
264.477 91.405 265.863 91.456 266.516 91.48 cv
266.516 90.378 li
264.895 90.378 li
264.895 84.288 li
264.895 81.823 263.633 80.909 261.277 80.909 cv
259.023 80.909 257.777 82.249 257.164 83.448 cv
257.164 80.909 li
253.121 81.101 li
253.121 82.206 li
254.582 82.206 254.742 82.206 254.742 83.12 cv
cp
f
269.738 83.12 mo
269.738 90.378 li
268.117 90.378 li
268.117 91.48 li
268.781 91.456 270.188 91.405 271.078 91.405 cv
272.004 91.405 273.383 91.456 274.043 91.48 cv
274.043 90.378 li
272.422 90.378 li
272.422 85.468 li
272.422 82.902 274.441 81.757 275.922 81.757 cv
276.723 81.757 277.207 82.249 277.207 84.03 cv
277.207 90.378 li
275.59 90.378 li
275.59 91.48 li
276.25 91.456 277.66 91.405 278.551 91.405 cv
279.473 91.405 280.859 91.456 281.516 91.48 cv
281.516 90.378 li
279.891 90.378 li
279.891 84.288 li
279.891 81.823 278.625 80.909 276.273 80.909 cv
274.02 80.909 272.777 82.249 272.164 83.448 cv
272.164 80.909 li
268.117 81.101 li
268.117 82.206 li
269.578 82.206 269.738 82.206 269.738 83.12 cv
cp
f
294.793 86.359 mo
294.785 86.066 li
294.766 85.78 li
294.738 85.495 li
294.691 85.218 li
294.633 84.948 li
294.566 84.683 li
294.488 84.421 li
294.395 84.171 li
294.289 83.925 li
294.176 83.687 li
294.043 83.456 li
293.906 83.234 li
293.758 83.015 li
293.59 82.808 li
293.418 82.612 li
293.234 82.421 li
293.035 82.241 li
292.828 82.07 li
292.609 81.909 li
292.379 81.757 li
292.141 81.616 li
291.891 81.487 li
291.625 81.37 li
291.352 81.261 li
291.07 81.163 li
290.777 81.081 li
290.473 81.007 li
290.16 80.952 li
289.832 80.905 li
289.5 80.87 li
289.152 80.847 li
288.801 80.843 li
288.801 81.683 li
289.785 81.683 290.777 82.058 291.289 82.886 cv
291.785 83.675 291.785 84.972 291.785 86.101 cv
291.785 88.144 291.785 90.683 288.801 90.683 cv
285.816 90.683 285.816 88.144 285.816 86.101 cv
285.816 85.038 285.816 83.847 286.215 83.046 cv
286.664 82.175 287.648 81.683 288.801 81.683 cv
288.801 80.843 li
284.949 80.843 282.812 83.237 282.812 86.359 cv
282.812 89.269 284.883 91.624 288.801 91.624 cv
292.754 91.624 294.793 89.249 294.793 86.359 cv
cp
f
298 82.152 mo
298 88.597 li
298 91.105 300.047 91.624 301.719 91.624 cv
303.504 91.624 304.562 90.28 304.562 88.573 cv
304.562 87.327 li
303.453 87.327 li
303.453 88.519 li
303.453 90.12 302.703 90.683 302.047 90.683 cv
300.684 90.683 300.684 89.187 300.684 88.636 cv
300.684 82.152 li
304.109 82.152 li
304.109 81.05 li
300.684 81.05 li
300.684 76.562 li
299.578 76.562 li
299.559 78.909 298.406 81.237 296.078 81.304 cv
296.078 82.152 li
cp
f
314.898 89.671 mo
314.898 89.812 li
314.902 89.96 li
314.906 90.034 li
314.918 90.109 li
314.926 90.183 li
314.938 90.261 li
314.953 90.335 li
314.973 90.409 li
314.996 90.487 li
315.027 90.562 li
315.062 90.636 li
315.105 90.706 li
315.148 90.78 li
315.203 90.851 li
315.266 90.917 li
315.332 90.98 li
315.406 91.042 li
315.449 91.07 li
315.492 91.101 li
315.586 91.155 li
315.641 91.183 li
315.691 91.206 li
315.746 91.23 li
315.805 91.257 li
315.867 91.28 li
315.926 91.304 li
315.992 91.32 li
316.133 91.359 li
316.211 91.378 li
316.285 91.394 li
316.363 91.405 li
316.445 91.421 li
316.625 91.445 li
316.715 91.452 li
316.809 91.464 li
316.906 91.468 li
317.012 91.476 li
317.113 91.476 li
317.223 91.48 li
318.465 91.48 li
318.934 91.48 319.219 91.48 319.219 90.917 cv
319.219 90.378 318.918 90.378 318.605 90.378 cv
317.176 90.355 317.176 90.042 317.176 89.507 cv
317.176 84.46 li
317.176 82.366 315.504 80.843 312.004 80.843 cv
310.668 80.843 307.801 80.933 307.801 83.003 cv
307.801 84.03 308.621 84.484 309.254 84.484 cv
309.984 84.484 310.734 83.987 310.734 83.003 cv
310.734 82.296 310.297 81.894 310.219 81.851 cv
310.875 81.71 311.625 81.683 311.914 81.683 cv
313.676 81.683 314.492 82.667 314.492 84.46 cv
314.492 88.218 li
314.492 90.472 312.332 90.773 311.742 90.773 cv
310.551 90.773 309.605 89.96 309.605 88.917 cv
309.605 86.382 313.324 86.054 314.492 85.984 cv
314.492 85.257 li
312.828 85.327 306.859 85.534 306.859 88.948 cv
306.859 91.202 309.773 91.624 311.391 91.624 cv
313.277 91.624 314.375 90.655 314.898 89.671 cv
cp
f
321.656 82.152 mo
321.656 88.597 li
321.656 91.105 323.703 91.624 325.367 91.624 cv
327.16 91.624 328.211 90.28 328.211 88.573 cv
328.211 87.327 li
327.109 87.327 li
327.109 88.519 li
327.109 90.12 326.359 90.683 325.699 90.683 cv
324.336 90.683 324.336 89.187 324.336 88.636 cv
324.336 82.152 li
327.762 82.152 li
327.762 81.05 li
324.336 81.05 li
324.336 76.562 li
323.23 76.562 li
323.207 78.909 322.059 81.237 319.73 81.304 cv
319.73 82.152 li
cp
f
335.02 80.909 mo
330.934 81.101 li
330.934 82.206 li
332.324 82.206 332.488 82.206 332.488 83.12 cv
332.488 90.378 li
330.867 90.378 li
330.867 91.48 li
331.598 91.456 332.75 91.405 333.734 91.405 cv
334.441 91.405 335.633 91.456 336.484 91.48 cv
336.484 90.378 li
335.02 90.378 li
cp
f
335.258 76.987 mo
335.258 76.89 li
335.246 76.796 li
335.238 76.702 li
335.199 76.523 li
335.172 76.433 li
335.145 76.347 li
335.074 76.183 li
335.031 76.101 li
334.988 76.023 li
334.938 75.952 li
334.883 75.882 li
334.832 75.812 li
334.773 75.745 li
334.711 75.679 li
334.648 75.62 li
334.578 75.566 li
334.512 75.507 li
334.438 75.46 li
334.367 75.413 li
334.285 75.366 li
334.211 75.327 li
334.125 75.292 li
334.047 75.265 li
333.961 75.234 li
333.875 75.21 li
333.785 75.187 li
333.605 75.163 li
333.516 75.155 li
333.422 75.155 li
332.414 75.155 331.598 75.98 331.598 76.987 cv
331.598 77.999 332.414 78.816 333.422 78.816 cv
334.414 78.816 335.258 78.019 335.258 76.987 cv
cp
f
350.02 86.359 mo
350.012 86.066 li
349.996 85.78 li
349.961 85.495 li
349.918 85.218 li
349.863 84.948 li
349.797 84.683 li
349.715 84.421 li
349.621 84.171 li
349.52 83.925 li
349.402 83.687 li
349.273 83.456 li
349.137 83.234 li
348.984 83.015 li
348.82 82.808 li
348.645 82.612 li
348.461 82.421 li
348.266 82.241 li
348.055 82.07 li
347.84 81.909 li
347.609 81.757 li
347.367 81.616 li
347.117 81.487 li
346.855 81.37 li
346.582 81.261 li
346.297 81.163 li
346.004 81.081 li
345.703 81.007 li
345.387 80.952 li
345.062 80.905 li
344.727 80.87 li
344.383 80.847 li
344.027 80.843 li
344.027 81.683 li
345.02 81.683 346.004 82.058 346.52 82.886 cv
347.016 83.675 347.016 84.972 347.016 86.101 cv
347.016 88.144 347.016 90.683 344.027 90.683 cv
341.043 90.683 341.043 88.144 341.043 86.101 cv
341.043 85.038 341.043 83.847 341.445 83.046 cv
341.895 82.175 342.879 81.683 344.027 81.683 cv
344.027 80.843 li
340.176 80.843 338.039 83.237 338.039 86.359 cv
338.039 89.269 340.109 91.624 344.027 91.624 cv
347.98 91.624 350.02 89.249 350.02 86.359 cv
cp
f
353.488 83.12 mo
353.488 90.378 li
351.867 90.378 li
351.867 91.48 li
352.531 91.456 353.938 91.405 354.828 91.405 cv
355.75 91.405 357.133 91.456 357.789 91.48 cv
357.789 90.378 li
356.168 90.378 li
356.168 85.468 li
356.168 82.902 358.191 81.757 359.668 81.757 cv
360.473 81.757 360.961 82.249 360.961 84.03 cv
360.961 90.378 li
359.336 90.378 li
359.336 91.48 li
360 91.456 361.406 91.405 362.297 91.405 cv
363.223 91.405 364.605 91.456 365.266 91.48 cv
365.266 90.378 li
363.645 90.378 li
363.645 84.288 li
363.645 81.823 362.375 80.909 360.02 80.909 cv
357.766 80.909 356.523 82.249 355.914 83.448 cv
355.914 80.909 li
351.867 81.101 li
351.867 82.206 li
353.324 82.206 353.488 82.206 353.488 83.12 cv
cp
f
430.441 75.655 mo
430.418 75.632 li
430.395 75.605 li
430.375 75.589 li
430.332 75.546 li
430.301 75.507 li
430.281 75.495 li
430.266 75.48 li
430.246 75.468 li
430.23 75.452 li
430.215 75.445 li
430.199 75.429 li
430.18 75.421 li
430.164 75.413 li
430.125 75.398 li
430.066 75.386 li
430.043 75.378 li
430.02 75.374 li
429.992 75.37 li
429.965 75.37 li
429.938 75.366 li
429.91 75.366 li
429.875 75.362 li
424.41 75.362 li
424.41 76.441 li
426.898 76.441 li
426.898 89.394 li
426.898 89.894 426.875 89.917 426.223 89.991 cv
425.68 90.058 425.629 90.058 424.988 90.058 cv
424.41 90.058 li
424.41 91.136 li
425.289 91.062 426.594 91.062 427.492 91.062 cv
428.465 91.062 429.656 91.062 430.598 91.136 cv
430.598 90.058 li
430.02 90.058 li
429.609 90.058 429.223 90.034 428.801 89.991 cv
428.141 89.917 428.117 89.894 428.117 89.394 cv
428.117 77.359 li
439.57 90.843 li
439.805 91.112 439.824 91.136 440.191 91.136 cv
440.812 91.136 440.812 90.929 440.812 90.402 cv
440.812 77.105 li
440.812 76.605 440.836 76.581 441.48 76.507 cv
442.031 76.441 442.074 76.441 442.715 76.441 cv
443.293 76.441 li
443.293 75.362 li
442.422 75.425 441.109 75.425 440.215 75.425 cv
439.25 75.425 438.047 75.425 437.105 75.362 cv
437.105 76.441 li
437.684 76.441 li
438.098 76.441 438.492 76.464 438.902 76.507 cv
439.57 76.581 439.594 76.605 439.594 77.105 cv
439.594 86.417 li
cp
f
456.699 86.124 mo
456.691 85.835 li
456.672 85.554 li
456.645 85.277 li
456.605 85.007 li
456.547 84.741 li
456.48 84.48 li
456.402 84.226 li
456.312 83.98 li
456.207 83.741 li
456.098 83.507 li
455.973 83.28 li
455.832 83.062 li
455.684 82.851 li
455.527 82.648 li
455.355 82.452 li
455.172 82.269 li
454.984 82.093 li
454.781 81.921 li
454.562 81.765 li
454.336 81.616 li
454.102 81.48 li
453.855 81.355 li
453.602 81.237 li
453.336 81.132 li
453.059 81.034 li
452.766 80.956 li
452.473 80.882 li
452.164 80.827 li
451.848 80.78 li
451.52 80.749 li
451.184 80.726 li
450.836 80.722 li
450.836 81.542 li
451.801 81.542 452.766 81.913 453.273 82.722 cv
453.754 83.495 453.754 84.765 453.754 85.87 cv
453.754 87.866 453.754 90.359 450.836 90.359 cv
447.914 90.359 447.914 87.866 447.914 85.87 cv
447.914 84.831 447.914 83.663 448.301 82.878 cv
448.742 82.027 449.711 81.542 450.836 81.542 cv
450.836 80.722 li
447.062 80.722 444.969 83.066 444.969 86.124 cv
444.969 88.972 446.996 91.277 450.836 91.277 cv
454.703 91.277 456.699 88.952 456.699 86.124 cv
cp
f
460.094 82.952 mo
460.094 90.058 li
458.508 90.058 li
458.508 91.136 li
459.156 91.112 460.531 91.062 461.406 91.062 cv
462.309 91.062 463.664 91.112 464.309 91.136 cv
464.309 90.058 li
462.723 90.058 li
462.723 85.249 li
462.723 82.737 464.699 81.616 466.148 81.616 cv
466.934 81.616 467.406 82.097 467.406 83.843 cv
467.406 90.058 li
465.824 90.058 li
465.824 91.136 li
466.469 91.112 467.852 91.062 468.723 91.062 cv
469.625 91.062 470.98 91.112 471.621 91.136 cv
471.621 90.058 li
470.035 90.058 li
470.035 84.097 li
470.035 81.683 468.793 80.784 466.492 80.784 cv
464.285 80.784 463.066 82.097 462.469 83.273 cv
462.469 80.784 li
458.508 80.976 li
458.508 82.054 li
459.938 82.054 460.094 82.054 460.094 82.952 cv
cp
f
472.453 84.905 mo
479.473 84.905 li
479.473 87.135 li
472.453 87.135 li
cp
f
495.773 75.499 mo
481.859 75.499 li
481.859 76.581 li
484.348 76.581 li
484.348 90.058 li
481.859 90.058 li
481.859 91.136 li
482.742 91.062 485.062 91.062 486.074 91.062 cv
487.195 91.062 489.707 91.062 490.719 91.136 cv
490.719 90.058 li
487.605 90.058 li
487.605 83.843 li
488.762 83.843 li
490.969 83.843 491.18 84.831 491.18 86.534 cv
492.262 86.534 li
492.262 80.07 li
491.18 80.07 li
491.18 81.773 490.992 82.761 488.762 82.761 cv
487.605 82.761 li
487.605 76.581 li
490.832 76.581 li
494.531 76.581 495.066 78.347 495.406 81.038 cv
496.488 81.038 li
cp
f
503.973 89.362 mo
503.973 89.503 li
503.977 89.648 li
503.984 89.718 li
504 89.866 li
504.012 89.941 li
504.027 90.015 li
504.047 90.089 li
504.07 90.163 li
504.102 90.237 li
504.137 90.312 li
504.176 90.378 li
504.223 90.448 li
504.273 90.519 li
504.332 90.581 li
504.398 90.648 li
504.477 90.706 li
504.512 90.734 li
504.559 90.765 li
504.602 90.792 li
504.648 90.82 li
504.699 90.847 li
504.75 90.87 li
504.859 90.917 li
504.922 90.937 li
504.98 90.96 li
505.043 90.98 li
505.184 91.019 li
505.332 91.05 li
505.41 91.062 li
505.492 91.077 li
505.574 91.089 li
505.664 91.101 li
505.75 91.109 li
505.848 91.12 li
505.941 91.124 li
506.043 91.132 li
506.148 91.132 li
506.254 91.136 li
507.465 91.136 li
507.926 91.136 508.203 91.136 508.203 90.581 cv
508.203 90.058 507.906 90.058 507.602 90.058 cv
506.203 90.034 506.203 89.73 506.203 89.202 cv
506.203 84.261 li
506.203 82.214 504.562 80.722 501.141 80.722 cv
499.832 80.722 497.031 80.808 497.031 82.835 cv
497.031 83.843 497.828 84.284 498.445 84.284 cv
499.164 84.284 499.902 83.8 499.902 82.835 cv
499.902 82.144 499.469 81.749 499.395 81.71 cv
500.035 81.57 500.77 81.542 501.055 81.542 cv
502.777 81.542 503.578 82.507 503.578 84.261 cv
503.578 87.941 li
503.578 90.148 501.461 90.445 500.883 90.445 cv
499.715 90.445 498.793 89.648 498.793 88.624 cv
498.793 86.148 502.43 85.823 503.578 85.753 cv
503.578 85.042 li
501.945 85.112 496.105 85.316 496.105 88.659 cv
496.105 90.866 498.953 91.277 500.539 91.277 cv
502.387 91.277 503.461 90.327 503.973 89.362 cv
cp
f
513.375 75.171 mo
509.305 75.362 li
509.305 76.441 li
510.734 76.441 510.891 76.441 510.891 77.335 cv
510.891 90.058 li
509.305 90.058 li
509.305 91.136 li
510.039 91.112 511.145 91.062 512.133 91.062 cv
513.121 91.062 514.18 91.112 514.961 91.136 cv
514.961 90.058 li
513.375 90.058 li
cp
f
520.738 75.171 mo
516.672 75.362 li
516.672 76.441 li
518.102 76.441 518.258 76.441 518.258 77.335 cv
518.258 90.058 li
516.672 90.058 li
516.672 91.136 li
517.41 91.112 518.512 91.062 519.5 91.062 cv
520.488 91.062 521.547 91.112 522.324 91.136 cv
522.324 90.058 li
520.738 90.058 li
cp
f
542.668 75.679 mo
542.652 75.652 li
542.645 75.624 li
542.633 75.597 li
542.617 75.573 li
542.609 75.55 li
542.594 75.523 li
542.57 75.48 li
542.547 75.441 li
542.52 75.402 li
542.496 75.366 li
542.473 75.335 li
542.445 75.3 li
542.422 75.273 li
542.34 75.202 li
542.316 75.187 li
542.289 75.167 li
542.262 75.152 li
542.234 75.14 li
542.203 75.132 li
542.176 75.12 li
542.145 75.112 li
542.113 75.101 li
542.086 75.097 li
542.023 75.089 li
541.988 75.085 li
541.957 75.085 li
541.926 75.081 li
541.75 75.081 li
541.105 75.081 541.016 75.269 540.848 75.679 cv
535.152 89.53 li
535.012 89.878 534.938 90.058 533.195 90.058 cv
532.711 90.058 li
532.711 91.136 li
533.586 91.112 534.691 91.062 535.402 91.062 cv
536.297 91.062 537.59 91.062 538.438 91.136 cv
538.438 90.058 li
538.387 90.058 536.391 90.058 536.391 89.761 cv
536.391 89.73 536.457 89.507 536.484 89.48 cv
537.629 86.698 li
538.094 85.62 li
540.711 79.222 li
543.336 85.62 li
538.094 85.62 li
537.629 86.698 li
543.801 86.698 li
545.176 90.058 li
542.992 90.058 li
542.992 91.136 li
543.863 91.062 546.051 91.062 547.039 91.062 cv
547.965 91.062 549.98 91.062 550.789 91.136 cv
550.789 90.058 li
548.559 90.058 li
cp
f
554.387 82.952 mo
554.387 90.058 li
552.797 90.058 li
552.797 91.136 li
553.449 91.112 554.824 91.062 555.695 91.062 cv
556.598 91.062 557.953 91.112 558.598 91.136 cv
558.598 90.058 li
557.008 90.058 li
557.008 85.249 li
557.008 82.737 558.988 81.616 560.438 81.616 cv
561.223 81.616 561.699 82.097 561.699 83.843 cv
561.699 90.058 li
560.109 90.058 li
560.109 91.136 li
560.762 91.112 562.137 91.062 563.012 91.062 cv
563.914 91.062 565.27 91.112 565.914 91.136 cv
565.914 90.058 li
564.324 90.058 li
564.324 84.097 li
564.324 81.683 563.082 80.784 560.785 80.784 cv
558.574 80.784 557.355 82.097 556.758 83.273 cv
556.758 80.784 li
552.797 80.976 li
552.797 82.054 li
554.223 82.054 554.387 82.054 554.387 82.952 cv
cp
f
569.062 82.952 mo
569.062 90.058 li
567.48 90.058 li
567.48 91.136 li
568.125 91.112 569.508 91.062 570.379 91.062 cv
571.277 91.062 572.637 91.112 573.277 91.136 cv
573.277 90.058 li
571.691 90.058 li
571.691 85.249 li
571.691 82.737 573.664 81.616 575.117 81.616 cv
575.906 81.616 576.379 82.097 576.379 83.843 cv
576.379 90.058 li
574.793 90.058 li
574.793 91.136 li
575.445 91.112 576.82 91.062 577.691 91.062 cv
578.594 91.062 579.949 91.112 580.59 91.136 cv
580.59 90.058 li
579.004 90.058 li
579.004 84.097 li
579.004 81.683 577.766 80.784 575.461 80.784 cv
573.254 80.784 572.035 82.097 571.438 83.273 cv
571.438 80.784 li
567.48 80.976 li
567.48 82.054 li
568.906 82.054 569.062 82.054 569.062 82.952 cv
cp
f
593.594 86.124 mo
593.582 85.835 li
593.566 85.554 li
593.539 85.277 li
593.496 85.007 li
593.441 84.741 li
593.371 84.48 li
593.293 84.226 li
593.203 83.98 li
593.098 83.741 li
592.988 83.507 li
592.863 83.28 li
592.727 83.062 li
592.578 82.851 li
592.418 82.648 li
592.25 82.452 li
592.062 82.269 li
591.875 82.093 li
591.672 81.921 li
591.453 81.765 li
591.23 81.616 li
590.992 81.48 li
590.75 81.355 li
590.496 81.237 li
590.227 81.132 li
589.949 81.034 li
589.66 80.956 li
589.363 80.882 li
589.055 80.827 li
588.738 80.78 li
588.414 80.749 li
588.074 80.726 li
587.73 80.722 li
587.73 81.542 li
588.695 81.542 589.66 81.913 590.168 82.722 cv
590.648 83.495 590.648 84.765 590.648 85.87 cv
590.648 87.866 590.648 90.359 587.73 90.359 cv
584.805 90.359 584.805 87.866 584.805 85.87 cv
584.805 84.831 584.805 83.663 585.195 82.878 cv
585.633 82.027 586.602 81.542 587.73 81.542 cv
587.73 80.722 li
583.953 80.722 581.859 83.066 581.859 86.124 cv
581.859 88.972 583.887 91.277 587.73 91.277 cv
591.594 91.277 593.594 88.952 593.594 86.124 cv
cp
f
596.73 82.003 mo
596.73 88.312 li
596.73 90.769 598.742 91.277 600.371 91.277 cv
602.125 91.277 603.152 89.96 603.152 88.288 cv
603.152 87.07 li
602.074 87.07 li
602.074 88.237 li
602.074 89.804 601.336 90.359 600.695 90.359 cv
599.359 90.359 599.359 88.89 599.359 88.355 cv
599.359 82.003 li
602.715 82.003 li
602.715 80.925 li
599.359 80.925 li
599.359 76.53 li
598.277 76.53 li
598.254 78.827 597.129 81.109 594.848 81.175 cv
594.848 82.003 li
cp
f
613.273 89.362 mo
613.277 89.503 li
613.285 89.648 li
613.285 89.718 li
613.301 89.866 li
613.316 89.941 li
613.328 90.015 li
613.348 90.089 li
613.402 90.237 li
613.438 90.312 li
613.477 90.378 li
613.523 90.448 li
613.574 90.519 li
613.633 90.581 li
613.703 90.648 li
613.777 90.706 li
613.82 90.734 li
613.859 90.765 li
613.902 90.792 li
613.953 90.82 li
614 90.847 li
614.055 90.87 li
614.105 90.894 li
614.164 90.917 li
614.223 90.937 li
614.285 90.96 li
614.352 90.98 li
614.414 90.999 li
614.484 91.019 li
614.633 91.05 li
614.711 91.062 li
614.793 91.077 li
614.875 91.089 li
614.965 91.101 li
615.051 91.109 li
615.148 91.12 li
615.246 91.124 li
615.344 91.132 li
615.449 91.132 li
615.555 91.136 li
616.77 91.136 li
617.23 91.136 617.504 91.136 617.504 90.581 cv
617.504 90.058 617.207 90.058 616.906 90.058 cv
615.504 90.034 615.504 89.73 615.504 89.202 cv
615.504 84.261 li
615.504 82.214 613.871 80.722 610.445 80.722 cv
609.137 80.722 606.332 80.808 606.332 82.835 cv
606.332 83.843 607.129 84.284 607.754 84.284 cv
608.465 84.284 609.203 83.8 609.203 82.835 cv
609.203 82.144 608.77 81.749 608.695 81.71 cv
609.336 81.57 610.074 81.542 610.355 81.542 cv
612.078 81.542 612.883 82.507 612.883 84.261 cv
612.883 87.941 li
612.883 90.148 610.766 90.445 610.191 90.445 cv
609.023 90.445 608.098 89.648 608.098 88.624 cv
608.098 86.148 611.734 85.823 612.883 85.753 cv
612.883 85.042 li
611.254 85.112 605.406 85.316 605.406 88.659 cv
605.406 90.866 608.258 91.277 609.844 91.277 cv
611.691 91.277 612.766 90.327 613.273 89.362 cv
cp
f
619.891 82.003 mo
619.891 88.312 li
619.891 90.769 621.895 91.277 623.523 91.277 cv
625.277 91.277 626.312 89.96 626.312 88.288 cv
626.312 87.07 li
625.227 87.07 li
625.227 88.237 li
625.227 89.804 624.492 90.359 623.852 90.359 cv
622.52 90.359 622.52 88.89 622.52 88.355 cv
622.52 82.003 li
625.871 82.003 li
625.871 80.925 li
622.52 80.925 li
622.52 76.53 li
621.434 76.53 li
621.414 78.827 620.289 81.109 618.008 81.175 cv
618.008 82.003 li
cp
f
632.98 80.784 mo
628.973 80.976 li
628.973 82.054 li
630.34 82.054 630.496 82.054 630.496 82.952 cv
630.496 90.058 li
628.91 90.058 li
628.91 91.136 li
629.625 91.112 630.75 91.062 631.715 91.062 cv
632.406 91.062 633.574 91.112 634.406 91.136 cv
634.406 90.058 li
632.98 90.058 li
cp
f
633.211 76.948 mo
633.207 76.851 li
633.203 76.761 li
633.188 76.667 li
633.172 76.581 li
633.152 76.491 li
633.129 76.405 li
633.094 76.32 li
633.062 76.237 li
633.027 76.159 li
632.988 76.081 li
632.941 76.003 li
632.895 75.933 li
632.844 75.862 li
632.734 75.73 li
632.676 75.667 li
632.609 75.609 li
632.547 75.554 li
632.477 75.499 li
632.406 75.452 li
632.332 75.405 li
632.258 75.362 li
632.18 75.323 li
632.102 75.288 li
631.938 75.234 li
631.766 75.187 li
631.684 75.171 li
631.59 75.163 li
631.504 75.152 li
631.414 75.152 li
630.426 75.152 629.625 75.96 629.625 76.948 cv
629.625 77.937 630.426 78.737 631.414 78.737 cv
632.379 78.737 633.211 77.956 633.211 76.948 cv
cp
f
647.66 86.124 mo
647.652 85.835 li
647.633 85.554 li
647.605 85.277 li
647.562 85.007 li
647.508 84.741 li
647.441 84.48 li
647.359 84.226 li
647.273 83.98 li
647.168 83.741 li
647.055 83.507 li
646.934 83.28 li
646.793 83.062 li
646.645 82.851 li
646.488 82.648 li
646.316 82.452 li
646.133 82.269 li
645.945 82.093 li
645.742 81.921 li
645.523 81.765 li
645.297 81.616 li
645.062 81.48 li
644.816 81.355 li
644.562 81.237 li
644.297 81.132 li
644.02 81.034 li
643.727 80.956 li
643.434 80.882 li
643.121 80.827 li
642.809 80.78 li
642.48 80.749 li
642.145 80.726 li
641.793 80.722 li
641.793 81.542 li
642.762 81.542 643.727 81.913 644.234 82.722 cv
644.715 83.495 644.715 84.765 644.715 85.87 cv
644.715 87.866 644.715 90.359 641.793 90.359 cv
638.875 90.359 638.875 87.866 638.875 85.87 cv
638.875 84.831 638.875 83.663 639.262 82.878 cv
639.703 82.027 640.672 81.542 641.793 81.542 cv
641.793 80.722 li
638.02 80.722 635.93 83.066 635.93 86.124 cv
635.93 88.972 637.957 91.277 641.793 91.277 cv
645.664 91.277 647.66 88.952 647.66 86.124 cv
cp
f
651.055 82.952 mo
651.055 90.058 li
649.465 90.058 li
649.465 91.136 li
650.117 91.112 651.492 91.062 652.367 91.062 cv
653.27 91.062 654.625 91.112 655.266 91.136 cv
655.266 90.058 li
653.684 90.058 li
653.684 85.249 li
653.684 82.737 655.656 81.616 657.109 81.616 cv
657.891 81.616 658.367 82.097 658.367 83.843 cv
658.367 90.058 li
656.785 90.058 li
656.785 91.136 li
657.43 91.112 658.812 91.062 659.684 91.062 cv
660.586 91.062 661.941 91.112 662.582 91.136 cv
662.582 90.058 li
660.996 90.058 li
660.996 84.097 li
660.996 81.683 659.754 80.784 657.453 80.784 cv
655.246 80.784 654.027 82.097 653.43 83.273 cv
653.43 80.784 li
649.465 80.976 li
649.465 82.054 li
650.898 82.054 651.055 82.054 651.055 82.952 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/WIYWCH+DejaVuSans*1 uf
/WIYWCH+DejaVuSans uf
/PBAAAA+DejaVuSans uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
