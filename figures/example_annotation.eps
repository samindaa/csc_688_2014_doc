%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: example_annotation.pdf
%%Creator: Adobe Acrobat 10.1.14
%%For: ds
%%CreationDate: 6/30/2015, 8:01:55 AM
%%BoundingBox: 0 0 1093 552
%%HiResBoundingBox: 0 0 1092.8001 551.2001
%%CropBox: 0 0 1092.8001 551.2001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.13.1 (http://cairographics.org)"
   pdf:Producer="cairo 1.13.1 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -551.2 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 551.2 li
1092.8 551.2 li
1092.8 0 li
cp
clp
0 0 mo
1092.8 0 li
1092.8 551.199 li
0 551.199 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
0 0 mo
1092.8 0 li
1092.8 551.199 li
0 551.199 li
cp
f
142.398 41.602 mo
988.8 41.602 li
988.8 490.399 li
142.398 490.399 li
cp
f
.8 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
142.398 490.398 mo
988.801 490.398 li
0 0 0 .944213 cmyk
@
142.398 41.602 mo
988.801 41.602 li
@
142.398 490.398 mo
142.398 481.938 li
@
227.039 490.398 mo
227.039 481.938 li
@
311.68 490.398 mo
311.68 481.938 li
@
396.32 490.398 mo
396.32 481.938 li
@
480.961 490.398 mo
480.961 481.938 li
@
565.602 490.398 mo
565.602 481.938 li
@
650.238 490.398 mo
650.238 481.938 li
@
734.879 490.398 mo
734.879 481.938 li
@
819.52 490.398 mo
819.52 481.938 li
@
904.16 490.398 mo
904.16 481.938 li
@
988.801 490.398 mo
988.801 481.938 li
@
142.398 41.602 mo
142.398 50.062 li
@
227.039 41.602 mo
227.039 50.062 li
@
311.68 41.602 mo
311.68 50.062 li
@
396.32 41.602 mo
396.32 50.062 li
@
480.961 41.602 mo
480.961 50.062 li
@
565.602 41.602 mo
565.602 50.062 li
@
650.238 41.602 mo
650.238 50.062 li
@
734.879 41.602 mo
734.879 50.062 li
@
819.52 41.602 mo
819.52 50.062 li
@
904.16 41.602 mo
904.16 50.062 li
@
988.801 41.602 mo
988.801 50.062 li
@
%ADOBeginSubsetFont: PBAAAA+DejaVuSans Initial
ct_T42Dict begin
-1.02 -0.414 1.68 1.164
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+DejaVuSans
Type42DictBegin
[<00010000000a000a000a000a6376742000691d39000000ac000001fe6670
676d7134766a000002ac000000ab676c796645a844b200000988000004f0
68656164026638f70000035800000036686865610cb8065a000003900000
0024686d747828c50541000003b4000000246c6f6361000019b8000003d8
000000286d617870047606710000040000000020707265703b07f1000000
04200000056867646972000000000000000000000000013500b800cb00cb
00c100aa009c01a600b800660000007100cb00a002b20085007500b800c3
01cb0189022d00cb00a600f000d300aa008700cb03aa0400014a003300cb
000000d9050200f4015400b4009c01390114013907060400044e04b40452
04b804e704cd0037047304cd04600473013303a2055605a60556053903c5
021200c9001f00b801df007300ba03e9033303bc0444040e00df03cd03aa
00e503aa0404000000cb008f00a4007b00b80014016f007f027b0252008f
00c705cd009a009a006f00cb00cd019e01d300f000ba018300d500980304
0248009e01d500c100cb00f600830354027f00000333026600d300c700a4
00cd008f009a0073040005d5010a00fe022b00a400b4009c00000062009c
0000001d032d05d505d505d505f0007f007b005400a406b80614072301d3
00b800cb00a601c301ec069300a000d3035c037103db0185042304a80448
008f0139011401390360008f05d5019a0614072306660179046004600460
047b009c00000277046001aa00e904600762007b00c5007f027b000000b4
025205cd006600bc00660077061000cd013b01850389008f007b0000001d
00cd074a042f009c009c0000077d006f0000006f0335006a006f007b00ae
00b2002d0396008f027b00f600830354063705f6008f009c04e10266008f
018d02f600cd03440029006604ee00730000140000960000b70706050403
0201002c2010b002254964b040515820c859212d2cb002254964b0405158
20c859212d2c20100720b00050b00d7920b8ffff5058041b0559b0051cb0
032508b0042523e120b00050b00d7920b8ffff5058041b0559b0051cb003
2508e12d2c4b505820b0fd454459212d2cb002254560442d2c4b5358b002
25b0022545445921212d2c45442d2cb00225b0022549b00525b005254960
b0206368208a108a233a8a10653a2d00000100000002570a86277a745f0f
3cf5001f080000000000cef5cb7600000000cef5cb76f7d6fcae0d720955
00000008000000010000000000010000076dfe1d00000de2f7d6fa510d72
00010000000000000000000000000000000904cd0066051700870517009e
051700e1051700960517009c0517006402e30064028b00db000000000000
0044000000c800000188000001f8000002f8000003e00000049c000004c8
000004f00001000000090354002b0068000c000200100099000800000415
021600080004b8028040fffbfe03fa1403f92503f83203f79603f60e03f5
fe03f4fe03f32503f20e03f19603f02503ef8a4105effe03ee9603ed9603
ecfa03ebfa03eafe03e93a03e84203e7fe03e63203e5e45305e59603e48a
4105e45303e3e22f05e3fa03e22f03e1fe03e0fe03df3203de1403dd9603
dcfe03db1203da7d03d9bb03d8fe03d68a4105d67d03d5d44705d57d03d4
4703d3d21b05d3fe03d21b03d1fe03d0fe03cffe03cefe03cd9603cccb1e
05ccfe03cb1e03ca3203c9fe03c6851105c61c03c51603c4fe03c3fe03c2
fe03c1fe03c0fe03bffe03befe03bdfe03bcfe03bbfe03ba1103b9862505
b9fe03b8b7bb05b8fe03b7b65d05b7bb03b78004b6b52505b65d40ff03b6
4004b52503b4fe03b39603b2fe03b1fe03b0fe03affe03ae6403ad0e03ac
ab2505ac6403abaa1205ab2503aa1203a98a4105a9fa03a8fe03a7fe03a6
fe03a51203a4fe03a3a20e05a33203a20e03a16403a08a4105a096039ffe
039e9d0c059efe039d0c039c9b19059c64039b9a10059b19039a1003990a
0398fe0397960d0597fe03960d03958a410595960394930e05942803930e
0392fa039190bb0591fe03908f5d0590bb039080048f8e25058f5d038f40
048e25038dfe038c8b2e058cfe038b2e038a8625058a410389880b058914
03880b03878625058764038685110586250385110384fe038382110583fe
0382110381fe0380fe037ffe0340ff7e7d7d057efe037d7d037c64037b54
15057b25037afe0379fe03780e03770c03760a0375fe0374fa0373fa0372
fa0371fa0370fe036ffe036efe036c21036bfe036a1142056a530369fe03
687d036711420566fe0365fe0364fe0363fe0362fe03613a0360fa035e0c
035dfe035bfe035afe0359580a0559fa03580a035716190557320356fe03
5554150555420354150353011005531803521403514a130551fe03500b03
4ffe034e4d10054efe034d10034cfe034b4a13054bfe034a4910054a1303
491d0d05491003480d0347fe0346960345960344fe0343022d0543fa0342
bb03414b0340fe033ffe033e3d12053e14033d3c0f053d12033c3b0d053c
40ff0f033b0d033afe0339fe033837140538fa033736100537140336350b
05361003350b03341e03330d0332310b0532fe03310b03302f0b05300d03
2f0b032e2d09052e10032d09032c32032b2a25052b64032a2912052a2503
2912032827250528410327250326250b05260f03250b0324fe0323fe0322
0f03210110052112032064031ffa031e1d0d051e64031d0d031c1142051c
fe031bfa031a42031911420519fe031864031716190517fe031601100516
190315fe0314fe0313fe031211420512fe0311022d05114203107d030f64
030efe030d0c16050dfe030c0110050c16030bfe030a100309fe0308022d
0508fe030714030664030401100504fe03401503022d0503fe0302011005
022d0301100300fe0301b80164858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b1d00>
[1265 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 68 1 <00020087ffe3048f05f0000b00170023401306a01200a00c91128c18091c
0f1e031c151b1810fcecf4ec310010e4f4ec10ee30012202111012333212
111002273200111000232200111000028b9c9d9d9c9d9d9d9dfb0109fef7
fbfbfef701090550fecdfeccfecdfecd0133013301340133a0fe73fe86fe
87fe73018d0179017a018d00>PBAAAA+DejaVuSans AddT42Char 
1 392 3 <000100e10000045a05d5000a004040154203a00402a005810700a009081f
061c03001f010b10d44bb00f5458b9000100403859ecc4fcec31002fec32
f4ecd4ec304b5358592201b40f030f04025d3721110535253311211521fe
014afe990165ca014afca4aa047348b848fad5aa0000>PBAAAA+DejaVuSans AddT42Char 
1 504 4 <000100960000044a05f0001c009e4027191a1b03181c1105040011050504
4210a111940da014910400a00200100a02010a1c171003061d10fc4bb015
544bb016545b4bb014545b58b90003ffc03859c4d4ecc0c011123931002f
ec32f4ecf4ec304b5358071005ed0705ed01b01c10111739592201403255
04560556077a047a05761b87190704000419041a041b051c74007606751a
731b741c82008619821a821b821ca800a81b115d005d2521152135360037
3e0135342623220607353e01333204151406070600018902c1fc4c73018d
33614da7865fd3787ad458e80114455b19fef4aaaaaa7701913a6d974977
964243cc3132e8c25ca5701dfeeb0000>PBAAAA+DejaVuSans AddT42Char 
1 760 5 <0001009cffe3047305f000280070402e0015130a86091f862013a0150da0
0993061ca020932391068c15a329161c13000314191c2620101c03141f09
062910fc4bb016544bb014545b58b90009ffc03859c4c4d4ecf4ec111739
39310010ece4f4e4ec10e6ee10ee10ee10ee11123930014009641e611f61
20642104005d011e0115140421222627351e013332363534262b01353332
3635342623220607353e01333204151406033f91a3fed0fee85ec76a54c8
6dbec7b9a5aeb6959ea39853be7273c959e6010c8e03251fc490ddf22525
c33132968f8495a67770737b2426b42020d1b27cab00>PBAAAA+DejaVuSans AddT42Char 
1 992 6 <00020064000004a405d50002000d0081401d010d030d0003030d4200030b
07a00501038109010c0a001c0608040c0e10dc4bb00b544bb00d545b58b9
000cffc03859d43cc4ec32113931002fe4d43cec321239304b5358071004
c9071005c9592201402a0b002a0048005900690077008a000716012b0026
012b0336014e014f0c4f0d5601660175017a0385010d5d005d0901210333
1133152311231121350306fe0201fe35fed5d5c9fd5e0525fce303cdfc33
a8fea00160c30000>PBAAAA+DejaVuSans AddT42Char 
1 200 2 <0001009effe3046405d5001d005e4023041a071186101d1aa00714a01089
0d02a000810d8c07a41e171c010a031c000a10061e10fc014bb016544bb0
14545b58b90010ffc038594bb00f5458b9001000403859c4d4ec10c4ee31
0010e4e4f4ec10e6ee10fec410ee1112393013211521113e013332001514
0021222627351e0133323635342623220607dd0319fda02c582cfa0124fe
d4feef5ec3685ac06badcacaad51a15405d5aafe920f0ffeeeeaf1fef520
20cb3130b69c9cb624260000>PBAAAA+DejaVuSans AddT42Char 
1 0 0 <00020066fe96046605a400030007001a400c04fb0006fb0108057f020400
2fc4d4ec310010d4ecd4ec301311211125211121660400fc73031bfce5fe
96070ef8f2720629>PBAAAA+DejaVuSans AddT42Char 
PBAAAA+DejaVuSans /CharStrings get begin
/zero 1 def
/one 3 def
/two 4 def
/three 5 def
/four 6 def
/five 2 def
end
PBAAAA+DejaVuSans /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
pop
end
%ADOEndSubsetFont
/TJGJUB+DejaVuSans /PBAAAA+DejaVuSans findfont ct_VMDictPut
/TJGJUB+DejaVuSans*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
TJGJUB+DejaVuSans nf
TJGJUB+DejaVuSans*1 [10.4 0 0 -10.4 0 0 ]msf
138.8 505.067 mo
(050)
[81.4424 6.61441 0 ]xsh
301.68 505.067 mo
(100150)
[6.61441 6.61441 71.4064 6.61441 6.61441 0 ]xsh
470.96 505.067 mo
(200250)
[6.61441 6.61441 71.4064 6.61444 6.61444 0 ]xsh
640.24 505.067 mo
(300350)
[6.61444 6.61438 71.4064 6.61438 6.61444 0 ]xsh
809.52 505.067 mo
(400450)
[6.61444 6.61438 71.4064 6.61438 6.61444 0 ]xsh
978.8 505.067 mo
(500)
[6.61444 6.61438 0 ]xsh
142.398 490.398 mo
142.398 41.602 li
@
988.801 490.398 mo
988.801 41.602 li
@
142.398 490.398 mo
150.863 490.398 li
@
142.398 400.641 mo
150.863 400.641 li
@
142.398 310.879 mo
150.863 310.879 li
@
142.398 221.121 mo
150.863 221.121 li
@
142.398 131.359 mo
150.863 131.359 li
@
142.398 41.602 mo
150.863 41.602 li
@
988.801 490.398 mo
980.336 490.398 li
@
988.801 400.641 mo
980.336 400.641 li
@
988.801 310.879 mo
980.336 310.879 li
@
988.801 221.121 mo
980.336 221.121 li
@
988.801 131.359 mo
980.336 131.359 li
@
988.801 41.602 mo
980.336 41.602 li
@
%ADOBeginSubsetFont: PBAAAA+DejaVuSans AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TJGJUB+DejaVuSans gcheck setglobal} if
1 1180 7 <0001006401df027f028300030011b6009c020401000410dccc310010d4ec
301321152164021bfde50283a400>TJGJUB+DejaVuSans AddT42Char 
1 1224 8 <000100db000001ae00fe00030011b7008302011900180410fcec31002fec
3037331523dbd3d3fefe>TJGJUB+DejaVuSans AddT42Char 
TJGJUB+DejaVuSans /CharStrings get begin
/hyphen 7 def
/period 8 def
end
TJGJUB+DejaVuSans /Encoding get
dup 45 /hyphen put
dup 46 /period put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TJGJUB+DejaVuSans*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three 
/four /five 202{/.notdef}rp]
TJGJUB+DejaVuSans nf
TJGJUB+DejaVuSans*1 [10.4 0 0 -10.4 0 0 ]msf
110.933 494 mo
(-0.05)
[3.744 6.61442 3.29681 6.61441 0 ]xsh
130.933 404.24 mo
(0)sh
114.933 314.48 mo
(0.05)
[6.61442 3.29681 6.61441 0 ]xsh
121.333 224.72 mo
(0.1)
[6.61442 3.29681 0 ]xsh
114.933 134.96 mo
(0.15)
[6.61442 3.29681 6.61441 0 ]xsh
121.333 45.2001 mo
(0.2)
[6.61442 3.29681 0 ]xsh
0 lc
2 lj
144.094 360.258 mo
145.785 407.418 li
147.477 464.461 li
149.172 430.695 li
150.863 362.379 li
152.559 349.66 li
154.25 427.785 li
155.941 471.199 li
157.637 385.434 li
159.328 340.578 li
161.02 379.598 li
162.715 452.98 li
164.406 468.109 li
166.098 379.473 li
167.793 330.453 li
169.484 372.289 li
171.176 430.809 li
172.871 441.906 li
174.562 398.094 li
176.258 375.254 li
177.949 410.387 li
179.641 439.562 li
181.336 397.348 li
183.027 373.156 li
184.719 399.996 li
186.414 360.715 li
188.105 334.812 li
189.797 392.734 li
191.492 406.594 li
193.184 391.523 li
194.875 375.082 li
196.57 373.711 li
198.262 382.559 li
199.957 383.922 li
201.648 386.859 li
203.34 378.527 li
205.035 378.582 li
206.727 381.266 li
208.418 381.172 li
210.113 381.457 li
213.496 380.473 li
215.191 380.473 li
216.883 380.176 li
218.574 381.473 li
220.27 371.512 li
221.961 366.68 li
223.656 400.004 li
225.348 446.25 li
227.039 442.727 li
.875212 .526726 .00314336 .000793469 cmyk
@
227.039 442.727 mo
228.734 376.652 li
230.426 355.113 li
232.117 405.93 li
233.812 445.273 li
235.504 442.406 li
237.195 385.09 li
238.891 357.574 li
240.582 403.863 li
242.273 452.121 li
243.969 450.258 li
245.66 382.289 li
247.355 357.152 li
249.047 391.957 li
250.738 443.117 li
252.434 451.141 li
254.125 393.934 li
255.816 373.621 li
257.512 405.668 li
259.203 419.773 li
260.895 404.715 li
262.59 398.898 li
264.281 405.574 li
265.973 364.73 li
267.668 333.016 li
269.359 347.398 li
271.055 368.305 li
272.746 380.168 li
274.438 372.012 li
276.133 377.039 li
277.824 377.984 li
279.516 378.543 li
281.211 380.266 li
282.902 379.863 li
284.594 379.309 li
286.289 380.629 li
287.98 380.742 li
289.672 379.996 li
291.367 380.055 li
293.059 380.273 li
294.754 380.633 li
296.445 380.93 li
298.137 380.492 li
299.832 379.598 li
301.523 374.512 li
303.215 394.98 li
304.91 438.641 li
306.602 433.812 li
308.293 378.824 li
309.988 361.52 li
@
309.988 361.52 mo
311.68 404.531 li
313.371 445.441 li
315.066 427.812 li
316.758 374.066 li
318.453 366.152 li
320.145 407.336 li
321.836 448.484 li
323.531 433.672 li
325.223 372.574 li
326.914 365.004 li
328.609 408.426 li
330.301 435.301 li
331.992 421.062 li
333.688 375.227 li
335.379 370.652 li
337.07 417.703 li
338.766 427.801 li
340.457 406.859 li
342.152 394.883 li
343.844 394.398 li
345.535 423.406 li
347.23 406.879 li
348.922 368.02 li
350.613 389.324 li
352.309 393.973 li
354 366.242 li
355.691 378.535 li
357.387 402.152 li
359.078 391.957 li
360.77 375.641 li
362.465 372.734 li
364.156 377.422 li
365.848 378.047 li
367.543 382.562 li
369.234 389.414 li
370.93 390.23 li
372.621 388.086 li
374.312 385.98 li
376.008 387.555 li
377.699 388.695 li
379.391 386.949 li
381.086 386.988 li
382.777 387.746 li
384.469 387.016 li
386.164 387.234 li
387.855 387.387 li
389.547 387.172 li
391.242 387.562 li
392.934 387.621 li
@
392.934 387.621 mo
394.629 387.664 li
396.32 387.629 li
398.012 386.98 li
399.707 386.781 li
401.398 387.195 li
403.09 387.344 li
404.785 419.879 li
406.477 428.672 li
408.168 386.863 li
409.863 378.664 li
411.555 410.043 li
413.246 428.238 li
414.941 403.898 li
416.633 378.398 li
418.328 385.953 li
420.02 423.352 li
421.711 438.805 li
423.406 406.777 li
425.098 380.527 li
426.789 384.664 li
428.484 419.055 li
430.176 430.566 li
431.867 405.207 li
433.562 395.602 li
435.254 393.492 li
436.945 401.309 li
438.641 393.562 li
440.332 373.992 li
442.027 389.699 li
443.719 398.508 li
445.41 382.809 li
447.105 385.293 li
448.797 399.156 li
450.488 397.121 li
452.184 389.555 li
453.875 391.508 li
455.566 395.895 li
457.262 395.484 li
458.953 395.094 li
460.645 395.191 li
462.34 395.047 li
464.031 394.582 li
465.727 394.102 li
467.418 394.414 li
469.109 394.152 li
470.805 392.633 li
472.496 390.234 li
474.188 390.367 li
475.883 387.281 li
@
475.883 387.281 mo
477.574 375.379 li
479.266 372.383 li
480.961 380.211 li
482.652 379.93 li
484.344 378.898 li
486.039 384.738 li
487.73 392.832 li
489.426 397.457 li
491.117 398.891 li
492.809 413.84 li
494.504 417.074 li
496.195 401.266 li
497.887 396.621 li
499.582 395.488 li
501.273 394.578 li
502.965 396.059 li
504.66 394.848 li
506.352 386.773 li
508.043 395.895 li
509.738 419.766 li
511.43 423.969 li
513.125 393.238 li
514.816 379.234 li
516.508 407.812 li
518.203 431.055 li
519.895 415.211 li
521.586 383.312 li
523.281 384.91 li
524.973 409.301 li
526.664 425.094 li
528.359 409.316 li
530.051 384.77 li
531.742 385.082 li
533.438 412.785 li
535.129 419.297 li
536.824 400.699 li
538.516 399.418 li
540.207 393.215 li
541.902 370.145 li
543.594 365.953 li
545.285 379.957 li
546.98 383.434 li
548.672 374.27 li
550.363 371.926 li
552.059 377.648 li
553.75 375.902 li
555.441 371.723 li
557.137 368.941 li
558.828 369.68 li
@
558.828 369.68 mo
560.523 373.406 li
562.215 375.199 li
563.906 374.105 li
565.602 372.391 li
567.293 371.328 li
568.984 376.02 li
570.68 396.84 li
572.371 422.246 li
574.062 424.453 li
575.758 395.922 li
577.449 379.121 li
579.141 400.996 li
580.836 419.707 li
582.527 414.305 li
584.223 389.273 li
585.914 380.441 li
587.605 402.926 li
589.301 423.395 li
590.992 407.965 li
592.684 377.266 li
594.379 381.383 li
596.07 406.465 li
597.762 423.254 li
599.457 405.812 li
601.148 384.098 li
602.84 390.539 li
604.535 406.383 li
606.227 406.773 li
607.922 399.125 li
609.613 403.973 li
611.305 400.039 li
613 391.348 li
614.691 396.918 li
616.383 386.148 li
618.078 378.641 li
619.77 386.969 li
621.461 388.047 li
623.156 393.461 li
624.848 397.969 li
626.539 398.66 li
628.234 398.82 li
629.926 399.223 li
631.621 399.34 li
633.312 399.488 li
635.004 399.406 li
636.699 399.492 li
638.391 399.504 li
640.082 399.484 li
641.777 399.492 li
@
641.777 399.492 mo
643.469 404.844 li
645.16 412.18 li
646.855 415.57 li
648.547 398.438 li
650.238 383.902 li
651.934 402.039 li
653.625 424.32 li
655.32 414.598 li
657.012 385.371 li
658.703 383.832 li
660.398 407.25 li
662.09 421.82 li
663.781 407.23 li
665.477 387.488 li
667.168 390.934 li
668.859 406.988 li
670.555 406.895 li
672.246 395.895 li
673.938 390.156 li
675.633 395.098 li
677.324 396.98 li
679.02 387.543 li
680.711 383.293 li
682.402 389.109 li
684.098 385.477 li
685.789 378.977 li
687.48 384.566 li
689.176 389.703 li
690.867 390.336 li
692.559 385.617 li
694.254 380.383 li
695.945 383.535 li
697.637 390.184 li
699.332 389.859 li
701.023 388.812 li
702.719 387.453 li
704.41 387.348 li
706.102 388.465 li
707.797 388.695 li
709.488 388.227 li
711.18 387.648 li
712.875 386.906 li
714.566 386.371 li
716.258 386.805 li
717.953 387.445 li
719.645 387.395 li
721.336 387.016 li
723.031 386.504 li
724.723 395.586 li
@
724.723 395.586 mo
726.414 415.773 li
728.109 415.211 li
729.801 393.648 li
731.496 388.527 li
733.188 399.578 li
734.879 412.926 li
736.574 401.824 li
738.266 381.977 li
739.957 388.867 li
741.652 413.727 li
743.344 417.809 li
745.035 397.203 li
746.73 386.316 li
748.422 392.797 li
750.113 411.133 li
751.809 417.691 li
753.5 394.926 li
755.195 382.242 li
756.887 401.328 li
758.578 416.238 li
760.273 411.141 li
761.965 390.352 li
763.656 387.074 li
765.352 405.809 li
767.043 408.469 li
768.734 404.105 li
770.43 401.926 li
772.121 399.582 li
773.812 394.203 li
775.508 388.426 li
777.199 380.766 li
778.895 373.246 li
780.586 380.918 li
782.277 388.727 li
783.973 391.77 li
785.664 390.598 li
787.355 388.656 li
789.051 387.902 li
790.742 387.68 li
792.434 388.277 li
794.129 388.449 li
795.82 388.32 li
797.512 387.695 li
799.207 387.445 li
800.898 387.742 li
802.594 388.207 li
804.285 388.129 li
805.977 387.316 li
807.672 387.043 li
@
807.672 387.043 mo
809.363 387.367 li
811.055 387.727 li
812.75 388.047 li
814.441 387.723 li
816.133 387.188 li
817.828 386.824 li
819.52 387.047 li
821.211 387.656 li
822.906 387.863 li
824.598 387.754 li
826.293 384.402 li
827.984 385.098 li
829.676 394.609 li
831.371 411.219 li
833.062 413.75 li
834.754 397.09 li
836.449 390.02 li
838.141 405.398 li
839.832 422.164 li
841.527 412.375 li
843.219 391.977 li
844.91 388.453 li
846.605 402.34 li
848.297 412.875 li
849.992 403.375 li
851.684 390.434 li
853.375 389.688 li
855.07 406.012 li
856.762 421.266 li
858.453 410.105 li
860.148 391.074 li
861.84 387.785 li
863.531 402.121 li
865.227 414.398 li
866.918 404.215 li
868.609 387.082 li
870.305 388.238 li
871.996 411.418 li
873.691 418.129 li
875.383 401.184 li
877.074 386.055 li
878.77 389.098 li
880.461 413.082 li
882.152 414.328 li
883.848 396.457 li
885.539 389.422 li
887.23 395.379 li
888.926 411.973 li
890.617 417.242 li
@
890.617 417.242 mo
892.309 404.289 li
894.004 390.23 li
895.695 399.809 li
897.391 414.344 li
899.082 410.117 li
900.773 399.871 li
902.469 397.488 li
904.16 408.602 li
905.852 406.547 li
907.547 397.516 li
909.238 392.809 li
910.93 389.219 li
912.625 378.512 li
914.316 377.113 li
916.008 388.406 li
917.703 382.828 li
919.395 381.59 li
921.09 386 li
922.781 385.254 li
924.473 387.488 li
926.168 388.086 li
927.859 386.539 li
929.551 385.434 li
931.246 386.039 li
932.938 387.797 li
934.629 387.922 li
936.324 386.973 li
938.016 386.902 li
939.707 387.449 li
941.402 387.473 li
943.094 386.957 li
944.789 386.77 li
946.48 386.883 li
948.172 387.09 li
949.867 387.375 li
951.559 386.922 li
953.25 386.355 li
954.945 386.539 li
956.637 386.965 li
958.328 387.066 li
960.023 386.57 li
961.715 386.363 li
963.406 386.141 li
965.102 386.168 li
966.793 386.742 li
968.488 393.777 li
@
144.094 157.719 mo
145.785 109.355 li
147.477 99.816 li
149.172 121.297 li
150.863 93.469 li
152.559 118.844 li
154.25 142.363 li
155.941 100.125 li
157.637 116.641 li
159.328 120.941 li
161.02 134.43 li
162.715 174.402 li
164.406 144.363 li
166.098 126.922 li
167.793 126.008 li
169.484 116.754 li
171.176 115.016 li
172.871 106.887 li
174.562 119.465 li
176.258 160.805 li
177.949 165.547 li
179.641 133.633 li
181.336 180.172 li
183.027 258.793 li
184.719 312.891 li
186.414 324.453 li
188.105 399.387 li
189.797 436.426 li
191.492 363.812 li
193.184 349.453 li
194.875 345.32 li
196.57 350.379 li
198.262 356.652 li
199.957 351.637 li
201.648 354.133 li
203.34 361.727 li
205.035 363.828 li
206.727 359.848 li
208.418 360.172 li
210.113 359.801 li
211.805 358.379 li
213.496 359.27 li
215.191 359.645 li
216.883 359.164 li
218.574 359.855 li
220.27 310.09 li
221.961 228.035 li
223.656 198.824 li
225.348 200.066 li
227.039 180.191 li
.0951247 .812772 1 .0193484 cmyk
@
227.039 180.191 mo
228.734 176.902 li
230.426 186.66 li
232.117 192.414 li
233.812 202.414 li
235.504 180.789 li
237.195 180.504 li
238.891 194.262 li
240.582 202.547 li
242.273 223.727 li
243.969 214.375 li
245.66 193.84 li
247.355 197.23 li
249.047 198.246 li
250.738 212.625 li
252.434 202.5 li
254.125 195.918 li
255.816 239.195 li
257.512 264.086 li
259.203 240.875 li
260.895 276.293 li
262.59 324.594 li
264.281 311.574 li
265.973 333.742 li
267.668 351.27 li
269.359 367.434 li
271.055 372.957 li
272.746 353.621 li
274.438 372.461 li
276.133 392.523 li
277.824 383.293 li
279.516 376.387 li
281.211 374.789 li
282.902 380.441 li
284.594 384.652 li
286.289 384.312 li
287.98 381.441 li
289.672 379.355 li
291.367 380.668 li
293.059 381.418 li
294.754 380.828 li
296.445 381.258 li
298.137 383.137 li
299.832 385.527 li
301.523 316.219 li
303.215 233.547 li
304.91 236.969 li
306.602 238.215 li
308.293 236.547 li
309.988 243.828 li
@
309.988 243.828 mo
311.68 232.047 li
313.371 237.898 li
315.066 230.762 li
316.758 233.16 li
318.453 249.906 li
320.145 235.152 li
321.836 246.109 li
323.531 244.102 li
325.223 243.332 li
326.914 256.562 li
328.609 240.371 li
330.301 232.793 li
331.992 244.691 li
333.688 254.969 li
335.379 253.805 li
337.07 252.297 li
338.766 250.578 li
340.457 251.836 li
342.152 244.238 li
343.844 245.891 li
345.535 267.371 li
347.23 283.844 li
348.922 338.883 li
350.613 348.656 li
352.309 337.273 li
354 368.289 li
355.691 366.508 li
357.387 357.52 li
359.078 349.965 li
360.77 366.09 li
362.465 390.715 li
364.156 397.105 li
365.848 393.723 li
367.543 383.289 li
369.234 377.324 li
370.93 382.449 li
372.621 390.227 li
374.312 394.914 li
376.008 391.879 li
377.699 389.289 li
379.391 392.617 li
381.086 393.543 li
382.777 392.703 li
384.469 392.426 li
386.164 392.668 li
387.855 392.926 li
389.547 393.449 li
391.242 393.422 li
392.934 393.281 li
@
392.934 393.281 mo
394.629 393.391 li
396.32 393.121 li
398.012 392.848 li
399.707 393.188 li
401.398 393.051 li
403.09 393.32 li
404.785 328.453 li
406.477 283.797 li
408.168 288.703 li
409.863 281.98 li
411.555 296.785 li
413.246 282.793 li
414.941 275.348 li
416.633 274.023 li
418.328 268.113 li
420.02 282.457 li
421.711 281.684 li
423.406 277.262 li
425.098 268.812 li
426.789 276.406 li
428.484 280.547 li
430.176 284.426 li
431.867 303.41 li
433.562 296.242 li
435.254 305.402 li
436.945 314.953 li
438.641 331.219 li
440.332 358.336 li
442.027 358.5 li
443.719 359.629 li
445.41 376.27 li
447.105 384.242 li
448.797 375.078 li
450.488 377.074 li
452.184 388.484 li
453.875 391.852 li
455.566 393.418 li
457.262 395.527 li
458.953 395.047 li
460.645 395.105 li
462.34 394.719 li
464.031 394.641 li
465.727 395.137 li
467.418 395.965 li
469.109 396.387 li
470.805 394.996 li
472.496 389.805 li
474.188 385.148 li
475.883 387.586 li
@
475.883 387.586 mo
477.574 384.375 li
479.266 372.191 li
480.961 354.887 li
482.652 332.305 li
484.344 314.504 li
486.039 303.527 li
487.73 296.16 li
489.426 290.758 li
491.117 285.844 li
492.809 285.617 li
494.504 288.551 li
496.195 290.75 li
497.887 292.82 li
499.582 292.883 li
501.273 293.016 li
502.965 292.844 li
504.66 292.578 li
506.352 292.184 li
508.043 296.953 li
509.738 310.895 li
511.43 301.781 li
513.125 299.902 li
514.816 308.977 li
516.508 301.57 li
518.203 292.484 li
519.895 287.996 li
521.586 299.207 li
523.281 303.824 li
524.973 300.461 li
526.664 300.984 li
528.359 294.477 li
530.051 293.566 li
531.742 299.445 li
533.438 307.285 li
535.129 319.133 li
536.824 329.949 li
538.516 336.184 li
540.207 358.52 li
541.902 382.082 li
543.594 374.285 li
545.285 373.145 li
546.98 375.426 li
548.672 376.531 li
550.363 381.398 li
552.059 381.094 li
553.75 388.977 li
555.441 397.496 li
557.137 396.285 li
558.828 391.383 li
@
558.828 391.383 mo
560.523 387.152 li
562.215 385.613 li
563.906 388.363 li
565.602 392.02 li
567.293 392.996 li
568.984 376.344 li
570.68 331.152 li
572.371 304.52 li
574.062 301.965 li
575.758 297.43 li
577.449 306.324 li
579.141 305.02 li
580.836 309.602 li
582.527 299.02 li
584.223 298.16 li
585.914 320.207 li
587.605 307.809 li
589.301 300.766 li
590.992 295.176 li
592.684 308.004 li
594.379 319.949 li
596.07 304.809 li
597.762 302.27 li
599.457 304.27 li
601.148 309.375 li
602.84 311.457 li
604.535 305.297 li
606.227 309.805 li
607.922 334.961 li
609.613 345.332 li
611.305 363.602 li
613 370.559 li
614.691 366.82 li
616.383 385.68 li
618.078 386.137 li
619.77 412.16 li
621.461 420.059 li
623.156 397.621 li
624.848 396.09 li
626.539 396.371 li
628.234 396.465 li
629.926 396.211 li
631.621 396.285 li
633.312 396.406 li
635.004 396.305 li
636.699 396.059 li
638.391 396.164 li
640.082 396.199 li
641.777 395.988 li
@
641.777 395.988 mo
643.469 392.695 li
645.16 354.906 li
646.855 321.348 li
648.547 317.07 li
650.238 314.918 li
651.934 316.473 li
653.625 319.789 li
655.32 302.766 li
657.012 305.555 li
658.703 324.367 li
660.398 318.766 li
662.09 319.801 li
663.781 311.434 li
665.477 309.07 li
667.168 320.297 li
668.859 319.574 li
670.555 314.07 li
672.246 329.316 li
673.938 348.449 li
675.633 359.215 li
677.324 366.418 li
679.02 363.273 li
680.711 373.301 li
682.402 378.023 li
684.098 376.184 li
685.789 387.648 li
687.48 388.762 li
689.176 386.48 li
690.867 387.812 li
692.559 396.086 li
694.254 403.703 li
695.945 397.555 li
697.637 390.547 li
699.332 389.547 li
701.023 392.785 li
702.719 395.555 li
704.41 394.992 li
706.102 393.344 li
707.797 393.121 li
709.488 394.309 li
711.18 395.305 li
712.875 396.441 li
714.566 397.633 li
716.258 396.781 li
717.953 394.867 li
719.645 394.781 li
721.336 395.961 li
723.031 396.992 li
724.723 383.051 li
@
724.723 383.051 mo
726.414 342.414 li
728.109 316.344 li
729.801 322.07 li
731.496 327.773 li
733.188 332.66 li
734.879 330.629 li
736.574 329.215 li
738.266 328.098 li
739.957 323.078 li
741.652 317.777 li
743.344 317.105 li
745.035 331.848 li
746.73 331.398 li
748.422 321.684 li
750.113 325.305 li
751.809 328.477 li
753.5 327.945 li
755.195 326.078 li
756.887 324.289 li
758.578 327.969 li
760.273 315.641 li
761.965 312.691 li
763.656 327.516 li
765.352 338.473 li
767.043 336.281 li
768.734 339.145 li
770.43 351.73 li
772.121 358.672 li
773.812 373.984 li
775.508 382.887 li
777.199 381.805 li
778.895 393.953 li
780.586 399.594 li
782.277 387.609 li
783.973 385 li
785.664 386.312 li
787.355 387.609 li
789.051 389.438 li
790.742 390.527 li
792.434 389.809 li
794.129 389.426 li
795.82 390.176 li
797.512 391.379 li
799.207 391.812 li
800.898 391.648 li
802.594 390.859 li
804.285 390.859 li
805.977 392.184 li
807.672 392.594 li
@
807.672 392.594 mo
809.363 392.23 li
811.055 391.773 li
812.75 391.527 li
814.441 391.723 li
816.133 392.867 li
817.828 393.852 li
819.52 393.312 li
821.211 392.41 li
822.906 391.992 li
824.598 392.266 li
826.293 377.332 li
827.984 347.969 li
829.676 337.145 li
831.371 337.988 li
833.062 333.762 li
834.754 335.188 li
836.449 334.992 li
838.141 338.102 li
839.832 336.367 li
841.527 325.301 li
843.219 330.668 li
844.91 344.223 li
846.605 339.973 li
848.297 333.57 li
849.992 332.883 li
851.684 332.316 li
853.375 342.305 li
855.07 338.789 li
856.762 329.25 li
858.453 333.242 li
860.148 337.398 li
861.84 341.895 li
863.531 334.445 li
865.227 328.074 li
866.918 334.363 li
868.609 336.754 li
870.305 332.469 li
871.996 333.254 li
873.691 337.445 li
875.383 335.805 li
877.074 339.09 li
878.77 337.391 li
880.461 334.828 li
882.152 331.898 li
883.848 331.566 li
885.539 335.75 li
887.23 338.328 li
888.926 344.656 li
890.617 345.207 li
@
890.617 345.207 mo
892.309 341.852 li
894.004 338.152 li
895.695 338.277 li
897.391 338.562 li
899.082 335.969 li
900.773 338.375 li
902.469 337.961 li
904.16 345.773 li
905.852 345.582 li
907.547 356.512 li
909.238 376.91 li
910.93 377.918 li
912.625 383.367 li
914.316 392.875 li
916.008 389.703 li
917.703 381.902 li
919.395 391.133 li
921.09 398.664 li
922.781 395.355 li
924.473 390.777 li
926.168 391.113 li
927.859 393.844 li
929.551 395.348 li
931.246 394.602 li
932.938 392.734 li
934.629 392.758 li
936.324 394.02 li
938.016 394.094 li
939.707 393.434 li
941.402 393.609 li
943.094 394.141 li
944.789 394.359 li
946.48 394.344 li
948.172 394.023 li
949.867 393.832 li
951.559 394.16 li
953.25 394.746 li
954.945 394.84 li
956.637 394.684 li
958.328 394.91 li
960.023 395.27 li
961.715 395.676 li
963.406 395.836 li
965.102 395.645 li
966.793 395.289 li
968.488 397.836 li
@
144.094 351.574 mo
145.785 441.363 li
147.477 444.469 li
149.172 403.426 li
150.863 407.871 li
152.559 443.547 li
154.25 467.52 li
155.941 462.668 li
157.637 464.605 li
159.328 448.715 li
161.02 427.508 li
162.715 456.629 li
164.406 445.402 li
166.098 437.145 li
167.793 442.09 li
169.484 421.59 li
171.176 452.77 li
172.871 481.461 li
174.562 453.094 li
176.258 405.309 li
177.949 365.949 li
179.641 338.211 li
181.336 294.887 li
183.027 216.77 li
184.719 185.785 li
186.414 133.531 li
188.105 87.199 li
189.797 160.449 li
191.492 207.297 li
193.184 189.133 li
194.875 153.148 li
196.57 141.34 li
198.262 164.688 li
199.957 176.785 li
201.648 174.246 li
203.34 166.805 li
205.035 166.875 li
206.727 174.859 li
208.418 176.703 li
210.113 176.879 li
211.805 179.742 li
213.496 180.531 li
215.191 181.688 li
216.883 183.254 li
218.574 183.719 li
220.27 253.152 li
221.961 362.16 li
223.656 415.645 li
225.348 435.586 li
227.039 420.344 li
.0729076 .314366 1 0 cmyk
@
227.039 420.344 mo
228.734 398.465 li
230.426 401.406 li
232.117 408.109 li
233.812 425.031 li
235.504 429.609 li
237.195 414.789 li
238.891 403.113 li
240.582 412.504 li
242.273 434.156 li
243.969 430.383 li
245.66 412.844 li
247.355 414.867 li
249.047 427.445 li
250.738 455.57 li
252.434 464.414 li
254.125 445.344 li
255.816 421.293 li
257.512 380.801 li
259.203 330.352 li
260.895 279.832 li
262.59 256.277 li
264.281 243.672 li
265.973 224.34 li
267.668 202.75 li
269.359 203.895 li
271.055 228.145 li
272.746 231.227 li
274.438 220.949 li
276.133 215.051 li
277.824 218.574 li
279.516 226.93 li
281.211 227.668 li
282.902 226.188 li
284.594 224.605 li
286.289 224.754 li
287.98 227.316 li
289.672 230.156 li
291.367 230.531 li
293.059 230.602 li
294.754 232.293 li
296.445 233.73 li
298.137 233.734 li
299.832 232.73 li
301.523 328.598 li
303.215 409.684 li
304.91 417.422 li
306.602 425.07 li
308.293 419.637 li
309.988 413.93 li
@
309.988 413.93 mo
311.68 413.758 li
313.371 434.102 li
315.066 426.871 li
316.758 422.668 li
318.453 417.602 li
320.145 410.113 li
321.836 427.57 li
323.531 422.875 li
325.223 419.359 li
326.914 418.34 li
328.609 421.609 li
330.301 426.164 li
331.992 421.512 li
333.688 426.527 li
335.379 414.801 li
337.07 431.812 li
338.766 456.219 li
340.457 440.293 li
342.152 406.082 li
343.844 379.188 li
345.535 365.824 li
347.23 346.121 li
348.922 307.328 li
350.613 265.199 li
352.309 256.641 li
354 251.762 li
355.691 244.75 li
357.387 266.84 li
359.078 273.586 li
360.77 255.055 li
362.465 245.867 li
364.156 247.484 li
365.848 257.586 li
367.543 266.48 li
369.234 265.719 li
370.93 261.934 li
372.621 259.516 li
374.312 260.035 li
376.008 263.488 li
377.699 264.215 li
379.391 262.965 li
381.086 264.312 li
382.777 264.762 li
384.469 265.102 li
386.164 266.176 li
387.855 266.637 li
389.547 267.246 li
391.242 267.898 li
392.934 268.234 li
@
392.934 268.234 mo
394.629 268.809 li
396.32 269.156 li
398.012 269.883 li
399.707 270.574 li
401.398 270.695 li
403.09 271 li
404.785 341.082 li
406.477 419.496 li
408.168 417.957 li
409.863 404.707 li
411.555 412.711 li
413.246 412.117 li
414.941 400.238 li
416.633 398.918 li
418.328 403.203 li
420.02 423.305 li
421.711 423.172 li
423.406 418.934 li
425.098 414.668 li
426.789 424.168 li
428.484 447.168 li
430.176 423.309 li
431.867 387.328 li
433.562 370.949 li
435.254 355.332 li
436.945 339.816 li
438.641 307.07 li
440.332 272.949 li
442.027 291 li
443.719 299.762 li
445.41 272.219 li
447.105 268.668 li
448.797 285.055 li
450.488 280.809 li
452.184 273.965 li
453.875 282.176 li
455.566 285.625 li
457.262 284.324 li
458.953 285.055 li
460.645 285.691 li
462.34 285.434 li
464.031 285.723 li
465.727 286.07 li
467.418 285.199 li
469.109 284.734 li
470.805 285.695 li
472.496 288.633 li
474.188 284.488 li
475.883 274.48 li
@
475.883 274.48 mo
477.574 272.445 li
479.266 288.738 li
480.961 317.281 li
482.652 343.523 li
484.344 362.688 li
486.039 376.531 li
487.73 388.195 li
489.426 394.738 li
491.117 397.84 li
492.809 407.691 li
494.504 419.824 li
496.195 414.988 li
497.887 400.676 li
499.582 400.023 li
501.273 409.812 li
502.965 409.977 li
504.66 402.863 li
506.352 401.445 li
508.043 402.895 li
509.738 412.977 li
511.43 421.633 li
513.125 420.062 li
514.816 409.734 li
516.508 413.547 li
518.203 418.832 li
519.895 407.809 li
521.586 409.508 li
523.281 406.488 li
524.973 414.648 li
526.664 428.117 li
528.359 428.695 li
530.051 430.012 li
531.742 413.055 li
533.438 392.422 li
535.129 374.594 li
536.824 355.145 li
538.516 339.121 li
540.207 318.906 li
541.902 303.543 li
543.594 284.488 li
545.285 296.199 li
546.98 314.555 li
548.672 309.605 li
550.363 309.59 li
552.059 308.992 li
553.75 306.426 li
555.441 302.562 li
557.137 305.676 li
558.828 309.293 li
@
558.828 309.293 mo
560.523 311.41 li
562.215 312.113 li
563.906 310.488 li
565.602 308.238 li
567.293 308.309 li
568.984 329.012 li
570.68 376.43 li
572.371 404.312 li
574.062 402.738 li
575.758 402.855 li
577.449 402.945 li
579.141 401.703 li
580.836 411.668 li
582.527 408.09 li
584.223 408.457 li
585.914 415.309 li
587.605 408.906 li
589.301 411.098 li
590.992 404.832 li
592.684 408.48 li
594.379 409.91 li
596.07 404.68 li
597.762 407.93 li
599.457 406.586 li
601.148 415.43 li
602.84 418.105 li
604.535 406.059 li
606.227 395.504 li
607.922 379.738 li
609.613 346.246 li
611.305 320.262 li
613 306.789 li
614.691 298.145 li
616.383 307.086 li
618.078 318.133 li
619.77 310.664 li
621.461 306.703 li
623.156 313.047 li
624.848 313.633 li
626.539 313.383 li
628.234 313.539 li
629.926 314.117 li
631.621 314.195 li
633.312 314.305 li
635.004 314.516 li
636.699 314.777 li
638.391 315.07 li
640.082 315.316 li
641.777 315.457 li
@
641.777 315.457 mo
643.469 325.309 li
645.16 373.59 li
646.855 408.516 li
648.547 403.355 li
650.238 402.32 li
651.934 406.898 li
653.625 413.73 li
655.32 408.25 li
657.012 408.234 li
658.703 410.633 li
660.398 412.148 li
662.09 419.984 li
663.781 417.391 li
665.477 413.48 li
667.168 404.52 li
668.859 395.277 li
670.555 385.82 li
672.246 371.926 li
673.938 363.344 li
675.633 354.598 li
677.324 338.223 li
679.02 319.887 li
680.711 317.172 li
682.402 324.34 li
684.098 318.965 li
685.789 315.562 li
687.48 324.152 li
689.176 330.145 li
690.867 329.719 li
692.559 318.457 li
694.254 316.508 li
695.945 323.949 li
697.637 325.383 li
699.332 326.23 li
701.023 324.105 li
702.719 322.348 li
704.41 323.031 li
706.102 324.465 li
707.797 325.148 li
709.488 325.305 li
711.18 325.156 li
712.875 324.332 li
714.566 323.684 li
716.258 324.43 li
717.953 326.102 li
719.645 326.488 li
721.336 325.918 li
723.031 325.684 li
724.723 352.395 li
@
724.723 352.395 mo
726.414 391.113 li
728.109 400.551 li
729.801 396.539 li
731.496 397.555 li
733.188 413.902 li
734.879 419.387 li
736.574 407.262 li
738.266 404.34 li
739.957 406.957 li
741.652 406.938 li
743.344 400.246 li
745.035 399.605 li
746.73 401.746 li
748.422 407.34 li
750.113 416.809 li
751.809 415.633 li
753.5 413.891 li
755.195 409.605 li
756.887 407.754 li
758.578 412.383 li
760.273 414.996 li
761.965 419.254 li
763.656 408.914 li
765.352 393.047 li
767.043 387.129 li
768.734 376.719 li
770.43 365.281 li
772.121 358.402 li
773.812 345.375 li
775.508 335.531 li
777.199 328.371 li
778.895 327.688 li
780.586 331.609 li
782.277 329.195 li
783.973 331.918 li
785.664 333.824 li
787.355 333.129 li
789.051 332.465 li
790.742 332.32 li
792.434 332.84 li
794.129 333.52 li
795.82 333.23 li
797.512 332.719 li
799.207 332.984 li
800.898 333.676 li
802.594 334.238 li
804.285 334.035 li
805.977 333.527 li
807.672 333.391 li
@
807.672 333.391 mo
809.363 333.746 li
811.055 334.32 li
812.75 334.797 li
814.441 334.984 li
816.133 334.695 li
817.828 334.148 li
819.52 334.375 li
821.211 335.195 li
822.906 335.453 li
824.598 335.348 li
826.293 355.379 li
827.984 385.457 li
829.676 403.664 li
831.371 410.293 li
833.062 403.445 li
834.754 399.629 li
836.449 401.809 li
838.141 411.758 li
839.832 415.16 li
841.527 405.516 li
843.219 403.773 li
844.91 401.887 li
846.605 406.41 li
848.297 408.785 li
849.992 398.668 li
851.684 397.137 li
853.375 405.527 li
855.07 417.914 li
856.762 417.973 li
858.453 409.77 li
860.148 405.266 li
861.84 400.934 li
863.531 404.422 li
865.227 407.77 li
866.918 401.984 li
868.609 402.062 li
870.305 401.395 li
871.996 407.516 li
873.691 413.996 li
875.383 408.379 li
877.074 409.508 li
878.77 406.648 li
880.461 405.648 li
882.152 406.109 li
883.848 402.867 li
885.539 404.699 li
887.23 410.703 li
888.926 414.391 li
890.617 408.266 li
@
890.617 408.266 mo
892.309 403.762 li
894.004 402.52 li
895.695 403.219 li
897.391 414.062 li
899.082 420.504 li
900.773 409.297 li
902.469 392.73 li
904.16 384.215 li
905.852 378.992 li
907.547 367.629 li
909.238 354.414 li
910.93 349.055 li
912.625 331.98 li
914.316 327.391 li
916.008 342.551 li
917.703 347.719 li
919.395 344.113 li
921.09 339.695 li
922.781 341.117 li
924.473 342.43 li
926.168 343.734 li
927.859 342.301 li
929.551 341.57 li
931.246 342.461 li
932.938 343.422 li
934.629 343.309 li
936.324 342.719 li
938.016 342.898 li
939.707 343.434 li
941.402 343.551 li
943.094 343.586 li
944.789 343.496 li
946.48 343.613 li
948.172 343.922 li
949.867 343.805 li
951.559 343.723 li
953.25 343.793 li
954.945 344.102 li
956.637 344.531 li
958.328 344.633 li
960.023 344.625 li
961.715 344.512 li
963.406 344.445 li
965.102 344.73 li
966.793 345.238 li
968.488 373.039 li
@
144.094 397.328 mo
145.785 392.371 li
147.477 389.703 li
149.172 393.469 li
150.863 393.215 li
152.559 392.598 li
154.25 394.68 li
155.941 393.523 li
157.637 390.297 li
159.328 393.344 li
161.02 396.766 li
162.715 395.328 li
164.406 393.809 li
166.098 393.039 li
167.793 396.191 li
169.484 397.652 li
171.176 397.035 li
172.871 402.922 li
174.562 427.422 li
176.258 423.766 li
177.949 420.805 li
179.641 449.992 li
181.336 462.09 li
183.027 452.785 li
184.719 449.859 li
186.414 455.383 li
188.105 426.656 li
189.797 383.371 li
191.492 375.348 li
193.184 388.414 li
194.875 391.793 li
196.57 394.816 li
198.262 398.809 li
199.957 399.148 li
201.648 398.027 li
203.34 397.762 li
205.035 399.25 li
206.727 400.195 li
208.418 400.164 li
210.113 400.238 li
211.805 400.32 li
213.496 400.184 li
215.191 400.258 li
216.883 400.109 li
218.574 400.203 li
220.27 398.66 li
221.961 396.371 li
223.656 396.801 li
225.348 398.012 li
227.039 396.488 li
.613703 .976837 .0447395 .00808728 cmyk
@
227.039 396.488 mo
228.734 394.047 li
230.426 395.066 li
232.117 397.219 li
233.812 397.867 li
235.504 396.164 li
237.195 392.781 li
238.891 395.035 li
240.582 397.578 li
242.273 397.719 li
243.969 397.344 li
245.66 397.023 li
247.355 395.629 li
249.047 394.094 li
250.738 397.055 li
252.434 402.504 li
254.125 421.617 li
255.816 431.59 li
257.512 432.512 li
259.203 441.93 li
260.895 431.148 li
262.59 416.25 li
264.281 425.324 li
265.973 414.125 li
267.668 399.848 li
269.359 402.828 li
271.055 395.465 li
272.746 394.207 li
274.438 392.578 li
276.133 393.742 li
277.824 398.789 li
279.516 399.254 li
281.211 398.637 li
282.902 397.512 li
284.594 398.402 li
286.289 399.711 li
287.98 400.004 li
289.672 400.062 li
291.367 400.043 li
293.059 400.098 li
294.754 400.047 li
296.445 399.383 li
298.137 398.703 li
299.832 398.633 li
301.523 398.32 li
303.215 395.84 li
304.91 395.457 li
306.602 396.945 li
308.293 397.426 li
309.988 397.438 li
@
309.988 397.438 mo
311.68 397.812 li
313.371 397.148 li
315.066 396.652 li
316.758 398.168 li
318.453 398.625 li
320.145 397.168 li
321.836 395.84 li
323.531 395.805 li
325.223 396.418 li
326.914 397.062 li
328.609 397.508 li
330.301 397.66 li
331.992 395.375 li
333.688 395.562 li
335.379 397.941 li
337.07 397.777 li
338.766 396.66 li
340.457 411.285 li
342.152 424.945 li
343.844 415.945 li
345.535 419.852 li
347.23 433.086 li
348.922 429.445 li
350.613 422.516 li
352.309 411.023 li
354 400.602 li
355.691 399.102 li
357.387 395.059 li
359.078 392.902 li
360.77 399.578 li
362.465 401.828 li
364.156 398.301 li
365.848 397.434 li
367.543 396.898 li
369.234 397.91 li
370.93 397.199 li
372.621 396.773 li
374.312 398.777 li
376.008 400.086 li
377.699 399.816 li
379.391 399.824 li
381.086 400.215 li
382.777 400.23 li
384.469 400.223 li
386.164 400.23 li
387.855 400.238 li
389.547 400.227 li
391.242 400.242 li
392.934 400.242 li
@
392.934 400.242 mo
394.629 400.238 li
398.012 400.238 li
399.707 400.254 li
401.398 400.258 li
403.09 400.258 li
404.785 398.945 li
406.477 396.219 li
408.168 397.027 li
409.863 398.523 li
411.555 397.109 li
413.246 398.121 li
414.941 398.367 li
416.633 395.273 li
418.328 394.23 li
420.02 396.344 li
421.711 397.406 li
423.406 395.586 li
425.098 396.762 li
426.789 397.133 li
428.484 407.23 li
430.176 419.344 li
431.867 418.797 li
433.562 419.391 li
435.254 420.082 li
436.945 423.684 li
438.641 422.363 li
440.332 404.891 li
442.027 394.004 li
443.719 405.82 li
445.41 414.371 li
447.105 405.277 li
448.797 396.027 li
450.488 400.234 li
452.184 402.543 li
453.875 399.367 li
455.566 400.316 li
457.262 400.352 li
458.953 400.281 li
460.645 400.312 li
462.34 400.305 li
464.031 400.344 li
465.727 400.484 li
467.418 400.398 li
469.109 399.461 li
470.805 397.906 li
472.496 397.297 li
474.188 397.727 li
475.883 393.863 li
@
475.883 393.863 mo
477.574 387.5 li
479.266 383.539 li
480.961 379.484 li
482.652 378.305 li
484.344 381.727 li
486.039 385.02 li
487.73 387.512 li
489.426 390.527 li
491.117 392.461 li
492.809 393.949 li
494.504 396.66 li
496.195 398.648 li
497.887 399.473 li
499.582 399.953 li
501.273 400.246 li
502.965 400.297 li
504.66 400.195 li
506.352 398.512 li
508.043 398.082 li
509.738 398.324 li
511.43 397.863 li
513.125 398.43 li
514.816 398.484 li
516.508 398.523 li
518.203 398.289 li
519.895 397.598 li
521.586 398.254 li
523.281 399.531 li
524.973 399.332 li
526.664 398.391 li
528.359 395.074 li
530.051 402.352 li
531.742 415.102 li
533.438 417.891 li
535.129 418.172 li
536.824 417.215 li
538.516 417.285 li
540.207 417.668 li
541.902 415.859 li
543.594 404.645 li
545.285 396.059 li
546.98 397.664 li
548.672 395.82 li
550.363 395.508 li
552.059 395.727 li
553.75 394.93 li
555.441 397.055 li
557.137 398.371 li
558.828 398.203 li
@
558.828 398.203 mo
560.523 399.078 li
562.215 399.527 li
563.906 398.957 li
565.602 398.953 li
567.293 399.898 li
568.984 399.852 li
570.68 398.922 li
572.371 398.855 li
574.062 398.059 li
575.758 398.156 li
577.449 398.957 li
579.141 398.625 li
580.836 397.797 li
582.527 397.766 li
584.223 398.66 li
585.914 398.93 li
587.605 398.523 li
589.301 398.387 li
590.992 398.402 li
592.684 398.703 li
594.379 399.348 li
596.07 398.961 li
597.762 398.969 li
599.457 398.105 li
601.148 396.812 li
602.84 401.344 li
604.535 411.273 li
606.227 416.434 li
607.922 418.574 li
609.613 422.414 li
611.305 418.355 li
613 411.641 li
614.691 404.664 li
616.383 396.922 li
618.078 394.805 li
619.77 399.668 li
621.461 402.219 li
623.156 399.965 li
624.848 400.332 li
626.539 400.371 li
628.234 400.395 li
629.926 400.402 li
633.312 400.402 li
635.004 400.398 li
636.699 400.395 li
638.391 400.391 li
640.082 400.398 li
641.777 400.398 li
@
641.777 400.398 mo
643.469 399.961 li
645.16 399.125 li
646.855 398.316 li
648.547 398.555 li
650.238 398.551 li
651.934 398.676 li
653.625 398.727 li
655.32 398.25 li
657.012 398.777 li
658.703 399.59 li
660.398 399.547 li
662.09 398.828 li
663.781 398.598 li
665.477 396.078 li
667.168 396.719 li
668.859 406.664 li
670.555 413.75 li
672.246 414.27 li
673.938 413.426 li
675.633 412.34 li
677.324 410.262 li
679.02 409.512 li
680.711 405.051 li
682.402 397.711 li
684.098 398.59 li
685.789 399.734 li
687.48 398.801 li
689.176 398.281 li
690.867 398.602 li
692.559 399.16 li
694.254 398.637 li
695.945 398.461 li
697.637 398.852 li
699.332 399.496 li
701.023 399.281 li
702.719 399.605 li
704.41 400.215 li
706.102 400.371 li
707.797 400.223 li
709.488 399.789 li
711.18 399.52 li
712.875 399.578 li
714.566 400.027 li
716.258 400.219 li
717.953 400.238 li
719.645 400.117 li
721.336 399.812 li
723.031 399.898 li
724.723 399.246 li
@
724.723 399.246 mo
726.414 399.062 li
728.109 398.062 li
729.801 397.387 li
731.496 397.555 li
733.188 398.195 li
734.879 399.078 li
736.574 398.324 li
738.266 398.75 li
739.957 399.215 li
741.652 398.68 li
743.344 398.652 li
745.035 398.449 li
746.73 397.176 li
748.422 397.035 li
750.113 398.074 li
751.809 398.539 li
753.5 398.043 li
755.195 398.805 li
756.887 399.633 li
758.578 398.82 li
760.273 397.844 li
761.965 403.461 li
763.656 410.996 li
765.352 411.688 li
767.043 411.914 li
768.734 411.801 li
770.43 411.355 li
772.121 413.441 li
773.812 410.977 li
775.508 409.48 li
777.199 405.531 li
778.895 397.66 li
780.586 397.926 li
782.277 399.664 li
783.973 399.797 li
785.664 399.559 li
787.355 399.441 li
789.051 399.801 li
790.742 400.211 li
792.434 400.453 li
794.129 400.277 li
795.82 399.922 li
797.512 399.938 li
799.207 400.293 li
800.898 400.516 li
802.594 400.359 li
804.285 400.027 li
805.977 399.945 li
807.672 400.242 li
@
807.672 400.242 mo
809.363 400.512 li
811.055 400.559 li
812.75 400.363 li
814.441 400.09 li
816.133 400.008 li
817.828 400.23 li
819.52 400.422 li
821.211 400.477 li
822.906 400.453 li
824.598 400.281 li
826.293 400 li
827.984 399.566 li
829.676 398.992 li
831.371 399.023 li
833.062 398.676 li
834.754 398.383 li
836.449 397.578 li
838.141 397.891 li
839.832 399.359 li
841.527 398.656 li
843.219 398.516 li
844.91 399.348 li
846.605 398.844 li
848.297 398.805 li
849.992 398.664 li
851.684 397.414 li
853.375 396.219 li
855.07 396.945 li
856.762 398.621 li
858.453 397.453 li
860.148 397.805 li
861.84 399.418 li
863.531 399.164 li
865.227 399.371 li
866.918 399.402 li
868.609 398.395 li
870.305 397.98 li
871.996 398.867 li
873.691 399.234 li
875.383 397.926 li
877.074 398.398 li
878.77 399.848 li
880.461 399.77 li
882.152 399.371 li
883.848 398.906 li
885.539 399.055 li
887.23 399.527 li
888.926 399.535 li
890.617 399.328 li
@
890.617 399.328 mo
892.309 398.625 li
894.004 398.531 li
895.695 399.266 li
897.391 399.734 li
899.082 402.605 li
900.773 408.516 li
902.469 406.016 li
904.16 405.691 li
905.852 413.531 li
907.547 413.625 li
909.238 409.867 li
910.93 410.512 li
912.625 411.508 li
914.316 403.77 li
916.008 396.238 li
917.703 397.586 li
919.395 399.047 li
921.09 398.895 li
922.781 399.465 li
924.473 399.805 li
926.168 399.859 li
927.859 399.582 li
929.551 400.004 li
931.246 400.281 li
932.938 400.336 li
934.629 400.293 li
936.324 400.238 li
938.016 400.473 li
939.707 400.52 li
941.402 400.359 li
943.094 400.266 li
944.789 400.336 li
946.48 400.457 li
948.172 400.426 li
949.867 400.297 li
951.559 400.258 li
953.25 400.34 li
954.945 400.477 li
956.637 400.445 li
958.328 400.281 li
960.023 400.227 li
961.715 400.254 li
963.406 400.367 li
965.102 400.523 li
966.793 400.469 li
968.488 400.492 li
@
144.094 392.828 mo
145.785 390.871 li
147.477 393.215 li
149.172 392.18 li
150.863 392.582 li
152.559 393.336 li
154.25 391.75 li
155.941 388.68 li
157.637 390.289 li
159.328 390.422 li
161.02 391.789 li
162.715 394.883 li
164.406 393.824 li
166.098 402.465 li
167.793 398.703 li
169.484 391.535 li
171.176 394.387 li
172.871 393.328 li
174.562 394.012 li
176.258 393.02 li
177.949 388.289 li
179.641 389.305 li
181.336 393.664 li
183.027 394.238 li
184.719 391.836 li
186.414 401.273 li
188.105 401.09 li
189.797 390.41 li
191.492 390.734 li
193.184 390.516 li
194.875 393.164 li
196.57 396.926 li
198.262 398.629 li
199.957 398.914 li
201.648 398.867 li
203.34 398.695 li
205.035 399.543 li
206.727 400.211 li
208.418 400.508 li
210.113 400.559 li
211.805 400.52 li
213.496 400.441 li
215.191 400.477 li
218.574 400.508 li
220.27 399.438 li
221.961 396.57 li
223.656 396.211 li
225.348 397.383 li
227.039 395.984 li
.598047 .119753 1 .00653086 cmyk
@
227.039 395.984 mo
228.734 392.812 li
230.426 392.699 li
232.117 396.086 li
233.812 397.836 li
235.504 397.055 li
237.195 393.559 li
238.891 393.02 li
240.582 395.637 li
242.273 397.641 li
243.969 398.121 li
245.66 396.367 li
247.355 394.391 li
249.047 394.91 li
250.738 395.652 li
252.434 391.641 li
254.125 393.918 li
255.816 394.441 li
257.512 389.68 li
259.203 393.457 li
260.895 395.621 li
262.59 394.062 li
264.281 396.641 li
265.973 398.262 li
267.668 396.5 li
269.359 396.434 li
271.055 397.754 li
272.746 398.93 li
274.438 398.582 li
276.133 398.082 li
277.824 399.031 li
279.516 399.941 li
281.211 400.23 li
282.902 400.316 li
284.594 400.383 li
286.289 400.375 li
287.98 400.445 li
289.672 400.48 li
291.367 400.543 li
293.059 400.562 li
294.754 400.527 li
296.445 400.41 li
298.137 400.277 li
299.832 400.191 li
301.523 397.109 li
303.215 395.73 li
304.91 397.617 li
306.602 397.285 li
308.293 396.078 li
309.988 394.891 li
@
309.988 394.891 mo
311.68 395.926 li
313.371 397.301 li
315.066 395.516 li
316.758 394.906 li
318.453 395.047 li
320.145 395.668 li
321.836 396.965 li
323.531 396.504 li
325.223 398.52 li
326.914 397.992 li
328.609 395.617 li
330.301 395.832 li
331.992 398.125 li
333.688 398.281 li
335.379 395.684 li
337.07 395.707 li
338.766 396.68 li
340.457 398.16 li
342.152 398.793 li
343.844 396.848 li
345.535 395.434 li
347.23 393.961 li
348.922 395.5 li
350.613 395.641 li
352.309 393.879 li
354 392.133 li
355.691 392.973 li
357.387 396.941 li
359.078 396.125 li
360.77 396.219 li
362.465 397.855 li
364.156 398.859 li
365.848 397.773 li
367.543 396.668 li
369.234 397.578 li
370.93 399.121 li
372.621 399.727 li
374.312 399.898 li
376.008 400.191 li
377.699 400.16 li
379.391 400.348 li
381.086 400.469 li
382.777 400.516 li
384.469 400.543 li
386.164 400.52 li
387.855 400.547 li
389.547 400.598 li
391.242 400.609 li
392.934 400.594 li
@
392.934 400.594 mo
394.629 400.582 li
396.32 400.586 li
398.012 400.562 li
399.707 400.562 li
401.398 400.566 li
403.09 400.559 li
404.785 398.684 li
406.477 396.344 li
408.168 396.59 li
409.863 397.582 li
411.555 397.961 li
413.246 398.375 li
414.941 398.633 li
416.633 398.57 li
418.328 398.008 li
420.02 397.195 li
421.711 396.496 li
423.406 395.914 li
425.098 396.355 li
426.789 398.316 li
428.484 398.441 li
430.176 395.875 li
431.867 396.441 li
433.562 396.07 li
435.254 396.242 li
436.945 398.824 li
438.641 397.109 li
440.332 393.184 li
442.027 390.688 li
443.719 393.176 li
445.41 394.582 li
447.105 395.402 li
448.797 398.438 li
450.488 399.316 li
452.184 399.129 li
453.875 398.59 li
455.566 399.43 li
457.262 400.43 li
458.953 400.512 li
460.645 400.57 li
462.34 400.543 li
464.031 400.5 li
465.727 400.484 li
467.418 400.383 li
469.109 400.176 li
470.805 399.586 li
472.496 398.5 li
474.188 396.254 li
475.883 395.141 li
@
475.883 395.145 mo
477.574 395.441 li
479.266 397.258 li
480.961 397.562 li
482.652 394.016 li
484.344 394.703 li
486.039 398.203 li
487.73 399.32 li
489.426 398.246 li
491.117 398.145 li
492.809 398.676 li
494.504 399.039 li
496.195 399.766 li
497.887 399.953 li
499.582 400.309 li
502.965 400.316 li
504.66 400.23 li
506.352 399.133 li
508.043 398.238 li
509.738 398.641 li
511.43 398.473 li
513.125 397.375 li
514.816 396.621 li
516.508 396.906 li
518.203 397.562 li
519.895 398.559 li
521.586 398.574 li
523.281 397.977 li
524.973 397.836 li
526.664 397.527 li
528.359 397.023 li
530.051 397.246 li
531.742 395.145 li
533.438 394.922 li
535.129 397.469 li
536.824 398.074 li
538.516 398.539 li
540.207 395.648 li
541.902 394.426 li
543.594 394.859 li
545.285 395.719 li
546.98 397.574 li
548.672 397.562 li
550.363 398.5 li
552.059 399.695 li
553.75 399.461 li
555.441 399.152 li
557.137 399.707 li
558.828 399.504 li
@
558.828 399.504 mo
560.523 399.387 li
562.215 400.062 li
563.906 400.105 li
565.602 399.895 li
567.293 400.191 li
568.984 399.668 li
570.68 398.73 li
572.371 398.582 li
574.062 398.414 li
575.758 397.938 li
577.449 397.73 li
579.141 398.43 li
580.836 399.379 li
582.527 399.043 li
584.223 397.988 li
585.914 397.199 li
587.605 397.133 li
589.301 397.816 li
590.992 397.629 li
592.684 397.887 li
594.379 398.266 li
596.07 398.16 li
597.762 398.301 li
599.457 398.531 li
601.148 398.91 li
602.84 396.297 li
604.535 396.332 li
606.227 399.012 li
607.922 398.246 li
609.613 399.285 li
611.305 402.172 li
613 400.852 li
614.691 397.762 li
616.383 398.594 li
618.078 398.422 li
619.77 397.152 li
621.461 397.836 li
623.156 398.793 li
624.848 399.711 li
626.539 400.113 li
628.234 400.41 li
629.926 400.438 li
631.621 400.484 li
633.312 400.543 li
635.004 400.57 li
636.699 400.582 li
638.391 400.586 li
640.082 400.586 li
641.777 400.594 li
@
641.777 400.594 mo
643.469 400.371 li
645.16 399.652 li
646.855 398.941 li
648.547 398.184 li
650.238 397.652 li
651.934 398.281 li
653.625 399.051 li
655.32 398.598 li
657.012 397.875 li
658.703 397.527 li
660.398 397.945 li
662.09 398.465 li
663.781 397.727 li
665.477 398.059 li
667.168 397.762 li
668.859 397.551 li
670.555 397.988 li
672.246 398.539 li
673.938 399.098 li
675.633 397.953 li
677.324 398.734 li
679.02 399.328 li
680.711 398.176 li
682.402 397.598 li
684.098 398.199 li
685.789 398.758 li
687.48 399.395 li
689.176 399.707 li
690.867 399.551 li
692.559 398.695 li
694.254 398.09 li
695.945 398.242 li
697.637 398.543 li
699.332 399.84 li
701.023 400.215 li
702.719 400.219 li
704.41 400.344 li
706.102 400.445 li
707.797 400.543 li
709.488 400.477 li
711.18 400.273 li
712.875 400.172 li
714.566 400.379 li
716.258 400.422 li
717.953 400.453 li
719.645 400.512 li
721.336 400.406 li
723.031 400.406 li
724.723 400.18 li
@
724.723 400.18 mo
726.414 399.398 li
728.109 398.824 li
729.801 398.961 li
731.496 398.93 li
733.188 398.902 li
734.879 398.918 li
736.574 398.086 li
738.266 397.824 li
739.957 398.457 li
741.652 399.285 li
743.344 399.352 li
745.035 398.793 li
746.73 398.84 li
748.422 398.832 li
750.113 398.715 li
751.809 397.887 li
753.5 396.859 li
755.195 396.953 li
756.887 398.387 li
758.578 399.008 li
760.273 398.574 li
761.965 399.066 li
763.656 398.922 li
765.352 399.074 li
767.043 399.523 li
768.734 399.449 li
770.43 398.402 li
772.121 399.414 li
773.812 399.648 li
775.508 396.684 li
777.199 396.332 li
778.895 398.223 li
780.586 399.25 li
782.277 399.594 li
783.973 400.066 li
785.664 400.172 li
787.355 400.41 li
789.051 400.402 li
790.742 400.477 li
792.434 400.602 li
794.129 400.617 li
795.82 400.527 li
797.512 400.52 li
799.207 400.566 li
800.898 400.547 li
802.594 400.566 li
804.285 400.508 li
805.977 400.465 li
807.672 400.531 li
@
807.672 400.531 mo
809.363 400.555 li
811.055 400.559 li
812.75 400.574 li
814.441 400.504 li
816.133 400.492 li
817.828 400.562 li
819.52 400.52 li
821.211 400.492 li
822.906 400.57 li
824.598 400.613 li
826.293 399.91 li
827.984 398.875 li
829.676 399.027 li
831.371 399.621 li
833.062 399.246 li
834.754 399.031 li
836.449 399.273 li
838.141 399.285 li
839.832 399.18 li
841.527 398.902 li
843.219 398.387 li
844.91 398.387 li
846.605 399.176 li
848.297 399.562 li
849.992 399.355 li
851.684 399.109 li
853.375 399.055 li
855.07 398.531 li
856.762 398.5 li
858.453 398.16 li
860.148 397.906 li
861.84 398.836 li
863.531 399.465 li
865.227 399.676 li
866.918 399.535 li
868.609 399.258 li
870.305 398.848 li
871.996 398.645 li
873.691 398.703 li
875.383 398.379 li
877.074 398.273 li
878.77 398.945 li
880.461 399.445 li
882.152 399.375 li
883.848 398.613 li
885.539 398.449 li
887.23 398.973 li
888.926 399.254 li
890.617 399.379 li
@
890.617 399.383 mo
892.309 398.883 li
894.004 398.645 li
895.695 399.082 li
897.391 399.418 li
899.082 399.117 li
900.773 399.359 li
902.469 399.344 li
904.16 398.508 li
905.852 398.488 li
907.547 398.941 li
909.238 398.637 li
910.93 398.262 li
912.625 398.867 li
914.316 398.508 li
916.008 398.105 li
917.703 398.25 li
919.395 399 li
921.09 400.148 li
922.781 399.965 li
924.473 399.93 li
926.168 400.219 li
927.859 400.082 li
929.551 400.195 li
931.246 400.238 li
932.938 400.273 li
934.629 400.449 li
936.324 400.5 li
938.016 400.555 li
939.707 400.574 li
941.402 400.555 li
943.094 400.523 li
944.789 400.566 li
946.48 400.598 li
948.172 400.582 li
949.867 400.555 li
951.559 400.523 li
953.25 400.562 li
954.945 400.566 li
956.637 400.562 li
958.328 400.539 li
960.023 400.488 li
961.715 400.488 li
963.406 400.539 li
965.102 400.559 li
966.793 400.559 li
968.488 400.609 li
@
144.094 395.48 mo
145.785 393.301 li
147.477 392.219 li
149.172 394.086 li
150.863 396.008 li
152.559 396.098 li
154.25 395.766 li
155.941 394.195 li
157.637 393.039 li
159.328 395.328 li
161.02 394.699 li
162.715 394.961 li
164.406 393.062 li
166.098 392.531 li
167.793 395.883 li
169.484 394.332 li
171.176 394.398 li
172.871 395.453 li
174.562 396.117 li
176.258 398.348 li
179.641 391.387 li
181.336 392.844 li
183.027 394.566 li
184.719 388.078 li
186.414 383.031 li
188.105 391.043 li
189.797 392.055 li
191.492 388.473 li
193.184 389.438 li
194.875 392.531 li
196.57 397.199 li
198.262 399.004 li
199.957 399.852 li
201.648 400.199 li
203.34 400.172 li
205.035 400.285 li
206.727 400.434 li
208.418 400.539 li
210.113 400.52 li
211.805 400.438 li
213.496 400.488 li
215.191 400.527 li
216.883 400.504 li
218.574 400.488 li
220.27 398.367 li
221.961 397.383 li
223.656 396.375 li
225.348 395.699 li
227.039 394.449 li
.600824 .0568551 3.0518e-5 0 cmyk
@
227.039 394.449 mo
228.734 393.465 li
230.426 397.137 li
232.117 396.73 li
233.812 395.969 li
235.504 394.664 li
237.195 393.992 li
238.891 398.238 li
240.582 397.688 li
242.273 396.262 li
243.969 395.766 li
245.66 395.223 li
247.355 397.238 li
249.047 395.188 li
250.738 396.012 li
252.434 396.98 li
254.125 396.242 li
255.816 396.445 li
257.512 393.875 li
259.203 393.746 li
260.895 395.5 li
262.59 393.672 li
264.281 386.336 li
265.973 384.707 li
267.668 391.887 li
269.359 394.523 li
271.055 394.488 li
272.746 395.301 li
274.438 397.07 li
276.133 399.906 li
277.824 399.895 li
279.516 399.938 li
281.211 400.078 li
282.902 399.922 li
284.594 400.098 li
286.289 400.473 li
287.98 400.562 li
289.672 400.562 li
291.367 400.508 li
293.059 400.508 li
294.754 400.488 li
296.445 400.434 li
298.137 400.422 li
299.832 400.418 li
301.523 399.438 li
303.215 396.781 li
304.91 397.293 li
306.602 397.742 li
308.293 397.777 li
309.988 399.125 li
@
309.988 399.125 mo
311.68 397.402 li
313.371 397.508 li
315.066 397.223 li
316.758 397.355 li
318.453 398.734 li
320.145 397.09 li
321.836 397.703 li
323.531 397.289 li
325.223 397.23 li
326.914 398.91 li
328.609 397.566 li
330.301 398.082 li
331.992 397.48 li
333.688 397.348 li
335.379 399.164 li
337.07 398.316 li
338.766 398.133 li
340.457 398.855 li
342.152 399.031 li
343.844 397.488 li
345.535 394.055 li
347.23 395.145 li
348.922 396.934 li
350.613 390.82 li
352.309 384.098 li
354 387.363 li
355.691 394.633 li
357.387 397.031 li
359.078 396.734 li
360.77 396.293 li
362.465 397.652 li
364.156 399.277 li
365.848 399.719 li
367.543 399.852 li
369.234 399.902 li
370.93 399.949 li
372.621 400.148 li
374.312 400.379 li
376.008 400.344 li
377.699 400.422 li
379.391 400.539 li
381.086 400.555 li
382.777 400.566 li
384.469 400.566 li
386.164 400.559 li
387.855 400.555 li
389.547 400.566 li
391.242 400.555 li
392.934 400.551 li
@
392.934 400.551 mo
394.629 400.543 li
396.32 400.547 li
398.012 400.543 li
399.707 400.527 li
401.398 400.547 li
403.09 400.57 li
404.785 399.77 li
406.477 397.898 li
408.168 397.555 li
409.863 397.715 li
411.555 397.363 li
413.246 397.91 li
414.941 398.91 li
416.633 399.605 li
418.328 398.574 li
420.02 398.391 li
421.711 398.488 li
423.406 397.617 li
425.098 398.086 li
426.789 398.16 li
428.484 398.59 li
430.176 399.578 li
431.867 398.848 li
433.562 395.887 li
435.254 392.234 li
436.945 390.922 li
438.641 395.078 li
440.332 397.688 li
442.027 392.824 li
443.719 389.055 li
445.41 393.188 li
447.105 397.242 li
448.797 398.051 li
450.488 399.668 li
452.184 400.137 li
453.875 400.152 li
455.566 400.387 li
457.262 400.555 li
458.953 400.52 li
460.645 400.52 li
462.34 400.535 li
464.031 400.582 li
465.727 400.613 li
467.418 400.602 li
469.109 400.473 li
470.805 400.012 li
472.496 398.832 li
474.188 397.727 li
475.883 398.07 li
@
475.883 398.07 mo
477.574 398.191 li
479.266 397.48 li
480.961 396.402 li
482.652 394.207 li
484.344 393.047 li
486.039 394.09 li
487.73 394.773 li
489.426 394.449 li
491.117 394.793 li
492.809 396.82 li
494.504 398.852 li
496.195 399.059 li
497.887 399.508 li
499.582 400.336 li
501.273 400.312 li
502.965 400.387 li
504.66 400.531 li
506.352 399.531 li
508.043 398.109 li
509.738 397.902 li
511.43 397.977 li
513.125 398.301 li
514.816 399.113 li
516.508 399 li
518.203 398.93 li
519.895 398.363 li
521.586 398.445 li
523.281 399.012 li
524.973 398.957 li
526.664 399.25 li
528.359 398.465 li
530.051 398.977 li
531.742 400.008 li
533.438 400.062 li
535.129 399.285 li
536.824 398.379 li
538.516 394.078 li
540.207 387.883 li
541.902 386.973 li
543.594 391.895 li
545.285 396.895 li
546.98 398.273 li
548.672 399.32 li
550.363 399.828 li
552.059 399.066 li
553.75 398.934 li
555.441 399.926 li
557.137 400.238 li
558.828 400.262 li
@
558.828 400.262 mo
560.523 400.512 li
562.215 400.461 li
563.906 400.332 li
565.602 400.391 li
567.293 400.512 li
568.984 400.297 li
570.68 398.781 li
572.371 398.242 li
574.062 398.617 li
575.758 398.324 li
577.449 398.754 li
579.141 398.594 li
580.836 398.758 li
582.527 398.887 li
584.223 398.906 li
585.914 399.332 li
587.605 398.727 li
589.301 398.945 li
590.992 398.746 li
592.684 398.664 li
594.379 399.238 li
596.07 398.777 li
597.762 399.098 li
599.457 398.973 li
601.148 398.883 li
602.84 399.547 li
604.535 399.715 li
606.227 399.121 li
607.922 398.18 li
609.613 397.676 li
611.305 395.762 li
613 395.398 li
614.691 398.07 li
616.383 399.539 li
618.078 398.688 li
619.77 398.078 li
621.461 399.336 li
623.156 400.297 li
624.848 400.449 li
626.539 400.559 li
628.234 400.566 li
629.926 400.582 li
631.621 400.566 li
633.312 400.535 li
635.004 400.559 li
636.699 400.59 li
638.391 400.598 li
640.082 400.594 li
641.777 400.582 li
@
641.777 400.586 mo
643.469 400.535 li
645.16 399.5 li
646.855 398.664 li
648.547 399.105 li
650.238 399.527 li
651.934 399.086 li
653.625 399.191 li
655.32 398.938 li
657.012 398.824 li
658.703 399.766 li
660.398 399.414 li
662.09 399.379 li
663.781 398.98 li
665.477 398.902 li
667.168 399.465 li
668.859 398.648 li
670.555 398.156 li
672.246 398.977 li
673.938 397.895 li
675.633 395.812 li
677.324 395.676 li
679.02 397.512 li
680.711 399.141 li
682.402 397.879 li
684.098 397.199 li
685.789 398.922 li
687.48 400.074 li
689.176 399.957 li
690.867 399.645 li
692.559 399.809 li
694.254 400.117 li
695.945 400.02 li
697.637 400.078 li
699.332 400.312 li
701.023 400.473 li
702.719 400.543 li
704.41 400.57 li
706.102 400.555 li
707.797 400.492 li
709.488 400.438 li
711.18 400.488 li
712.875 400.559 li
714.566 400.582 li
716.258 400.574 li
717.953 400.566 li
719.645 400.508 li
721.336 400.523 li
723.031 400.574 li
724.723 400.039 li
@
724.723 400.039 mo
726.414 399.391 li
728.109 399.441 li
729.801 399.312 li
731.496 399.008 li
733.188 398.926 li
734.879 398.992 li
736.574 398.832 li
738.266 398.676 li
739.957 398.703 li
741.652 398.812 li
743.344 399.102 li
745.035 399.594 li
746.73 399.723 li
748.422 398.887 li
750.113 399.223 li
751.809 399.18 li
753.5 399.133 li
755.195 400.039 li
756.887 399.484 li
758.578 399.359 li
760.273 398.875 li
761.965 398.359 li
763.656 399.199 li
765.352 399.16 li
767.043 398.594 li
768.734 398.68 li
770.43 398.344 li
773.812 395.453 li
775.508 395.191 li
777.199 397.082 li
778.895 398.125 li
780.586 398.418 li
782.277 399.508 li
783.973 399.902 li
785.664 400.191 li
787.355 400.324 li
789.051 400.418 li
790.742 400.559 li
792.434 400.59 li
794.129 400.508 li
795.82 400.312 li
797.512 400.297 li
799.207 400.504 li
800.898 400.602 li
802.594 400.578 li
804.285 400.508 li
805.977 400.512 li
807.672 400.586 li
@
807.672 400.586 mo
809.363 400.605 li
811.055 400.605 li
812.75 400.602 li
814.441 400.574 li
816.133 400.523 li
817.828 400.523 li
819.52 400.59 li
821.211 400.613 li
822.906 400.594 li
824.598 400.559 li
826.293 400.113 li
827.984 399.586 li
829.676 398.945 li
831.371 398.633 li
833.062 399.402 li
834.754 399.629 li
836.449 399.543 li
838.141 399.195 li
839.832 399.062 li
841.527 399.117 li
843.219 398.613 li
844.91 398.98 li
846.605 399.055 li
848.297 398.969 li
849.992 399.613 li
851.684 399.738 li
853.375 399.312 li
855.07 399.133 li
856.762 399.41 li
858.453 399.164 li
860.148 399.004 li
861.84 399.207 li
863.531 399.16 li
865.227 399.305 li
866.918 399.652 li
868.609 399.992 li
870.305 399.223 li
871.996 399.109 li
873.691 399.562 li
875.383 399.312 li
877.074 399.629 li
878.77 399.387 li
880.461 399.43 li
882.152 399.648 li
883.848 399.512 li
885.539 399.957 li
887.23 399.328 li
888.926 399.266 li
890.617 399.633 li
@
890.617 399.633 mo
892.309 399.527 li
894.004 399.906 li
895.695 399.641 li
897.391 399.559 li
899.082 399.953 li
900.773 399.941 li
902.469 399.621 li
904.16 397.676 li
905.852 396.504 li
907.547 398.461 li
909.238 397.684 li
910.93 394.383 li
912.625 394.438 li
914.316 397.051 li
916.008 399.176 li
917.703 400.039 li
919.395 399.973 li
921.09 400.004 li
922.781 400.367 li
924.473 400.48 li
926.168 400.395 li
927.859 400.375 li
929.551 400.461 li
931.246 400.543 li
932.938 400.566 li
934.629 400.504 li
936.324 400.492 li
938.016 400.566 li
939.707 400.578 li
941.402 400.52 li
943.094 400.484 li
944.789 400.535 li
946.48 400.551 li
948.172 400.559 li
949.867 400.559 li
951.559 400.543 li
953.25 400.586 li
954.945 400.617 li
956.637 400.605 li
958.328 400.566 li
960.023 400.527 li
961.715 400.535 li
963.406 400.559 li
965.102 400.574 li
966.793 400.535 li
968.488 400.562 li
@
144.094 360.258 mo
145.785 407.418 li
147.477 464.461 li
149.172 430.695 li
150.863 362.379 li
152.559 349.66 li
154.25 427.785 li
155.941 471.199 li
157.637 385.434 li
159.328 340.578 li
161.02 379.598 li
162.715 452.98 li
164.406 468.109 li
166.098 379.473 li
167.793 330.453 li
169.484 372.289 li
171.176 430.809 li
172.871 441.906 li
174.562 398.094 li
176.258 375.254 li
177.949 410.387 li
179.641 439.562 li
181.336 397.348 li
183.027 373.156 li
184.719 399.996 li
186.414 360.715 li
188.105 334.812 li
189.797 392.734 li
191.492 406.594 li
193.184 391.523 li
194.875 375.082 li
196.57 373.711 li
198.262 382.559 li
199.957 383.922 li
201.648 386.859 li
203.34 378.527 li
205.035 378.582 li
206.727 381.266 li
208.418 381.172 li
210.113 381.457 li
213.496 380.473 li
215.191 380.473 li
216.883 380.176 li
218.574 381.473 li
220.27 371.512 li
221.961 366.68 li
223.656 400.004 li
225.348 446.25 li
227.039 442.727 li
.243381 1 .835172 .192233 cmyk
@
227.039 442.727 mo
228.734 376.652 li
230.426 355.113 li
232.117 405.93 li
233.812 445.273 li
235.504 442.406 li
237.195 385.09 li
238.891 357.574 li
240.582 403.863 li
242.273 452.121 li
243.969 450.258 li
245.66 382.289 li
247.355 357.152 li
249.047 391.957 li
250.738 443.117 li
252.434 451.141 li
254.125 393.934 li
255.816 373.621 li
257.512 405.668 li
259.203 419.773 li
260.895 404.715 li
262.59 398.898 li
264.281 405.574 li
265.973 364.73 li
267.668 333.016 li
269.359 347.398 li
271.055 368.305 li
272.746 380.168 li
274.438 372.012 li
276.133 377.039 li
277.824 377.984 li
279.516 378.543 li
281.211 380.266 li
282.902 379.863 li
284.594 379.309 li
286.289 380.629 li
287.98 380.742 li
289.672 379.996 li
291.367 380.055 li
293.059 380.273 li
294.754 380.633 li
296.445 380.93 li
298.137 380.492 li
299.832 379.598 li
301.523 374.512 li
303.215 394.98 li
304.91 438.641 li
306.602 433.812 li
308.293 378.824 li
309.988 361.52 li
@
309.988 361.52 mo
311.68 404.531 li
313.371 445.441 li
315.066 427.812 li
316.758 374.066 li
318.453 366.152 li
320.145 407.336 li
321.836 448.484 li
323.531 433.672 li
325.223 372.574 li
326.914 365.004 li
328.609 408.426 li
330.301 435.301 li
331.992 421.062 li
333.688 375.227 li
335.379 370.652 li
337.07 417.703 li
338.766 427.801 li
340.457 406.859 li
342.152 394.883 li
343.844 394.398 li
345.535 423.406 li
347.23 406.879 li
348.922 368.02 li
350.613 389.324 li
352.309 393.973 li
354 366.242 li
355.691 378.535 li
357.387 402.152 li
359.078 391.957 li
360.77 375.641 li
362.465 372.734 li
364.156 377.422 li
365.848 378.047 li
367.543 382.562 li
369.234 389.414 li
370.93 390.23 li
372.621 388.086 li
374.312 385.98 li
376.008 387.555 li
377.699 388.695 li
379.391 386.949 li
381.086 386.988 li
382.777 387.746 li
384.469 387.016 li
386.164 387.234 li
387.855 387.387 li
389.547 387.172 li
391.242 387.562 li
392.934 387.621 li
@
392.934 387.621 mo
394.629 387.664 li
396.32 387.629 li
398.012 386.98 li
399.707 386.781 li
401.398 387.195 li
403.09 387.344 li
404.785 419.879 li
406.477 428.672 li
408.168 386.863 li
409.863 378.664 li
411.555 410.043 li
413.246 428.238 li
414.941 403.898 li
416.633 378.398 li
418.328 385.953 li
420.02 423.352 li
421.711 438.805 li
423.406 406.777 li
425.098 380.527 li
426.789 384.664 li
428.484 419.055 li
430.176 430.566 li
431.867 405.207 li
433.562 395.602 li
435.254 393.492 li
436.945 401.309 li
438.641 393.562 li
440.332 373.992 li
442.027 389.699 li
443.719 398.508 li
445.41 382.809 li
447.105 385.293 li
448.797 399.156 li
450.488 397.121 li
452.184 389.555 li
453.875 391.508 li
455.566 395.895 li
457.262 395.484 li
458.953 395.094 li
460.645 395.191 li
462.34 395.047 li
464.031 394.582 li
465.727 394.102 li
467.418 394.414 li
469.109 394.152 li
470.805 392.633 li
472.496 390.234 li
474.188 390.367 li
475.883 387.281 li
@
475.883 387.281 mo
477.574 375.379 li
479.266 372.383 li
480.961 380.211 li
482.652 379.93 li
484.344 378.898 li
486.039 384.738 li
487.73 392.832 li
489.426 397.457 li
491.117 398.891 li
492.809 413.84 li
494.504 417.074 li
496.195 401.266 li
497.887 396.621 li
499.582 395.488 li
501.273 394.578 li
502.965 396.059 li
504.66 394.848 li
506.352 386.773 li
508.043 395.895 li
509.738 419.766 li
511.43 423.969 li
513.125 393.238 li
514.816 379.234 li
516.508 407.812 li
518.203 431.055 li
519.895 415.211 li
521.586 383.312 li
523.281 384.91 li
524.973 409.301 li
526.664 425.094 li
528.359 409.316 li
530.051 384.77 li
531.742 385.082 li
533.438 412.785 li
535.129 419.297 li
536.824 400.699 li
538.516 399.418 li
540.207 393.215 li
541.902 370.145 li
543.594 365.953 li
545.285 379.957 li
546.98 383.434 li
548.672 374.27 li
550.363 371.926 li
552.059 377.648 li
553.75 375.902 li
555.441 371.723 li
557.137 368.941 li
558.828 369.68 li
@
558.828 369.68 mo
560.523 373.406 li
562.215 375.199 li
563.906 374.105 li
565.602 372.391 li
567.293 371.328 li
568.984 376.02 li
570.68 396.84 li
572.371 422.246 li
574.062 424.453 li
575.758 395.922 li
577.449 379.121 li
579.141 400.996 li
580.836 419.707 li
582.527 414.305 li
584.223 389.273 li
585.914 380.441 li
587.605 402.926 li
589.301 423.395 li
590.992 407.965 li
592.684 377.266 li
594.379 381.383 li
596.07 406.465 li
597.762 423.254 li
599.457 405.812 li
601.148 384.098 li
602.84 390.539 li
604.535 406.383 li
606.227 406.773 li
607.922 399.125 li
609.613 403.973 li
611.305 400.039 li
613 391.348 li
614.691 396.918 li
616.383 386.148 li
618.078 378.641 li
619.77 386.969 li
621.461 388.047 li
623.156 393.461 li
624.848 397.969 li
626.539 398.66 li
628.234 398.82 li
629.926 399.223 li
631.621 399.34 li
633.312 399.488 li
635.004 399.406 li
636.699 399.492 li
638.391 399.504 li
640.082 399.484 li
641.777 399.492 li
@
641.777 399.492 mo
643.469 404.844 li
645.16 412.18 li
646.855 415.57 li
648.547 398.438 li
650.238 383.902 li
651.934 402.039 li
653.625 424.32 li
655.32 414.598 li
657.012 385.371 li
658.703 383.832 li
660.398 407.25 li
662.09 421.82 li
663.781 407.23 li
665.477 387.488 li
667.168 390.934 li
668.859 406.988 li
670.555 406.895 li
672.246 395.895 li
673.938 390.156 li
675.633 395.098 li
677.324 396.98 li
679.02 387.543 li
680.711 383.293 li
682.402 389.109 li
684.098 385.477 li
685.789 378.977 li
687.48 384.566 li
689.176 389.703 li
690.867 390.336 li
692.559 385.617 li
694.254 380.383 li
695.945 383.535 li
697.637 390.184 li
699.332 389.859 li
701.023 388.812 li
702.719 387.453 li
704.41 387.348 li
706.102 388.465 li
707.797 388.695 li
709.488 388.227 li
711.18 387.648 li
712.875 386.906 li
714.566 386.371 li
716.258 386.805 li
717.953 387.445 li
719.645 387.395 li
721.336 387.016 li
723.031 386.504 li
724.723 395.586 li
@
724.723 395.586 mo
726.414 415.773 li
728.109 415.211 li
729.801 393.648 li
731.496 388.527 li
733.188 399.578 li
734.879 412.926 li
736.574 401.824 li
738.266 381.977 li
739.957 388.867 li
741.652 413.727 li
743.344 417.809 li
745.035 397.203 li
746.73 386.316 li
748.422 392.797 li
750.113 411.133 li
751.809 417.691 li
753.5 394.926 li
755.195 382.242 li
756.887 401.328 li
758.578 416.238 li
760.273 411.141 li
761.965 390.352 li
763.656 387.074 li
765.352 405.809 li
767.043 408.469 li
768.734 404.105 li
770.43 401.926 li
772.121 399.582 li
773.812 394.203 li
775.508 388.426 li
777.199 380.766 li
778.895 373.246 li
780.586 380.918 li
782.277 388.727 li
783.973 391.77 li
785.664 390.598 li
787.355 388.656 li
789.051 387.902 li
790.742 387.68 li
792.434 388.277 li
794.129 388.449 li
795.82 388.32 li
797.512 387.695 li
799.207 387.445 li
800.898 387.742 li
802.594 388.207 li
804.285 388.129 li
805.977 387.316 li
807.672 387.043 li
@
807.672 387.043 mo
809.363 387.367 li
811.055 387.727 li
812.75 388.047 li
814.441 387.723 li
816.133 387.188 li
817.828 386.824 li
819.52 387.047 li
821.211 387.656 li
822.906 387.863 li
824.598 387.754 li
826.293 384.402 li
827.984 385.098 li
829.676 394.609 li
831.371 411.219 li
833.062 413.75 li
834.754 397.09 li
836.449 390.02 li
838.141 405.398 li
839.832 422.164 li
841.527 412.375 li
843.219 391.977 li
844.91 388.453 li
846.605 402.34 li
848.297 412.875 li
849.992 403.375 li
851.684 390.434 li
853.375 389.688 li
855.07 406.012 li
856.762 421.266 li
858.453 410.105 li
860.148 391.074 li
861.84 387.785 li
863.531 402.121 li
865.227 414.398 li
866.918 404.215 li
868.609 387.082 li
870.305 388.238 li
871.996 411.418 li
873.691 418.129 li
875.383 401.184 li
877.074 386.055 li
878.77 389.098 li
880.461 413.082 li
882.152 414.328 li
883.848 396.457 li
885.539 389.422 li
887.23 395.379 li
888.926 411.973 li
890.617 417.242 li
@
890.617 417.242 mo
892.309 404.289 li
894.004 390.23 li
895.695 399.809 li
897.391 414.344 li
899.082 410.117 li
900.773 399.871 li
902.469 397.488 li
904.16 408.602 li
905.852 406.547 li
907.547 397.516 li
909.238 392.809 li
910.93 389.219 li
912.625 378.512 li
914.316 377.113 li
916.008 388.406 li
917.703 382.828 li
919.395 381.59 li
921.09 386 li
922.781 385.254 li
924.473 387.488 li
926.168 388.086 li
927.859 386.539 li
929.551 385.434 li
931.246 386.039 li
932.938 387.797 li
934.629 387.922 li
936.324 386.973 li
938.016 386.902 li
939.707 387.449 li
941.402 387.473 li
943.094 386.957 li
944.789 386.77 li
946.48 386.883 li
948.172 387.09 li
949.867 387.375 li
951.559 386.922 li
953.25 386.355 li
954.945 386.539 li
956.637 386.965 li
958.328 387.066 li
960.023 386.57 li
961.715 386.363 li
963.406 386.141 li
965.102 386.168 li
966.793 386.742 li
968.488 393.777 li
@
144.094 157.719 mo
145.785 109.355 li
147.477 99.816 li
149.172 121.297 li
150.863 93.469 li
152.559 118.844 li
154.25 142.363 li
155.941 100.125 li
157.637 116.641 li
159.328 120.941 li
161.02 134.43 li
162.715 174.402 li
164.406 144.363 li
166.098 126.922 li
167.793 126.008 li
169.484 116.754 li
171.176 115.016 li
172.871 106.887 li
174.562 119.465 li
176.258 160.805 li
177.949 165.547 li
179.641 133.633 li
181.336 180.172 li
183.027 258.793 li
184.719 312.891 li
186.414 324.453 li
188.105 399.387 li
189.797 436.426 li
191.492 363.812 li
193.184 349.453 li
194.875 345.32 li
196.57 350.379 li
198.262 356.652 li
199.957 351.637 li
201.648 354.133 li
203.34 361.727 li
205.035 363.828 li
206.727 359.848 li
208.418 360.172 li
210.113 359.801 li
211.805 358.379 li
213.496 359.27 li
215.191 359.645 li
216.883 359.164 li
218.574 359.855 li
220.27 310.09 li
221.961 228.035 li
223.656 198.824 li
225.348 200.066 li
227.039 180.191 li
.875212 .526726 .00314336 .000793469 cmyk
@
227.039 180.191 mo
228.734 176.902 li
230.426 186.66 li
232.117 192.414 li
233.812 202.414 li
235.504 180.789 li
237.195 180.504 li
238.891 194.262 li
240.582 202.547 li
242.273 223.727 li
243.969 214.375 li
245.66 193.84 li
247.355 197.23 li
249.047 198.246 li
250.738 212.625 li
252.434 202.5 li
254.125 195.918 li
255.816 239.195 li
257.512 264.086 li
259.203 240.875 li
260.895 276.293 li
262.59 324.594 li
264.281 311.574 li
265.973 333.742 li
267.668 351.27 li
269.359 367.434 li
271.055 372.957 li
272.746 353.621 li
274.438 372.461 li
276.133 392.523 li
277.824 383.293 li
279.516 376.387 li
281.211 374.789 li
282.902 380.441 li
284.594 384.652 li
286.289 384.312 li
287.98 381.441 li
289.672 379.355 li
291.367 380.668 li
293.059 381.418 li
294.754 380.828 li
296.445 381.258 li
298.137 383.137 li
299.832 385.527 li
301.523 316.219 li
303.215 233.547 li
304.91 236.969 li
306.602 238.215 li
308.293 236.547 li
309.988 243.828 li
@
309.988 243.828 mo
311.68 232.047 li
313.371 237.898 li
315.066 230.762 li
316.758 233.16 li
318.453 249.906 li
320.145 235.152 li
321.836 246.109 li
323.531 244.102 li
325.223 243.332 li
326.914 256.562 li
328.609 240.371 li
330.301 232.793 li
331.992 244.691 li
333.688 254.969 li
335.379 253.805 li
337.07 252.297 li
338.766 250.578 li
340.457 251.836 li
342.152 244.238 li
343.844 245.891 li
345.535 267.371 li
347.23 283.844 li
348.922 338.883 li
350.613 348.656 li
352.309 337.273 li
354 368.289 li
355.691 366.508 li
357.387 357.52 li
359.078 349.965 li
360.77 366.09 li
362.465 390.715 li
364.156 397.105 li
365.848 393.723 li
367.543 383.289 li
369.234 377.324 li
370.93 382.449 li
372.621 390.227 li
374.312 394.914 li
376.008 391.879 li
377.699 389.289 li
379.391 392.617 li
381.086 393.543 li
382.777 392.703 li
384.469 392.426 li
386.164 392.668 li
387.855 392.926 li
389.547 393.449 li
391.242 393.422 li
392.934 393.281 li
@
392.934 393.281 mo
394.629 393.391 li
396.32 393.121 li
398.012 392.848 li
399.707 393.188 li
401.398 393.051 li
403.09 393.32 li
404.785 328.453 li
406.477 283.797 li
408.168 288.703 li
409.863 281.98 li
411.555 296.785 li
413.246 282.793 li
414.941 275.348 li
416.633 274.023 li
418.328 268.113 li
420.02 282.457 li
421.711 281.684 li
423.406 277.262 li
425.098 268.812 li
426.789 276.406 li
428.484 280.547 li
430.176 284.426 li
431.867 303.41 li
433.562 296.242 li
435.254 305.402 li
436.945 314.953 li
438.641 331.219 li
440.332 358.336 li
442.027 358.5 li
443.719 359.629 li
445.41 376.27 li
447.105 384.242 li
448.797 375.078 li
450.488 377.074 li
452.184 388.484 li
453.875 391.852 li
455.566 393.418 li
457.262 395.527 li
458.953 395.047 li
460.645 395.105 li
462.34 394.719 li
464.031 394.641 li
465.727 395.137 li
467.418 395.965 li
469.109 396.387 li
470.805 394.996 li
472.496 389.805 li
474.188 385.148 li
475.883 387.586 li
@
475.883 387.586 mo
477.574 384.375 li
479.266 372.191 li
480.961 354.887 li
482.652 332.305 li
484.344 314.504 li
486.039 303.527 li
487.73 296.16 li
489.426 290.758 li
491.117 285.844 li
492.809 285.617 li
494.504 288.551 li
496.195 290.75 li
497.887 292.82 li
499.582 292.883 li
501.273 293.016 li
502.965 292.844 li
504.66 292.578 li
506.352 292.184 li
508.043 296.953 li
509.738 310.895 li
511.43 301.781 li
513.125 299.902 li
514.816 308.977 li
516.508 301.57 li
518.203 292.484 li
519.895 287.996 li
521.586 299.207 li
523.281 303.824 li
524.973 300.461 li
526.664 300.984 li
528.359 294.477 li
530.051 293.566 li
531.742 299.445 li
533.438 307.285 li
535.129 319.133 li
536.824 329.949 li
538.516 336.184 li
540.207 358.52 li
541.902 382.082 li
543.594 374.285 li
545.285 373.145 li
546.98 375.426 li
548.672 376.531 li
550.363 381.398 li
552.059 381.094 li
553.75 388.977 li
555.441 397.496 li
557.137 396.285 li
558.828 391.383 li
@
558.828 391.383 mo
560.523 387.152 li
562.215 385.613 li
563.906 388.363 li
565.602 392.02 li
567.293 392.996 li
568.984 376.344 li
570.68 331.152 li
572.371 304.52 li
574.062 301.965 li
575.758 297.43 li
577.449 306.324 li
579.141 305.02 li
580.836 309.602 li
582.527 299.02 li
584.223 298.16 li
585.914 320.207 li
587.605 307.809 li
589.301 300.766 li
590.992 295.176 li
592.684 308.004 li
594.379 319.949 li
596.07 304.809 li
597.762 302.27 li
599.457 304.27 li
601.148 309.375 li
602.84 311.457 li
604.535 305.297 li
606.227 309.805 li
607.922 334.961 li
609.613 345.332 li
611.305 363.602 li
613 370.559 li
614.691 366.82 li
616.383 385.68 li
618.078 386.137 li
619.77 412.16 li
621.461 420.059 li
623.156 397.621 li
624.848 396.09 li
626.539 396.371 li
628.234 396.465 li
629.926 396.211 li
631.621 396.285 li
633.312 396.406 li
635.004 396.305 li
636.699 396.059 li
638.391 396.164 li
640.082 396.199 li
641.777 395.988 li
@
641.777 395.988 mo
643.469 392.695 li
645.16 354.906 li
646.855 321.348 li
648.547 317.07 li
650.238 314.918 li
651.934 316.473 li
653.625 319.789 li
655.32 302.766 li
657.012 305.555 li
658.703 324.367 li
660.398 318.766 li
662.09 319.801 li
663.781 311.434 li
665.477 309.07 li
667.168 320.297 li
668.859 319.574 li
670.555 314.07 li
672.246 329.316 li
673.938 348.449 li
675.633 359.215 li
677.324 366.418 li
679.02 363.273 li
680.711 373.301 li
682.402 378.023 li
684.098 376.184 li
685.789 387.648 li
687.48 388.762 li
689.176 386.48 li
690.867 387.812 li
692.559 396.086 li
694.254 403.703 li
695.945 397.555 li
697.637 390.547 li
699.332 389.547 li
701.023 392.785 li
702.719 395.555 li
704.41 394.992 li
706.102 393.344 li
707.797 393.121 li
709.488 394.309 li
711.18 395.305 li
712.875 396.441 li
714.566 397.633 li
716.258 396.781 li
717.953 394.867 li
719.645 394.781 li
721.336 395.961 li
723.031 396.992 li
724.723 383.051 li
@
724.723 383.051 mo
726.414 342.414 li
728.109 316.344 li
729.801 322.07 li
731.496 327.773 li
733.188 332.66 li
734.879 330.629 li
736.574 329.215 li
738.266 328.098 li
739.957 323.078 li
741.652 317.777 li
743.344 317.105 li
745.035 331.848 li
746.73 331.398 li
748.422 321.684 li
750.113 325.305 li
751.809 328.477 li
753.5 327.945 li
755.195 326.078 li
756.887 324.289 li
758.578 327.969 li
760.273 315.641 li
761.965 312.691 li
763.656 327.516 li
765.352 338.473 li
767.043 336.281 li
768.734 339.145 li
770.43 351.73 li
772.121 358.672 li
773.812 373.984 li
775.508 382.887 li
777.199 381.805 li
778.895 393.953 li
780.586 399.594 li
782.277 387.609 li
783.973 385 li
785.664 386.312 li
787.355 387.609 li
789.051 389.438 li
790.742 390.527 li
792.434 389.809 li
794.129 389.426 li
795.82 390.176 li
797.512 391.379 li
799.207 391.812 li
800.898 391.648 li
802.594 390.859 li
804.285 390.859 li
805.977 392.184 li
807.672 392.594 li
@
807.672 392.594 mo
809.363 392.23 li
811.055 391.773 li
812.75 391.527 li
814.441 391.723 li
816.133 392.867 li
817.828 393.852 li
819.52 393.312 li
821.211 392.41 li
822.906 391.992 li
824.598 392.266 li
826.293 377.332 li
827.984 347.969 li
829.676 337.145 li
831.371 337.988 li
833.062 333.762 li
834.754 335.188 li
836.449 334.992 li
838.141 338.102 li
839.832 336.367 li
841.527 325.301 li
843.219 330.668 li
844.91 344.223 li
846.605 339.973 li
848.297 333.57 li
849.992 332.883 li
851.684 332.316 li
853.375 342.305 li
855.07 338.789 li
856.762 329.25 li
858.453 333.242 li
860.148 337.398 li
861.84 341.895 li
863.531 334.445 li
865.227 328.074 li
866.918 334.363 li
868.609 336.754 li
870.305 332.469 li
871.996 333.254 li
873.691 337.445 li
875.383 335.805 li
877.074 339.09 li
878.77 337.391 li
880.461 334.828 li
882.152 331.898 li
883.848 331.566 li
885.539 335.75 li
887.23 338.328 li
888.926 344.656 li
890.617 345.207 li
@
890.617 345.207 mo
892.309 341.852 li
894.004 338.152 li
895.695 338.277 li
897.391 338.562 li
899.082 335.969 li
900.773 338.375 li
902.469 337.961 li
904.16 345.773 li
905.852 345.582 li
907.547 356.512 li
909.238 376.91 li
910.93 377.918 li
912.625 383.367 li
914.316 392.875 li
916.008 389.703 li
917.703 381.902 li
919.395 391.133 li
921.09 398.664 li
922.781 395.355 li
924.473 390.777 li
926.168 391.113 li
927.859 393.844 li
929.551 395.348 li
931.246 394.602 li
932.938 392.734 li
934.629 392.758 li
936.324 394.02 li
938.016 394.094 li
939.707 393.434 li
941.402 393.609 li
943.094 394.141 li
944.789 394.359 li
946.48 394.344 li
948.172 394.023 li
949.867 393.832 li
951.559 394.16 li
953.25 394.746 li
954.945 394.84 li
956.637 394.684 li
958.328 394.91 li
960.023 395.27 li
961.715 395.676 li
963.406 395.836 li
965.102 395.645 li
966.793 395.289 li
968.488 397.836 li
@
144.094 351.574 mo
145.785 441.363 li
147.477 444.469 li
149.172 403.426 li
150.863 407.871 li
152.559 443.547 li
154.25 467.52 li
155.941 462.668 li
157.637 464.605 li
159.328 448.715 li
161.02 427.508 li
162.715 456.629 li
164.406 445.402 li
166.098 437.145 li
167.793 442.09 li
169.484 421.59 li
171.176 452.77 li
172.871 481.461 li
174.562 453.094 li
176.258 405.309 li
177.949 365.949 li
179.641 338.211 li
181.336 294.887 li
183.027 216.77 li
184.719 185.785 li
186.414 133.531 li
188.105 87.199 li
189.797 160.449 li
191.492 207.297 li
193.184 189.133 li
194.875 153.148 li
196.57 141.34 li
198.262 164.688 li
199.957 176.785 li
201.648 174.246 li
203.34 166.805 li
205.035 166.875 li
206.727 174.859 li
208.418 176.703 li
210.113 176.879 li
211.805 179.742 li
213.496 180.531 li
215.191 181.688 li
216.883 183.254 li
218.574 183.719 li
220.27 253.152 li
221.961 362.16 li
223.656 415.645 li
225.348 435.586 li
227.039 420.344 li
.0951247 .812772 1 .0193484 cmyk
@
227.039 420.344 mo
228.734 398.465 li
230.426 401.406 li
232.117 408.109 li
233.812 425.031 li
235.504 429.609 li
237.195 414.789 li
238.891 403.113 li
240.582 412.504 li
242.273 434.156 li
243.969 430.383 li
245.66 412.844 li
247.355 414.867 li
249.047 427.445 li
250.738 455.57 li
252.434 464.414 li
254.125 445.344 li
255.816 421.293 li
257.512 380.801 li
259.203 330.352 li
260.895 279.832 li
262.59 256.277 li
264.281 243.672 li
265.973 224.34 li
267.668 202.75 li
269.359 203.895 li
271.055 228.145 li
272.746 231.227 li
274.438 220.949 li
276.133 215.051 li
277.824 218.574 li
279.516 226.93 li
281.211 227.668 li
282.902 226.188 li
284.594 224.605 li
286.289 224.754 li
287.98 227.316 li
289.672 230.156 li
291.367 230.531 li
293.059 230.602 li
294.754 232.293 li
296.445 233.73 li
298.137 233.734 li
299.832 232.73 li
301.523 328.598 li
303.215 409.684 li
304.91 417.422 li
306.602 425.07 li
308.293 419.637 li
309.988 413.93 li
@
309.988 413.93 mo
311.68 413.758 li
313.371 434.102 li
315.066 426.871 li
316.758 422.668 li
318.453 417.602 li
320.145 410.113 li
321.836 427.57 li
323.531 422.875 li
325.223 419.359 li
326.914 418.34 li
328.609 421.609 li
330.301 426.164 li
331.992 421.512 li
333.688 426.527 li
335.379 414.801 li
337.07 431.812 li
338.766 456.219 li
340.457 440.293 li
342.152 406.082 li
343.844 379.188 li
345.535 365.824 li
347.23 346.121 li
348.922 307.328 li
350.613 265.199 li
352.309 256.641 li
354 251.762 li
355.691 244.75 li
357.387 266.84 li
359.078 273.586 li
360.77 255.055 li
362.465 245.867 li
364.156 247.484 li
365.848 257.586 li
367.543 266.48 li
369.234 265.719 li
370.93 261.934 li
372.621 259.516 li
374.312 260.035 li
376.008 263.488 li
377.699 264.215 li
379.391 262.965 li
381.086 264.312 li
382.777 264.762 li
384.469 265.102 li
386.164 266.176 li
387.855 266.637 li
389.547 267.246 li
391.242 267.898 li
392.934 268.234 li
@
392.934 268.234 mo
394.629 268.809 li
396.32 269.156 li
398.012 269.883 li
399.707 270.574 li
401.398 270.695 li
403.09 271 li
404.785 341.082 li
406.477 419.496 li
408.168 417.957 li
409.863 404.707 li
411.555 412.711 li
413.246 412.117 li
414.941 400.238 li
416.633 398.918 li
418.328 403.203 li
420.02 423.305 li
421.711 423.172 li
423.406 418.934 li
425.098 414.668 li
426.789 424.168 li
428.484 447.168 li
430.176 423.309 li
431.867 387.328 li
433.562 370.949 li
435.254 355.332 li
436.945 339.816 li
438.641 307.07 li
440.332 272.949 li
442.027 291 li
443.719 299.762 li
445.41 272.219 li
447.105 268.668 li
448.797 285.055 li
450.488 280.809 li
452.184 273.965 li
453.875 282.176 li
455.566 285.625 li
457.262 284.324 li
458.953 285.055 li
460.645 285.691 li
462.34 285.434 li
464.031 285.723 li
465.727 286.07 li
467.418 285.199 li
469.109 284.734 li
470.805 285.695 li
472.496 288.633 li
474.188 284.488 li
475.883 274.48 li
@
475.883 274.48 mo
477.574 272.445 li
479.266 288.738 li
480.961 317.281 li
482.652 343.523 li
484.344 362.688 li
486.039 376.531 li
487.73 388.195 li
489.426 394.738 li
491.117 397.84 li
492.809 407.691 li
494.504 419.824 li
496.195 414.988 li
497.887 400.676 li
499.582 400.023 li
501.273 409.812 li
502.965 409.977 li
504.66 402.863 li
506.352 401.445 li
508.043 402.895 li
509.738 412.977 li
511.43 421.633 li
513.125 420.062 li
514.816 409.734 li
516.508 413.547 li
518.203 418.832 li
519.895 407.809 li
521.586 409.508 li
523.281 406.488 li
524.973 414.648 li
526.664 428.117 li
528.359 428.695 li
530.051 430.012 li
531.742 413.055 li
533.438 392.422 li
535.129 374.594 li
536.824 355.145 li
538.516 339.121 li
540.207 318.906 li
541.902 303.543 li
543.594 284.488 li
545.285 296.199 li
546.98 314.555 li
548.672 309.605 li
550.363 309.59 li
552.059 308.992 li
553.75 306.426 li
555.441 302.562 li
557.137 305.676 li
558.828 309.293 li
@
558.828 309.293 mo
560.523 311.41 li
562.215 312.113 li
563.906 310.488 li
565.602 308.238 li
567.293 308.309 li
568.984 329.012 li
570.68 376.43 li
572.371 404.312 li
574.062 402.738 li
575.758 402.855 li
577.449 402.945 li
579.141 401.703 li
580.836 411.668 li
582.527 408.09 li
584.223 408.457 li
585.914 415.309 li
587.605 408.906 li
589.301 411.098 li
590.992 404.832 li
592.684 408.48 li
594.379 409.91 li
596.07 404.68 li
597.762 407.93 li
599.457 406.586 li
601.148 415.43 li
602.84 418.105 li
604.535 406.059 li
606.227 395.504 li
607.922 379.738 li
609.613 346.246 li
611.305 320.262 li
613 306.789 li
614.691 298.145 li
616.383 307.086 li
618.078 318.133 li
619.77 310.664 li
621.461 306.703 li
623.156 313.047 li
624.848 313.633 li
626.539 313.383 li
628.234 313.539 li
629.926 314.117 li
631.621 314.195 li
633.312 314.305 li
635.004 314.516 li
636.699 314.777 li
638.391 315.07 li
640.082 315.316 li
641.777 315.457 li
@
641.777 315.457 mo
643.469 325.309 li
645.16 373.59 li
646.855 408.516 li
648.547 403.355 li
650.238 402.32 li
651.934 406.898 li
653.625 413.73 li
655.32 408.25 li
657.012 408.234 li
658.703 410.633 li
660.398 412.148 li
662.09 419.984 li
663.781 417.391 li
665.477 413.48 li
667.168 404.52 li
668.859 395.277 li
670.555 385.82 li
672.246 371.926 li
673.938 363.344 li
675.633 354.598 li
677.324 338.223 li
679.02 319.887 li
680.711 317.172 li
682.402 324.34 li
684.098 318.965 li
685.789 315.562 li
687.48 324.152 li
689.176 330.145 li
690.867 329.719 li
692.559 318.457 li
694.254 316.508 li
695.945 323.949 li
697.637 325.383 li
699.332 326.23 li
701.023 324.105 li
702.719 322.348 li
704.41 323.031 li
706.102 324.465 li
707.797 325.148 li
709.488 325.305 li
711.18 325.156 li
712.875 324.332 li
714.566 323.684 li
716.258 324.43 li
717.953 326.102 li
719.645 326.488 li
721.336 325.918 li
723.031 325.684 li
724.723 352.395 li
@
724.723 352.395 mo
726.414 391.113 li
728.109 400.551 li
729.801 396.539 li
731.496 397.555 li
733.188 413.902 li
734.879 419.387 li
736.574 407.262 li
738.266 404.34 li
739.957 406.957 li
741.652 406.938 li
743.344 400.246 li
745.035 399.605 li
746.73 401.746 li
748.422 407.34 li
750.113 416.809 li
751.809 415.633 li
753.5 413.891 li
755.195 409.605 li
756.887 407.754 li
758.578 412.383 li
760.273 414.996 li
761.965 419.254 li
763.656 408.914 li
765.352 393.047 li
767.043 387.129 li
768.734 376.719 li
770.43 365.281 li
772.121 358.402 li
773.812 345.375 li
775.508 335.531 li
777.199 328.371 li
778.895 327.688 li
780.586 331.609 li
782.277 329.195 li
783.973 331.918 li
785.664 333.824 li
787.355 333.129 li
789.051 332.465 li
790.742 332.32 li
792.434 332.84 li
794.129 333.52 li
795.82 333.23 li
797.512 332.719 li
799.207 332.984 li
800.898 333.676 li
802.594 334.238 li
804.285 334.035 li
805.977 333.527 li
807.672 333.391 li
@
807.672 333.391 mo
809.363 333.746 li
811.055 334.32 li
812.75 334.797 li
814.441 334.984 li
816.133 334.695 li
817.828 334.148 li
819.52 334.375 li
821.211 335.195 li
822.906 335.453 li
824.598 335.348 li
826.293 355.379 li
827.984 385.457 li
829.676 403.664 li
831.371 410.293 li
833.062 403.445 li
834.754 399.629 li
836.449 401.809 li
838.141 411.758 li
839.832 415.16 li
841.527 405.516 li
843.219 403.773 li
844.91 401.887 li
846.605 406.41 li
848.297 408.785 li
849.992 398.668 li
851.684 397.137 li
853.375 405.527 li
855.07 417.914 li
856.762 417.973 li
858.453 409.77 li
860.148 405.266 li
861.84 400.934 li
863.531 404.422 li
865.227 407.77 li
866.918 401.984 li
868.609 402.062 li
870.305 401.395 li
871.996 407.516 li
873.691 413.996 li
875.383 408.379 li
877.074 409.508 li
878.77 406.648 li
880.461 405.648 li
882.152 406.109 li
883.848 402.867 li
885.539 404.699 li
887.23 410.703 li
888.926 414.391 li
890.617 408.266 li
@
890.617 408.266 mo
892.309 403.762 li
894.004 402.52 li
895.695 403.219 li
897.391 414.062 li
899.082 420.504 li
900.773 409.297 li
902.469 392.73 li
904.16 384.215 li
905.852 378.992 li
907.547 367.629 li
909.238 354.414 li
910.93 349.055 li
912.625 331.98 li
914.316 327.391 li
916.008 342.551 li
917.703 347.719 li
919.395 344.113 li
921.09 339.695 li
922.781 341.117 li
924.473 342.43 li
926.168 343.734 li
927.859 342.301 li
929.551 341.57 li
931.246 342.461 li
932.938 343.422 li
934.629 343.309 li
936.324 342.719 li
938.016 342.898 li
939.707 343.434 li
941.402 343.551 li
943.094 343.586 li
944.789 343.496 li
946.48 343.613 li
948.172 343.922 li
949.867 343.805 li
951.559 343.723 li
953.25 343.793 li
954.945 344.102 li
956.637 344.531 li
958.328 344.633 li
960.023 344.625 li
961.715 344.512 li
963.406 344.445 li
965.102 344.73 li
966.793 345.238 li
968.488 373.039 li
@
144.094 397.328 mo
145.785 392.371 li
147.477 389.703 li
149.172 393.469 li
150.863 393.215 li
152.559 392.598 li
154.25 394.68 li
155.941 393.523 li
157.637 390.297 li
159.328 393.344 li
161.02 396.766 li
162.715 395.328 li
164.406 393.809 li
166.098 393.039 li
167.793 396.191 li
169.484 397.652 li
171.176 397.035 li
172.871 402.922 li
174.562 427.422 li
176.258 423.766 li
177.949 420.805 li
179.641 449.992 li
181.336 462.09 li
183.027 452.785 li
184.719 449.859 li
186.414 455.383 li
188.105 426.656 li
189.797 383.371 li
191.492 375.348 li
193.184 388.414 li
194.875 391.793 li
196.57 394.816 li
198.262 398.809 li
199.957 399.148 li
201.648 398.027 li
203.34 397.762 li
205.035 399.25 li
206.727 400.195 li
208.418 400.164 li
210.113 400.238 li
211.805 400.32 li
213.496 400.184 li
215.191 400.258 li
216.883 400.109 li
218.574 400.203 li
220.27 398.66 li
221.961 396.371 li
223.656 396.801 li
225.348 398.012 li
227.039 396.488 li
.0729076 .314366 1 0 cmyk
@
227.039 396.488 mo
228.734 394.047 li
230.426 395.066 li
232.117 397.219 li
233.812 397.867 li
235.504 396.164 li
237.195 392.781 li
238.891 395.035 li
240.582 397.578 li
242.273 397.719 li
243.969 397.344 li
245.66 397.023 li
247.355 395.629 li
249.047 394.094 li
250.738 397.055 li
252.434 402.504 li
254.125 421.617 li
255.816 431.59 li
257.512 432.512 li
259.203 441.93 li
260.895 431.148 li
262.59 416.25 li
264.281 425.324 li
265.973 414.125 li
267.668 399.848 li
269.359 402.828 li
271.055 395.465 li
272.746 394.207 li
274.438 392.578 li
276.133 393.742 li
277.824 398.789 li
279.516 399.254 li
281.211 398.637 li
282.902 397.512 li
284.594 398.402 li
286.289 399.711 li
287.98 400.004 li
289.672 400.062 li
291.367 400.043 li
293.059 400.098 li
294.754 400.047 li
296.445 399.383 li
298.137 398.703 li
299.832 398.633 li
301.523 398.32 li
303.215 395.84 li
304.91 395.457 li
306.602 396.945 li
308.293 397.426 li
309.988 397.438 li
@
309.988 397.438 mo
311.68 397.812 li
313.371 397.148 li
315.066 396.652 li
316.758 398.168 li
318.453 398.625 li
320.145 397.168 li
321.836 395.84 li
323.531 395.805 li
325.223 396.418 li
326.914 397.062 li
328.609 397.508 li
330.301 397.66 li
331.992 395.375 li
333.688 395.562 li
335.379 397.941 li
337.07 397.777 li
338.766 396.66 li
340.457 411.285 li
342.152 424.945 li
343.844 415.945 li
345.535 419.852 li
347.23 433.086 li
348.922 429.445 li
350.613 422.516 li
352.309 411.023 li
354 400.602 li
355.691 399.102 li
357.387 395.059 li
359.078 392.902 li
360.77 399.578 li
362.465 401.828 li
364.156 398.301 li
365.848 397.434 li
367.543 396.898 li
369.234 397.91 li
370.93 397.199 li
372.621 396.773 li
374.312 398.777 li
376.008 400.086 li
377.699 399.816 li
379.391 399.824 li
381.086 400.215 li
382.777 400.23 li
384.469 400.223 li
386.164 400.23 li
387.855 400.238 li
389.547 400.227 li
391.242 400.242 li
392.934 400.242 li
@
392.934 400.242 mo
394.629 400.238 li
398.012 400.238 li
399.707 400.254 li
401.398 400.258 li
403.09 400.258 li
404.785 398.945 li
406.477 396.219 li
408.168 397.027 li
409.863 398.523 li
411.555 397.109 li
413.246 398.121 li
414.941 398.367 li
416.633 395.273 li
418.328 394.23 li
420.02 396.344 li
421.711 397.406 li
423.406 395.586 li
425.098 396.762 li
426.789 397.133 li
428.484 407.23 li
430.176 419.344 li
431.867 418.797 li
433.562 419.391 li
435.254 420.082 li
436.945 423.684 li
438.641 422.363 li
440.332 404.891 li
442.027 394.004 li
443.719 405.82 li
445.41 414.371 li
447.105 405.277 li
448.797 396.027 li
450.488 400.234 li
452.184 402.543 li
453.875 399.367 li
455.566 400.316 li
457.262 400.352 li
458.953 400.281 li
460.645 400.312 li
462.34 400.305 li
464.031 400.344 li
465.727 400.484 li
467.418 400.398 li
469.109 399.461 li
470.805 397.906 li
472.496 397.297 li
474.188 397.727 li
475.883 393.863 li
@
475.883 393.863 mo
477.574 387.5 li
479.266 383.539 li
480.961 379.484 li
482.652 378.305 li
484.344 381.727 li
486.039 385.02 li
487.73 387.512 li
489.426 390.527 li
491.117 392.461 li
492.809 393.949 li
494.504 396.66 li
496.195 398.648 li
497.887 399.473 li
499.582 399.953 li
501.273 400.246 li
502.965 400.297 li
504.66 400.195 li
506.352 398.512 li
508.043 398.082 li
509.738 398.324 li
511.43 397.863 li
513.125 398.43 li
514.816 398.484 li
516.508 398.523 li
518.203 398.289 li
519.895 397.598 li
521.586 398.254 li
523.281 399.531 li
524.973 399.332 li
526.664 398.391 li
528.359 395.074 li
530.051 402.352 li
531.742 415.102 li
533.438 417.891 li
535.129 418.172 li
536.824 417.215 li
538.516 417.285 li
540.207 417.668 li
541.902 415.859 li
543.594 404.645 li
545.285 396.059 li
546.98 397.664 li
548.672 395.82 li
550.363 395.508 li
552.059 395.727 li
553.75 394.93 li
555.441 397.055 li
557.137 398.371 li
558.828 398.203 li
@
558.828 398.203 mo
560.523 399.078 li
562.215 399.527 li
563.906 398.957 li
565.602 398.953 li
567.293 399.898 li
568.984 399.852 li
570.68 398.922 li
572.371 398.855 li
574.062 398.059 li
575.758 398.156 li
577.449 398.957 li
579.141 398.625 li
580.836 397.797 li
582.527 397.766 li
584.223 398.66 li
585.914 398.93 li
587.605 398.523 li
589.301 398.387 li
590.992 398.402 li
592.684 398.703 li
594.379 399.348 li
596.07 398.961 li
597.762 398.969 li
599.457 398.105 li
601.148 396.812 li
602.84 401.344 li
604.535 411.273 li
606.227 416.434 li
607.922 418.574 li
609.613 422.414 li
611.305 418.355 li
613 411.641 li
614.691 404.664 li
616.383 396.922 li
618.078 394.805 li
619.77 399.668 li
621.461 402.219 li
623.156 399.965 li
624.848 400.332 li
626.539 400.371 li
628.234 400.395 li
629.926 400.402 li
633.312 400.402 li
635.004 400.398 li
636.699 400.395 li
638.391 400.391 li
640.082 400.398 li
641.777 400.398 li
@
641.777 400.398 mo
643.469 399.961 li
645.16 399.125 li
646.855 398.316 li
648.547 398.555 li
650.238 398.551 li
651.934 398.676 li
653.625 398.727 li
655.32 398.25 li
657.012 398.777 li
658.703 399.59 li
660.398 399.547 li
662.09 398.828 li
663.781 398.598 li
665.477 396.078 li
667.168 396.719 li
668.859 406.664 li
670.555 413.75 li
672.246 414.27 li
673.938 413.426 li
675.633 412.34 li
677.324 410.262 li
679.02 409.512 li
680.711 405.051 li
682.402 397.711 li
684.098 398.59 li
685.789 399.734 li
687.48 398.801 li
689.176 398.281 li
690.867 398.602 li
692.559 399.16 li
694.254 398.637 li
695.945 398.461 li
697.637 398.852 li
699.332 399.496 li
701.023 399.281 li
702.719 399.605 li
704.41 400.215 li
706.102 400.371 li
707.797 400.223 li
709.488 399.789 li
711.18 399.52 li
712.875 399.578 li
714.566 400.027 li
716.258 400.219 li
717.953 400.238 li
719.645 400.117 li
721.336 399.812 li
723.031 399.898 li
724.723 399.246 li
@
724.723 399.246 mo
726.414 399.062 li
728.109 398.062 li
729.801 397.387 li
731.496 397.555 li
733.188 398.195 li
734.879 399.078 li
736.574 398.324 li
738.266 398.75 li
739.957 399.215 li
741.652 398.68 li
743.344 398.652 li
745.035 398.449 li
746.73 397.176 li
748.422 397.035 li
750.113 398.074 li
751.809 398.539 li
753.5 398.043 li
755.195 398.805 li
756.887 399.633 li
758.578 398.82 li
760.273 397.844 li
761.965 403.461 li
763.656 410.996 li
765.352 411.688 li
767.043 411.914 li
768.734 411.801 li
770.43 411.355 li
772.121 413.441 li
773.812 410.977 li
775.508 409.48 li
777.199 405.531 li
778.895 397.66 li
780.586 397.926 li
782.277 399.664 li
783.973 399.797 li
785.664 399.559 li
787.355 399.441 li
789.051 399.801 li
790.742 400.211 li
792.434 400.453 li
794.129 400.277 li
795.82 399.922 li
797.512 399.938 li
799.207 400.293 li
800.898 400.516 li
802.594 400.359 li
804.285 400.027 li
805.977 399.945 li
807.672 400.242 li
@
807.672 400.242 mo
809.363 400.512 li
811.055 400.559 li
812.75 400.363 li
814.441 400.09 li
816.133 400.008 li
817.828 400.23 li
819.52 400.422 li
821.211 400.477 li
822.906 400.453 li
824.598 400.281 li
826.293 400 li
827.984 399.566 li
829.676 398.992 li
831.371 399.023 li
833.062 398.676 li
834.754 398.383 li
836.449 397.578 li
838.141 397.891 li
839.832 399.359 li
841.527 398.656 li
843.219 398.516 li
844.91 399.348 li
846.605 398.844 li
848.297 398.805 li
849.992 398.664 li
851.684 397.414 li
853.375 396.219 li
855.07 396.945 li
856.762 398.621 li
858.453 397.453 li
860.148 397.805 li
861.84 399.418 li
863.531 399.164 li
865.227 399.371 li
866.918 399.402 li
868.609 398.395 li
870.305 397.98 li
871.996 398.867 li
873.691 399.234 li
875.383 397.926 li
877.074 398.398 li
878.77 399.848 li
880.461 399.77 li
882.152 399.371 li
883.848 398.906 li
885.539 399.055 li
887.23 399.527 li
888.926 399.535 li
890.617 399.328 li
@
890.617 399.328 mo
892.309 398.625 li
894.004 398.531 li
895.695 399.266 li
897.391 399.734 li
899.082 402.605 li
900.773 408.516 li
902.469 406.016 li
904.16 405.691 li
905.852 413.531 li
907.547 413.625 li
909.238 409.867 li
910.93 410.512 li
912.625 411.508 li
914.316 403.77 li
916.008 396.238 li
917.703 397.586 li
919.395 399.047 li
921.09 398.895 li
922.781 399.465 li
924.473 399.805 li
926.168 399.859 li
927.859 399.582 li
929.551 400.004 li
931.246 400.281 li
932.938 400.336 li
934.629 400.293 li
936.324 400.238 li
938.016 400.473 li
939.707 400.52 li
941.402 400.359 li
943.094 400.266 li
944.789 400.336 li
946.48 400.457 li
948.172 400.426 li
949.867 400.297 li
951.559 400.258 li
953.25 400.34 li
954.945 400.477 li
956.637 400.445 li
958.328 400.281 li
960.023 400.227 li
961.715 400.254 li
963.406 400.367 li
965.102 400.523 li
966.793 400.469 li
968.488 400.492 li
@
144.094 392.828 mo
145.785 390.871 li
147.477 393.215 li
149.172 392.18 li
150.863 392.582 li
152.559 393.336 li
154.25 391.75 li
155.941 388.68 li
157.637 390.289 li
159.328 390.422 li
161.02 391.789 li
162.715 394.883 li
164.406 393.824 li
166.098 402.465 li
167.793 398.703 li
169.484 391.535 li
171.176 394.387 li
172.871 393.328 li
174.562 394.012 li
176.258 393.02 li
177.949 388.289 li
179.641 389.305 li
181.336 393.664 li
183.027 394.238 li
184.719 391.836 li
186.414 401.273 li
188.105 401.09 li
189.797 390.41 li
191.492 390.734 li
193.184 390.516 li
194.875 393.164 li
196.57 396.926 li
198.262 398.629 li
199.957 398.914 li
201.648 398.867 li
203.34 398.695 li
205.035 399.543 li
206.727 400.211 li
208.418 400.508 li
210.113 400.559 li
211.805 400.52 li
213.496 400.441 li
215.191 400.477 li
218.574 400.508 li
220.27 399.438 li
221.961 396.57 li
223.656 396.211 li
225.348 397.383 li
227.039 395.984 li
.613703 .976837 .0447395 .00808728 cmyk
@
227.039 395.984 mo
228.734 392.812 li
230.426 392.699 li
232.117 396.086 li
233.812 397.836 li
235.504 397.055 li
237.195 393.559 li
238.891 393.02 li
240.582 395.637 li
242.273 397.641 li
243.969 398.121 li
245.66 396.367 li
247.355 394.391 li
249.047 394.91 li
250.738 395.652 li
252.434 391.641 li
254.125 393.918 li
255.816 394.441 li
257.512 389.68 li
259.203 393.457 li
260.895 395.621 li
262.59 394.062 li
264.281 396.641 li
265.973 398.262 li
267.668 396.5 li
269.359 396.434 li
271.055 397.754 li
272.746 398.93 li
274.438 398.582 li
276.133 398.082 li
277.824 399.031 li
279.516 399.941 li
281.211 400.23 li
282.902 400.316 li
284.594 400.383 li
286.289 400.375 li
287.98 400.445 li
289.672 400.48 li
291.367 400.543 li
293.059 400.562 li
294.754 400.527 li
296.445 400.41 li
298.137 400.277 li
299.832 400.191 li
301.523 397.109 li
303.215 395.73 li
304.91 397.617 li
306.602 397.285 li
308.293 396.078 li
309.988 394.891 li
@
309.988 394.891 mo
311.68 395.926 li
313.371 397.301 li
315.066 395.516 li
316.758 394.906 li
318.453 395.047 li
320.145 395.668 li
321.836 396.965 li
323.531 396.504 li
325.223 398.52 li
326.914 397.992 li
328.609 395.617 li
330.301 395.832 li
331.992 398.125 li
333.688 398.281 li
335.379 395.684 li
337.07 395.707 li
338.766 396.68 li
340.457 398.16 li
342.152 398.793 li
343.844 396.848 li
345.535 395.434 li
347.23 393.961 li
348.922 395.5 li
350.613 395.641 li
352.309 393.879 li
354 392.133 li
355.691 392.973 li
357.387 396.941 li
359.078 396.125 li
360.77 396.219 li
362.465 397.855 li
364.156 398.859 li
365.848 397.773 li
367.543 396.668 li
369.234 397.578 li
370.93 399.121 li
372.621 399.727 li
374.312 399.898 li
376.008 400.191 li
377.699 400.16 li
379.391 400.348 li
381.086 400.469 li
382.777 400.516 li
384.469 400.543 li
386.164 400.52 li
387.855 400.547 li
389.547 400.598 li
391.242 400.609 li
392.934 400.594 li
@
392.934 400.594 mo
394.629 400.582 li
396.32 400.586 li
398.012 400.562 li
399.707 400.562 li
401.398 400.566 li
403.09 400.559 li
404.785 398.684 li
406.477 396.344 li
408.168 396.59 li
409.863 397.582 li
411.555 397.961 li
413.246 398.375 li
414.941 398.633 li
416.633 398.57 li
418.328 398.008 li
420.02 397.195 li
421.711 396.496 li
423.406 395.914 li
425.098 396.355 li
426.789 398.316 li
428.484 398.441 li
430.176 395.875 li
431.867 396.441 li
433.562 396.07 li
435.254 396.242 li
436.945 398.824 li
438.641 397.109 li
440.332 393.184 li
442.027 390.688 li
443.719 393.176 li
445.41 394.582 li
447.105 395.402 li
448.797 398.438 li
450.488 399.316 li
452.184 399.129 li
453.875 398.59 li
455.566 399.43 li
457.262 400.43 li
458.953 400.512 li
460.645 400.57 li
462.34 400.543 li
464.031 400.5 li
465.727 400.484 li
467.418 400.383 li
469.109 400.176 li
470.805 399.586 li
472.496 398.5 li
474.188 396.254 li
475.883 395.141 li
@
475.883 395.145 mo
477.574 395.441 li
479.266 397.258 li
480.961 397.562 li
482.652 394.016 li
484.344 394.703 li
486.039 398.203 li
487.73 399.32 li
489.426 398.246 li
491.117 398.145 li
492.809 398.676 li
494.504 399.039 li
496.195 399.766 li
497.887 399.953 li
499.582 400.309 li
502.965 400.316 li
504.66 400.23 li
506.352 399.133 li
508.043 398.238 li
509.738 398.641 li
511.43 398.473 li
513.125 397.375 li
514.816 396.621 li
516.508 396.906 li
518.203 397.562 li
519.895 398.559 li
521.586 398.574 li
523.281 397.977 li
524.973 397.836 li
526.664 397.527 li
528.359 397.023 li
530.051 397.246 li
531.742 395.145 li
533.438 394.922 li
535.129 397.469 li
536.824 398.074 li
538.516 398.539 li
540.207 395.648 li
541.902 394.426 li
543.594 394.859 li
545.285 395.719 li
546.98 397.574 li
548.672 397.562 li
550.363 398.5 li
552.059 399.695 li
553.75 399.461 li
555.441 399.152 li
557.137 399.707 li
558.828 399.504 li
@
558.828 399.504 mo
560.523 399.387 li
562.215 400.062 li
563.906 400.105 li
565.602 399.895 li
567.293 400.191 li
568.984 399.668 li
570.68 398.73 li
572.371 398.582 li
574.062 398.414 li
575.758 397.938 li
577.449 397.73 li
579.141 398.43 li
580.836 399.379 li
582.527 399.043 li
584.223 397.988 li
585.914 397.199 li
587.605 397.133 li
589.301 397.816 li
590.992 397.629 li
592.684 397.887 li
594.379 398.266 li
596.07 398.16 li
597.762 398.301 li
599.457 398.531 li
601.148 398.91 li
602.84 396.297 li
604.535 396.332 li
606.227 399.012 li
607.922 398.246 li
609.613 399.285 li
611.305 402.172 li
613 400.852 li
614.691 397.762 li
616.383 398.594 li
618.078 398.422 li
619.77 397.152 li
621.461 397.836 li
623.156 398.793 li
624.848 399.711 li
626.539 400.113 li
628.234 400.41 li
629.926 400.438 li
631.621 400.484 li
633.312 400.543 li
635.004 400.57 li
636.699 400.582 li
638.391 400.586 li
640.082 400.586 li
641.777 400.594 li
@
641.777 400.594 mo
643.469 400.371 li
645.16 399.652 li
646.855 398.941 li
648.547 398.184 li
650.238 397.652 li
651.934 398.281 li
653.625 399.051 li
655.32 398.598 li
657.012 397.875 li
658.703 397.527 li
660.398 397.945 li
662.09 398.465 li
663.781 397.727 li
665.477 398.059 li
667.168 397.762 li
668.859 397.551 li
670.555 397.988 li
672.246 398.539 li
673.938 399.098 li
675.633 397.953 li
677.324 398.734 li
679.02 399.328 li
680.711 398.176 li
682.402 397.598 li
684.098 398.199 li
685.789 398.758 li
687.48 399.395 li
689.176 399.707 li
690.867 399.551 li
692.559 398.695 li
694.254 398.09 li
695.945 398.242 li
697.637 398.543 li
699.332 399.84 li
701.023 400.215 li
702.719 400.219 li
704.41 400.344 li
706.102 400.445 li
707.797 400.543 li
709.488 400.477 li
711.18 400.273 li
712.875 400.172 li
714.566 400.379 li
716.258 400.422 li
717.953 400.453 li
719.645 400.512 li
721.336 400.406 li
723.031 400.406 li
724.723 400.18 li
@
724.723 400.18 mo
726.414 399.398 li
728.109 398.824 li
729.801 398.961 li
731.496 398.93 li
733.188 398.902 li
734.879 398.918 li
736.574 398.086 li
738.266 397.824 li
739.957 398.457 li
741.652 399.285 li
743.344 399.352 li
745.035 398.793 li
746.73 398.84 li
748.422 398.832 li
750.113 398.715 li
751.809 397.887 li
753.5 396.859 li
755.195 396.953 li
756.887 398.387 li
758.578 399.008 li
760.273 398.574 li
761.965 399.066 li
763.656 398.922 li
765.352 399.074 li
767.043 399.523 li
768.734 399.449 li
770.43 398.402 li
772.121 399.414 li
773.812 399.648 li
775.508 396.684 li
777.199 396.332 li
778.895 398.223 li
780.586 399.25 li
782.277 399.594 li
783.973 400.066 li
785.664 400.172 li
787.355 400.41 li
789.051 400.402 li
790.742 400.477 li
792.434 400.602 li
794.129 400.617 li
795.82 400.527 li
797.512 400.52 li
799.207 400.566 li
800.898 400.547 li
802.594 400.566 li
804.285 400.508 li
805.977 400.465 li
807.672 400.531 li
@
807.672 400.531 mo
809.363 400.555 li
811.055 400.559 li
812.75 400.574 li
814.441 400.504 li
816.133 400.492 li
817.828 400.562 li
819.52 400.52 li
821.211 400.492 li
822.906 400.57 li
824.598 400.613 li
826.293 399.91 li
827.984 398.875 li
829.676 399.027 li
831.371 399.621 li
833.062 399.246 li
834.754 399.031 li
836.449 399.273 li
838.141 399.285 li
839.832 399.18 li
841.527 398.902 li
843.219 398.387 li
844.91 398.387 li
846.605 399.176 li
848.297 399.562 li
849.992 399.355 li
851.684 399.109 li
853.375 399.055 li
855.07 398.531 li
856.762 398.5 li
858.453 398.16 li
860.148 397.906 li
861.84 398.836 li
863.531 399.465 li
865.227 399.676 li
866.918 399.535 li
868.609 399.258 li
870.305 398.848 li
871.996 398.645 li
873.691 398.703 li
875.383 398.379 li
877.074 398.273 li
878.77 398.945 li
880.461 399.445 li
882.152 399.375 li
883.848 398.613 li
885.539 398.449 li
887.23 398.973 li
888.926 399.254 li
890.617 399.379 li
@
890.617 399.383 mo
892.309 398.883 li
894.004 398.645 li
895.695 399.082 li
897.391 399.418 li
899.082 399.117 li
900.773 399.359 li
902.469 399.344 li
904.16 398.508 li
905.852 398.488 li
907.547 398.941 li
909.238 398.637 li
910.93 398.262 li
912.625 398.867 li
914.316 398.508 li
916.008 398.105 li
917.703 398.25 li
919.395 399 li
921.09 400.148 li
922.781 399.965 li
924.473 399.93 li
926.168 400.219 li
927.859 400.082 li
929.551 400.195 li
931.246 400.238 li
932.938 400.273 li
934.629 400.449 li
936.324 400.5 li
938.016 400.555 li
939.707 400.574 li
941.402 400.555 li
943.094 400.523 li
944.789 400.566 li
946.48 400.598 li
948.172 400.582 li
949.867 400.555 li
951.559 400.523 li
953.25 400.562 li
954.945 400.566 li
956.637 400.562 li
958.328 400.539 li
960.023 400.488 li
961.715 400.488 li
963.406 400.539 li
965.102 400.559 li
966.793 400.559 li
968.488 400.609 li
@
144.094 395.48 mo
145.785 393.301 li
147.477 392.219 li
149.172 394.086 li
150.863 396.008 li
152.559 396.098 li
154.25 395.766 li
155.941 394.195 li
157.637 393.039 li
159.328 395.328 li
161.02 394.699 li
162.715 394.961 li
164.406 393.062 li
166.098 392.531 li
167.793 395.883 li
169.484 394.332 li
171.176 394.398 li
172.871 395.453 li
174.562 396.117 li
176.258 398.348 li
179.641 391.387 li
181.336 392.844 li
183.027 394.566 li
184.719 388.078 li
186.414 383.031 li
188.105 391.043 li
189.797 392.055 li
191.492 388.473 li
193.184 389.438 li
194.875 392.531 li
196.57 397.199 li
198.262 399.004 li
199.957 399.852 li
201.648 400.199 li
203.34 400.172 li
205.035 400.285 li
206.727 400.434 li
208.418 400.539 li
210.113 400.52 li
211.805 400.438 li
213.496 400.488 li
215.191 400.527 li
216.883 400.504 li
218.574 400.488 li
220.27 398.367 li
221.961 397.383 li
223.656 396.375 li
225.348 395.699 li
227.039 394.449 li
.598047 .119753 1 .00653086 cmyk
@
227.039 394.449 mo
228.734 393.465 li
230.426 397.137 li
232.117 396.73 li
233.812 395.969 li
235.504 394.664 li
237.195 393.992 li
238.891 398.238 li
240.582 397.688 li
242.273 396.262 li
243.969 395.766 li
245.66 395.223 li
247.355 397.238 li
249.047 395.188 li
250.738 396.012 li
252.434 396.98 li
254.125 396.242 li
255.816 396.445 li
257.512 393.875 li
259.203 393.746 li
260.895 395.5 li
262.59 393.672 li
264.281 386.336 li
265.973 384.707 li
267.668 391.887 li
269.359 394.523 li
271.055 394.488 li
272.746 395.301 li
274.438 397.07 li
276.133 399.906 li
277.824 399.895 li
279.516 399.938 li
281.211 400.078 li
282.902 399.922 li
284.594 400.098 li
286.289 400.473 li
287.98 400.562 li
289.672 400.562 li
291.367 400.508 li
293.059 400.508 li
294.754 400.488 li
296.445 400.434 li
298.137 400.422 li
299.832 400.418 li
301.523 399.438 li
303.215 396.781 li
304.91 397.293 li
306.602 397.742 li
308.293 397.777 li
309.988 399.125 li
@
309.988 399.125 mo
311.68 397.402 li
313.371 397.508 li
315.066 397.223 li
316.758 397.355 li
318.453 398.734 li
320.145 397.09 li
321.836 397.703 li
323.531 397.289 li
325.223 397.23 li
326.914 398.91 li
328.609 397.566 li
330.301 398.082 li
331.992 397.48 li
333.688 397.348 li
335.379 399.164 li
337.07 398.316 li
338.766 398.133 li
340.457 398.855 li
342.152 399.031 li
343.844 397.488 li
345.535 394.055 li
347.23 395.145 li
348.922 396.934 li
350.613 390.82 li
352.309 384.098 li
354 387.363 li
355.691 394.633 li
357.387 397.031 li
359.078 396.734 li
360.77 396.293 li
362.465 397.652 li
364.156 399.277 li
365.848 399.719 li
367.543 399.852 li
369.234 399.902 li
370.93 399.949 li
372.621 400.148 li
374.312 400.379 li
376.008 400.344 li
377.699 400.422 li
379.391 400.539 li
381.086 400.555 li
382.777 400.566 li
384.469 400.566 li
386.164 400.559 li
387.855 400.555 li
389.547 400.566 li
391.242 400.555 li
392.934 400.551 li
@
392.934 400.551 mo
394.629 400.543 li
396.32 400.547 li
398.012 400.543 li
399.707 400.527 li
401.398 400.547 li
403.09 400.57 li
404.785 399.77 li
406.477 397.898 li
408.168 397.555 li
409.863 397.715 li
411.555 397.363 li
413.246 397.91 li
414.941 398.91 li
416.633 399.605 li
418.328 398.574 li
420.02 398.391 li
421.711 398.488 li
423.406 397.617 li
425.098 398.086 li
426.789 398.16 li
428.484 398.59 li
430.176 399.578 li
431.867 398.848 li
433.562 395.887 li
435.254 392.234 li
436.945 390.922 li
438.641 395.078 li
440.332 397.688 li
442.027 392.824 li
443.719 389.055 li
445.41 393.188 li
447.105 397.242 li
448.797 398.051 li
450.488 399.668 li
452.184 400.137 li
453.875 400.152 li
455.566 400.387 li
457.262 400.555 li
458.953 400.52 li
460.645 400.52 li
462.34 400.535 li
464.031 400.582 li
465.727 400.613 li
467.418 400.602 li
469.109 400.473 li
470.805 400.012 li
472.496 398.832 li
474.188 397.727 li
475.883 398.07 li
@
475.883 398.07 mo
477.574 398.191 li
479.266 397.48 li
480.961 396.402 li
482.652 394.207 li
484.344 393.047 li
486.039 394.09 li
487.73 394.773 li
489.426 394.449 li
491.117 394.793 li
492.809 396.82 li
494.504 398.852 li
496.195 399.059 li
497.887 399.508 li
499.582 400.336 li
501.273 400.312 li
502.965 400.387 li
504.66 400.531 li
506.352 399.531 li
508.043 398.109 li
509.738 397.902 li
511.43 397.977 li
513.125 398.301 li
514.816 399.113 li
516.508 399 li
518.203 398.93 li
519.895 398.363 li
521.586 398.445 li
523.281 399.012 li
524.973 398.957 li
526.664 399.25 li
528.359 398.465 li
530.051 398.977 li
531.742 400.008 li
533.438 400.062 li
535.129 399.285 li
536.824 398.379 li
538.516 394.078 li
540.207 387.883 li
541.902 386.973 li
543.594 391.895 li
545.285 396.895 li
546.98 398.273 li
548.672 399.32 li
550.363 399.828 li
552.059 399.066 li
553.75 398.934 li
555.441 399.926 li
557.137 400.238 li
558.828 400.262 li
@
558.828 400.262 mo
560.523 400.512 li
562.215 400.461 li
563.906 400.332 li
565.602 400.391 li
567.293 400.512 li
568.984 400.297 li
570.68 398.781 li
572.371 398.242 li
574.062 398.617 li
575.758 398.324 li
577.449 398.754 li
579.141 398.594 li
580.836 398.758 li
582.527 398.887 li
584.223 398.906 li
585.914 399.332 li
587.605 398.727 li
589.301 398.945 li
590.992 398.746 li
592.684 398.664 li
594.379 399.238 li
596.07 398.777 li
597.762 399.098 li
599.457 398.973 li
601.148 398.883 li
602.84 399.547 li
604.535 399.715 li
606.227 399.121 li
607.922 398.18 li
609.613 397.676 li
611.305 395.762 li
613 395.398 li
614.691 398.07 li
616.383 399.539 li
618.078 398.688 li
619.77 398.078 li
621.461 399.336 li
623.156 400.297 li
624.848 400.449 li
626.539 400.559 li
628.234 400.566 li
629.926 400.582 li
631.621 400.566 li
633.312 400.535 li
635.004 400.559 li
636.699 400.59 li
638.391 400.598 li
640.082 400.594 li
641.777 400.582 li
@
641.777 400.586 mo
643.469 400.535 li
645.16 399.5 li
646.855 398.664 li
648.547 399.105 li
650.238 399.527 li
651.934 399.086 li
653.625 399.191 li
655.32 398.938 li
657.012 398.824 li
658.703 399.766 li
660.398 399.414 li
662.09 399.379 li
663.781 398.98 li
665.477 398.902 li
667.168 399.465 li
668.859 398.648 li
670.555 398.156 li
672.246 398.977 li
673.938 397.895 li
675.633 395.812 li
677.324 395.676 li
679.02 397.512 li
680.711 399.141 li
682.402 397.879 li
684.098 397.199 li
685.789 398.922 li
687.48 400.074 li
689.176 399.957 li
690.867 399.645 li
692.559 399.809 li
694.254 400.117 li
695.945 400.02 li
697.637 400.078 li
699.332 400.312 li
701.023 400.473 li
702.719 400.543 li
704.41 400.57 li
706.102 400.555 li
707.797 400.492 li
709.488 400.438 li
711.18 400.488 li
712.875 400.559 li
714.566 400.582 li
716.258 400.574 li
717.953 400.566 li
719.645 400.508 li
721.336 400.523 li
723.031 400.574 li
724.723 400.039 li
@
724.723 400.039 mo
726.414 399.391 li
728.109 399.441 li
729.801 399.312 li
731.496 399.008 li
733.188 398.926 li
734.879 398.992 li
736.574 398.832 li
738.266 398.676 li
739.957 398.703 li
741.652 398.812 li
743.344 399.102 li
745.035 399.594 li
746.73 399.723 li
748.422 398.887 li
750.113 399.223 li
751.809 399.18 li
753.5 399.133 li
755.195 400.039 li
756.887 399.484 li
758.578 399.359 li
760.273 398.875 li
761.965 398.359 li
763.656 399.199 li
765.352 399.16 li
767.043 398.594 li
768.734 398.68 li
770.43 398.344 li
773.812 395.453 li
775.508 395.191 li
777.199 397.082 li
778.895 398.125 li
780.586 398.418 li
782.277 399.508 li
783.973 399.902 li
785.664 400.191 li
787.355 400.324 li
789.051 400.418 li
790.742 400.559 li
792.434 400.59 li
794.129 400.508 li
795.82 400.312 li
797.512 400.297 li
799.207 400.504 li
800.898 400.602 li
802.594 400.578 li
804.285 400.508 li
805.977 400.512 li
807.672 400.586 li
@
807.672 400.586 mo
809.363 400.605 li
811.055 400.605 li
812.75 400.602 li
814.441 400.574 li
816.133 400.523 li
817.828 400.523 li
819.52 400.59 li
821.211 400.613 li
822.906 400.594 li
824.598 400.559 li
826.293 400.113 li
827.984 399.586 li
829.676 398.945 li
831.371 398.633 li
833.062 399.402 li
834.754 399.629 li
836.449 399.543 li
838.141 399.195 li
839.832 399.062 li
841.527 399.117 li
843.219 398.613 li
844.91 398.98 li
846.605 399.055 li
848.297 398.969 li
849.992 399.613 li
851.684 399.738 li
853.375 399.312 li
855.07 399.133 li
856.762 399.41 li
858.453 399.164 li
860.148 399.004 li
861.84 399.207 li
863.531 399.16 li
865.227 399.305 li
866.918 399.652 li
868.609 399.992 li
870.305 399.223 li
871.996 399.109 li
873.691 399.562 li
875.383 399.312 li
877.074 399.629 li
878.77 399.387 li
880.461 399.43 li
882.152 399.648 li
883.848 399.512 li
885.539 399.957 li
887.23 399.328 li
888.926 399.266 li
890.617 399.633 li
@
890.617 399.633 mo
892.309 399.527 li
894.004 399.906 li
895.695 399.641 li
897.391 399.559 li
899.082 399.953 li
900.773 399.941 li
902.469 399.621 li
904.16 397.676 li
905.852 396.504 li
907.547 398.461 li
909.238 397.684 li
910.93 394.383 li
912.625 394.438 li
914.316 397.051 li
916.008 399.176 li
917.703 400.039 li
919.395 399.973 li
921.09 400.004 li
922.781 400.367 li
924.473 400.48 li
926.168 400.395 li
927.859 400.375 li
929.551 400.461 li
931.246 400.543 li
932.938 400.566 li
934.629 400.504 li
936.324 400.492 li
938.016 400.566 li
939.707 400.578 li
941.402 400.52 li
943.094 400.484 li
944.789 400.535 li
946.48 400.551 li
948.172 400.559 li
949.867 400.559 li
951.559 400.543 li
953.25 400.586 li
954.945 400.617 li
956.637 400.605 li
958.328 400.566 li
960.023 400.527 li
961.715 400.535 li
963.406 400.559 li
965.102 400.574 li
966.793 400.535 li
968.488 400.562 li
@
179.199 310.801 mo
186.398 310.801 li
.627314 0 1 0 cmyk
@
182.801 314.398 mo
182.801 307.199 li
@
180.801 310.801 mo
188 310.801 li
@
184.398 314.398 mo
184.398 307.199 li
@
183.199 310.801 mo
190.398 310.801 li
@
186.801 314.398 mo
186.801 307.199 li
@
184.801 310.801 mo
192 310.801 li
@
188.398 314.398 mo
188.398 307.199 li
@
186.398 310.801 mo
193.602 310.801 li
@
190 314.398 mo
190 307.199 li
@
188 310.801 mo
195.199 310.801 li
@
191.602 314.398 mo
191.602 307.199 li
@
189.602 310.801 mo
196.801 310.801 li
@
193.199 314.398 mo
193.199 307.199 li
@
191.199 310.801 mo
198.398 310.801 li
@
194.801 314.398 mo
194.801 307.199 li
@
192.801 310.801 mo
200 310.801 li
@
196.398 314.398 mo
196.398 307.199 li
@
194.398 310.801 mo
201.602 310.801 li
@
198 314.398 mo
198 307.199 li
@
196 310.801 mo
203.199 310.801 li
@
199.602 314.398 mo
199.602 307.199 li
@
198.398 310.801 mo
205.602 310.801 li
@
202 314.398 mo
202 307.199 li
@
200 310.801 mo
207.199 310.801 li
@
203.602 314.398 mo
203.602 307.199 li
@
201.602 310.801 mo
208.801 310.801 li
@
205.199 314.398 mo
205.199 307.199 li
@
203.199 310.801 mo
210.398 310.801 li
@
206.801 314.398 mo
206.801 307.199 li
@
204.801 310.801 mo
212 310.801 li
@
208.398 314.398 mo
208.398 307.199 li
@
206.398 310.801 mo
213.602 310.801 li
@
210 314.398 mo
210 307.199 li
@
208 310.801 mo
215.199 310.801 li
@
211.602 314.398 mo
211.602 307.199 li
@
209.602 310.801 mo
216.801 310.801 li
@
213.199 314.398 mo
213.199 307.199 li
@
211.199 310.801 mo
218.398 310.801 li
@
214.801 314.398 mo
214.801 307.199 li
@
213.602 310.801 mo
220.801 310.801 li
@
217.199 314.398 mo
217.199 307.199 li
@
215.199 310.801 mo
222.398 310.801 li
@
218.801 314.398 mo
218.801 307.199 li
@
216.801 310.801 mo
224 310.801 li
@
220.398 314.398 mo
220.398 307.199 li
@
257.602 310.801 mo
264.801 310.801 li
@
261.199 314.398 mo
261.199 307.199 li
@
259.199 310.801 mo
266.398 310.801 li
@
262.801 314.398 mo
262.801 307.199 li
@
260.801 310.801 mo
268 310.801 li
@
264.398 314.398 mo
264.398 307.199 li
@
262.398 310.801 mo
269.602 310.801 li
@
266 314.398 mo
266 307.199 li
@
264 310.801 mo
271.199 310.801 li
@
267.602 314.398 mo
267.602 307.199 li
@
265.602 310.801 mo
272.801 310.801 li
@
269.199 314.398 mo
269.199 307.199 li
@
267.199 310.801 mo
274.398 310.801 li
@
270.801 314.398 mo
270.801 307.199 li
@
268.801 310.801 mo
276 310.801 li
@
272.398 314.398 mo
272.398 307.199 li
@
271.199 310.801 mo
278.398 310.801 li
@
274.801 314.398 mo
274.801 307.199 li
@
272.801 310.801 mo
280 310.801 li
@
276.398 314.398 mo
276.398 307.199 li
@
274.398 310.801 mo
281.602 310.801 li
@
278 314.398 mo
278 307.199 li
@
276 310.801 mo
283.199 310.801 li
@
279.602 314.398 mo
279.602 307.199 li
@
277.602 310.801 mo
284.801 310.801 li
@
281.199 314.398 mo
281.199 307.199 li
@
279.199 310.801 mo
286.398 310.801 li
@
282.801 314.398 mo
282.801 307.199 li
@
280.801 310.801 mo
288 310.801 li
@
284.398 314.398 mo
284.398 307.199 li
@
282.398 310.801 mo
289.602 310.801 li
@
286 314.398 mo
286 307.199 li
@
284 310.801 mo
291.199 310.801 li
@
287.602 314.398 mo
287.602 307.199 li
@
286.398 310.801 mo
293.602 310.801 li
@
290 314.398 mo
290 307.199 li
@
288 310.801 mo
295.199 310.801 li
@
291.602 314.398 mo
291.602 307.199 li
@
289.602 310.801 mo
296.801 310.801 li
@
293.199 314.398 mo
293.199 307.199 li
@
291.199 310.801 mo
298.398 310.801 li
@
294.801 314.398 mo
294.801 307.199 li
@
292.801 310.801 mo
300 310.801 li
@
296.398 314.398 mo
296.398 307.199 li
@
294.398 310.801 mo
301.602 310.801 li
@
298 314.398 mo
298 307.199 li
@
296 310.801 mo
303.199 310.801 li
@
299.602 314.398 mo
299.602 307.199 li
@
297.602 310.801 mo
304.801 310.801 li
@
301.199 314.398 mo
301.199 307.199 li
@
345.602 310.801 mo
352.801 310.801 li
@
349.199 314.398 mo
349.199 307.199 li
@
347.199 310.801 mo
354.398 310.801 li
@
350.801 314.398 mo
350.801 307.199 li
@
348.801 310.801 mo
356 310.801 li
@
352.398 314.398 mo
352.398 307.199 li
@
350.398 310.801 mo
357.602 310.801 li
@
354 314.398 mo
354 307.199 li
@
352 310.801 mo
359.199 310.801 li
@
355.602 314.398 mo
355.602 307.199 li
@
353.602 310.801 mo
360.801 310.801 li
@
357.199 314.398 mo
357.199 307.199 li
@
355.199 310.801 mo
362.398 310.801 li
@
358.801 314.398 mo
358.801 307.199 li
@
356.801 310.801 mo
364 310.801 li
@
360.398 314.398 mo
360.398 307.199 li
@
359.199 310.801 mo
366.398 310.801 li
@
362.801 314.398 mo
362.801 307.199 li
@
360.801 310.801 mo
368 310.801 li
@
364.398 314.398 mo
364.398 307.199 li
@
362.398 310.801 mo
369.602 310.801 li
@
366 314.398 mo
366 307.199 li
@
364 310.801 mo
371.199 310.801 li
@
367.602 314.398 mo
367.602 307.199 li
@
365.602 310.801 mo
372.801 310.801 li
@
369.199 314.398 mo
369.199 307.199 li
@
367.199 310.801 mo
374.398 310.801 li
@
370.801 314.398 mo
370.801 307.199 li
@
368.801 310.801 mo
376 310.801 li
@
372.398 314.398 mo
372.398 307.199 li
@
370.398 310.801 mo
377.602 310.801 li
@
374 314.398 mo
374 307.199 li
@
372.801 310.801 mo
380 310.801 li
@
376.398 314.398 mo
376.398 307.199 li
@
374.398 310.801 mo
381.602 310.801 li
@
378 314.398 mo
378 307.199 li
@
376 310.801 mo
383.199 310.801 li
@
379.602 314.398 mo
379.602 307.199 li
@
377.602 310.801 mo
384.801 310.801 li
@
381.199 314.398 mo
381.199 307.199 li
@
379.199 310.801 mo
386.398 310.801 li
@
382.801 314.398 mo
382.801 307.199 li
@
380.801 310.801 mo
388 310.801 li
@
384.398 314.398 mo
384.398 307.199 li
@
382.398 310.801 mo
389.602 310.801 li
@
386 314.398 mo
386 307.199 li
@
384 310.801 mo
391.199 310.801 li
@
387.602 314.398 mo
387.602 307.199 li
@
385.602 310.801 mo
392.801 310.801 li
@
389.199 314.398 mo
389.199 307.199 li
@
388 310.801 mo
395.199 310.801 li
@
391.602 314.398 mo
391.602 307.199 li
@
389.602 310.801 mo
396.801 310.801 li
@
393.199 314.398 mo
393.199 307.199 li
@
391.199 310.801 mo
398.398 310.801 li
@
394.801 314.398 mo
394.801 307.199 li
@
392.801 310.801 mo
400 310.801 li
@
396.398 314.398 mo
396.398 307.199 li
@
394.398 310.801 mo
401.602 310.801 li
@
398 314.398 mo
398 307.199 li
@
396 310.801 mo
403.199 310.801 li
@
399.602 314.398 mo
399.602 307.199 li
@
397.602 310.801 mo
404.801 310.801 li
@
401.199 314.398 mo
401.199 307.199 li
@
399.199 310.801 mo
406.398 310.801 li
@
402.801 314.398 mo
402.801 307.199 li
@
400.801 310.801 mo
408 310.801 li
@
404.398 314.398 mo
404.398 307.199 li
@
435.199 310.801 mo
442.398 310.801 li
@
438.801 314.398 mo
438.801 307.199 li
@
436.801 310.801 mo
444 310.801 li
@
440.398 314.398 mo
440.398 307.199 li
@
438.398 310.801 mo
445.602 310.801 li
@
442 314.398 mo
442 307.199 li
@
440 310.801 mo
447.199 310.801 li
@
443.602 314.398 mo
443.602 307.199 li
@
441.602 310.801 mo
448.801 310.801 li
@
445.199 314.398 mo
445.199 307.199 li
@
443.199 310.801 mo
450.398 310.801 li
@
446.801 314.398 mo
446.801 307.199 li
@
444.801 310.801 mo
452 310.801 li
@
448.398 314.398 mo
448.398 307.199 li
@
447.199 310.801 mo
454.398 310.801 li
@
450.801 314.398 mo
450.801 307.199 li
@
448.801 310.801 mo
456 310.801 li
@
452.398 314.398 mo
452.398 307.199 li
@
450.398 310.801 mo
457.602 310.801 li
@
454 314.398 mo
454 307.199 li
@
452 310.801 mo
459.199 310.801 li
@
455.602 314.398 mo
455.602 307.199 li
@
453.602 310.801 mo
460.801 310.801 li
@
457.199 314.398 mo
457.199 307.199 li
@
455.199 310.801 mo
462.398 310.801 li
@
458.801 314.398 mo
458.801 307.199 li
@
456.801 310.801 mo
464 310.801 li
@
460.398 314.398 mo
460.398 307.199 li
@
458.398 310.801 mo
465.602 310.801 li
@
462 314.398 mo
462 307.199 li
@
460.801 310.801 mo
468 310.801 li
@
464.398 314.398 mo
464.398 307.199 li
@
462.398 310.801 mo
469.602 310.801 li
@
466 314.398 mo
466 307.199 li
@
464 310.801 mo
471.199 310.801 li
@
467.602 314.398 mo
467.602 307.199 li
@
465.602 310.801 mo
472.801 310.801 li
@
469.199 314.398 mo
469.199 307.199 li
@
467.199 310.801 mo
474.398 310.801 li
@
470.801 314.398 mo
470.801 307.199 li
@
468.801 310.801 mo
476 310.801 li
@
472.398 314.398 mo
472.398 307.199 li
@
470.398 310.801 mo
477.602 310.801 li
@
474 314.398 mo
474 307.199 li
@
472 310.801 mo
479.199 310.801 li
@
475.602 314.398 mo
475.602 307.199 li
@
473.602 310.801 mo
480.801 310.801 li
@
477.199 314.398 mo
477.199 307.199 li
@
476 310.801 mo
483.199 310.801 li
@
479.602 314.398 mo
479.602 307.199 li
@
477.602 310.801 mo
484.801 310.801 li
@
481.199 314.398 mo
481.199 307.199 li
@
479.199 310.801 mo
486.398 310.801 li
@
482.801 314.398 mo
482.801 307.199 li
@
535.199 310.801 mo
542.398 310.801 li
@
538.801 314.398 mo
538.801 307.199 li
@
536.801 310.801 mo
544 310.801 li
@
540.398 314.398 mo
540.398 307.199 li
@
538.398 310.801 mo
545.602 310.801 li
@
542 314.398 mo
542 307.199 li
@
540 310.801 mo
547.199 310.801 li
@
543.602 314.398 mo
543.602 307.199 li
@
541.602 310.801 mo
548.801 310.801 li
@
545.199 314.398 mo
545.199 307.199 li
@
543.199 310.801 mo
550.398 310.801 li
@
546.801 314.398 mo
546.801 307.199 li
@
544.801 310.801 mo
552 310.801 li
@
548.398 314.398 mo
548.398 307.199 li
@
546.398 310.801 mo
553.602 310.801 li
@
550 314.398 mo
550 307.199 li
@
548.801 310.801 mo
556 310.801 li
@
552.398 314.398 mo
552.398 307.199 li
@
550.398 310.801 mo
557.602 310.801 li
@
554 314.398 mo
554 307.199 li
@
552 310.801 mo
559.199 310.801 li
@
555.602 314.398 mo
555.602 307.199 li
@
553.602 310.801 mo
560.801 310.801 li
@
557.199 314.398 mo
557.199 307.199 li
@
555.199 310.801 mo
562.398 310.801 li
@
558.801 314.398 mo
558.801 307.199 li
@
556.801 310.801 mo
564 310.801 li
@
560.398 314.398 mo
560.398 307.199 li
@
558.398 310.801 mo
565.602 310.801 li
@
562 314.398 mo
562 307.199 li
@
560 310.801 mo
567.199 310.801 li
@
563.602 314.398 mo
563.602 307.199 li
@
562.398 310.801 mo
569.602 310.801 li
@
566 314.398 mo
566 307.199 li
@
564 310.801 mo
571.199 310.801 li
@
567.602 314.398 mo
567.602 307.199 li
@
565.602 310.801 mo
572.801 310.801 li
@
569.199 314.398 mo
569.199 307.199 li
@
606.398 310.801 mo
613.602 310.801 li
@
610 314.398 mo
610 307.199 li
@
608 310.801 mo
615.199 310.801 li
@
611.602 314.398 mo
611.602 307.199 li
@
609.602 310.801 mo
616.801 310.801 li
@
613.199 314.398 mo
613.199 307.199 li
@
611.199 310.801 mo
618.398 310.801 li
@
614.801 314.398 mo
614.801 307.199 li
@
612.801 310.801 mo
620 310.801 li
@
616.398 314.398 mo
616.398 307.199 li
@
614.398 310.801 mo
621.602 310.801 li
@
618 314.398 mo
618 307.199 li
@
616 310.801 mo
623.199 310.801 li
@
619.602 314.398 mo
619.602 307.199 li
@
617.602 310.801 mo
624.801 310.801 li
@
621.199 314.398 mo
621.199 307.199 li
@
619.199 310.801 mo
626.398 310.801 li
@
622.801 314.398 mo
622.801 307.199 li
@
621.602 310.801 mo
628.801 310.801 li
@
625.199 314.398 mo
625.199 307.199 li
@
623.199 310.801 mo
630.398 310.801 li
@
626.801 314.398 mo
626.801 307.199 li
@
624.801 310.801 mo
632 310.801 li
@
628.398 314.398 mo
628.398 307.199 li
@
626.398 310.801 mo
633.602 310.801 li
@
630 314.398 mo
630 307.199 li
@
628 310.801 mo
635.199 310.801 li
@
631.602 314.398 mo
631.602 307.199 li
@
629.602 310.801 mo
636.801 310.801 li
@
633.199 314.398 mo
633.199 307.199 li
@
631.199 310.801 mo
638.398 310.801 li
@
634.801 314.398 mo
634.801 307.199 li
@
632.801 310.801 mo
640 310.801 li
@
636.398 314.398 mo
636.398 307.199 li
@
634.398 310.801 mo
641.602 310.801 li
@
638 314.398 mo
638 307.199 li
@
636.801 310.801 mo
644 310.801 li
@
640.398 314.398 mo
640.398 307.199 li
@
638.398 310.801 mo
645.602 310.801 li
@
642 314.398 mo
642 307.199 li
@
640 310.801 mo
647.199 310.801 li
@
643.602 314.398 mo
643.602 307.199 li
@
670.398 310.801 mo
677.602 310.801 li
@
674 314.398 mo
674 307.199 li
@
672 310.801 mo
679.199 310.801 li
@
675.602 314.398 mo
675.602 307.199 li
@
673.602 310.801 mo
680.801 310.801 li
@
677.199 314.398 mo
677.199 307.199 li
@
675.199 310.801 mo
682.398 310.801 li
@
678.801 314.398 mo
678.801 307.199 li
@
676.801 310.801 mo
684 310.801 li
@
680.398 314.398 mo
680.398 307.199 li
@
679.199 310.801 mo
686.398 310.801 li
@
682.801 314.398 mo
682.801 307.199 li
@
680.801 310.801 mo
688 310.801 li
@
684.398 314.398 mo
684.398 307.199 li
@
682.398 310.801 mo
689.602 310.801 li
@
686 314.398 mo
686 307.199 li
@
684 310.801 mo
691.199 310.801 li
@
687.602 314.398 mo
687.602 307.199 li
@
685.602 310.801 mo
692.801 310.801 li
@
689.199 314.398 mo
689.199 307.199 li
@
687.199 310.801 mo
694.398 310.801 li
@
690.801 314.398 mo
690.801 307.199 li
@
688.801 310.801 mo
696 310.801 li
@
692.398 314.398 mo
692.398 307.199 li
@
690.398 310.801 mo
697.602 310.801 li
@
694 314.398 mo
694 307.199 li
@
692 310.801 mo
699.199 310.801 li
@
695.602 314.398 mo
695.602 307.199 li
@
694.398 310.801 mo
701.602 310.801 li
@
698 314.398 mo
698 307.199 li
@
696 310.801 mo
703.199 310.801 li
@
699.602 314.398 mo
699.602 307.199 li
@
697.602 310.801 mo
704.801 310.801 li
@
701.199 314.398 mo
701.199 307.199 li
@
699.199 310.801 mo
706.398 310.801 li
@
702.801 314.398 mo
702.801 307.199 li
@
700.801 310.801 mo
708 310.801 li
@
704.398 314.398 mo
704.398 307.199 li
@
702.398 310.801 mo
709.602 310.801 li
@
706 314.398 mo
706 307.199 li
@
704 310.801 mo
711.199 310.801 li
@
707.602 314.398 mo
707.602 307.199 li
@
705.602 310.801 mo
712.801 310.801 li
@
709.199 314.398 mo
709.199 307.199 li
@
707.199 310.801 mo
714.398 310.801 li
@
710.801 314.398 mo
710.801 307.199 li
@
709.602 310.801 mo
716.801 310.801 li
@
713.199 314.398 mo
713.199 307.199 li
@
711.199 310.801 mo
718.398 310.801 li
@
714.801 314.398 mo
714.801 307.199 li
@
712.801 310.801 mo
720 310.801 li
@
716.398 314.398 mo
716.398 307.199 li
@
714.398 310.801 mo
721.602 310.801 li
@
718 314.398 mo
718 307.199 li
@
716 310.801 mo
723.199 310.801 li
@
719.602 314.398 mo
719.602 307.199 li
@
717.602 310.801 mo
724.801 310.801 li
@
721.199 314.398 mo
721.199 307.199 li
@
719.199 310.801 mo
726.398 310.801 li
@
722.801 314.398 mo
722.801 307.199 li
@
720.801 310.801 mo
728 310.801 li
@
724.398 314.398 mo
724.398 307.199 li
@
767.199 310.801 mo
774.398 310.801 li
@
770.801 314.398 mo
770.801 307.199 li
@
768.801 310.801 mo
776 310.801 li
@
772.398 314.398 mo
772.398 307.199 li
@
770.398 310.801 mo
777.602 310.801 li
@
774 314.398 mo
774 307.199 li
@
772 310.801 mo
779.199 310.801 li
@
775.602 314.398 mo
775.602 307.199 li
@
773.602 310.801 mo
780.801 310.801 li
@
777.199 314.398 mo
777.199 307.199 li
@
775.199 310.801 mo
782.398 310.801 li
@
778.801 314.398 mo
778.801 307.199 li
@
776.801 310.801 mo
784 310.801 li
@
780.398 314.398 mo
780.398 307.199 li
@
778.398 310.801 mo
785.602 310.801 li
@
782 314.398 mo
782 307.199 li
@
780 310.801 mo
787.199 310.801 li
@
783.602 314.398 mo
783.602 307.199 li
@
782.398 310.801 mo
789.602 310.801 li
@
786 314.398 mo
786 307.199 li
@
784 310.801 mo
791.199 310.801 li
@
787.602 314.398 mo
787.602 307.199 li
@
785.602 310.801 mo
792.801 310.801 li
@
789.199 314.398 mo
789.199 307.199 li
@
787.199 310.801 mo
794.398 310.801 li
@
790.801 314.398 mo
790.801 307.199 li
@
788.801 310.801 mo
796 310.801 li
@
792.398 314.398 mo
792.398 307.199 li
@
790.398 310.801 mo
797.602 310.801 li
@
794 314.398 mo
794 307.199 li
@
792 310.801 mo
799.199 310.801 li
@
795.602 314.398 mo
795.602 307.199 li
@
793.602 310.801 mo
800.801 310.801 li
@
797.199 314.398 mo
797.199 307.199 li
@
796 310.801 mo
803.199 310.801 li
@
799.602 314.398 mo
799.602 307.199 li
@
797.602 310.801 mo
804.801 310.801 li
@
801.199 314.398 mo
801.199 307.199 li
@
799.199 310.801 mo
806.398 310.801 li
@
802.801 314.398 mo
802.801 307.199 li
@
800.801 310.801 mo
808 310.801 li
@
804.398 314.398 mo
804.398 307.199 li
@
802.398 310.801 mo
809.602 310.801 li
@
806 314.398 mo
806 307.199 li
@
804 310.801 mo
811.199 310.801 li
@
807.602 314.398 mo
807.602 307.199 li
@
805.602 310.801 mo
812.801 310.801 li
@
809.199 314.398 mo
809.199 307.199 li
@
807.199 310.801 mo
814.398 310.801 li
@
810.801 314.398 mo
810.801 307.199 li
@
808.801 310.801 mo
816 310.801 li
@
812.398 314.398 mo
812.398 307.199 li
@
811.199 310.801 mo
818.398 310.801 li
@
814.801 314.398 mo
814.801 307.199 li
@
812.801 310.801 mo
820 310.801 li
@
816.398 314.398 mo
816.398 307.199 li
@
814.398 310.801 mo
821.602 310.801 li
@
818 314.398 mo
818 307.199 li
@
816 310.801 mo
823.199 310.801 li
@
819.602 314.398 mo
819.602 307.199 li
@
817.602 310.801 mo
824.801 310.801 li
@
821.199 314.398 mo
821.199 307.199 li
@
819.199 310.801 mo
826.398 310.801 li
@
822.801 314.398 mo
822.801 307.199 li
@
820.801 310.801 mo
828 310.801 li
@
824.398 314.398 mo
824.398 307.199 li
@
822.398 310.801 mo
829.602 310.801 li
@
826 314.398 mo
826 307.199 li
@
904 310.801 mo
911.199 310.801 li
@
907.602 314.398 mo
907.602 307.199 li
@
905.602 310.801 mo
912.801 310.801 li
@
909.199 314.398 mo
909.199 307.199 li
@
907.199 310.801 mo
914.398 310.801 li
@
910.801 314.398 mo
910.801 307.199 li
@
908.801 310.801 mo
916 310.801 li
@
912.398 314.398 mo
912.398 307.199 li
@
910.398 310.801 mo
917.602 310.801 li
@
914 314.398 mo
914 307.199 li
@
912.801 310.801 mo
920 310.801 li
@
916.398 314.398 mo
916.398 307.199 li
@
914.398 310.801 mo
921.602 310.801 li
@
918 314.398 mo
918 307.199 li
@
916 310.801 mo
923.199 310.801 li
@
919.602 314.398 mo
919.602 307.199 li
@
917.602 310.801 mo
924.801 310.801 li
@
921.199 314.398 mo
921.199 307.199 li
@
919.199 310.801 mo
926.398 310.801 li
@
922.801 314.398 mo
922.801 307.199 li
@
920.801 310.801 mo
928 310.801 li
@
924.398 314.398 mo
924.398 307.199 li
@
922.398 310.801 mo
929.602 310.801 li
@
926 314.398 mo
926 307.199 li
@
924 310.801 mo
931.199 310.801 li
@
927.602 314.398 mo
927.602 307.199 li
@
925.602 310.801 mo
932.801 310.801 li
@
929.199 314.398 mo
929.199 307.199 li
@
928 310.801 mo
935.199 310.801 li
@
931.602 314.398 mo
931.602 307.199 li
@
929.602 310.801 mo
936.801 310.801 li
@
933.199 314.398 mo
933.199 307.199 li
@
931.199 310.801 mo
938.398 310.801 li
@
934.801 314.398 mo
934.801 307.199 li
@
932.801 310.801 mo
940 310.801 li
@
936.398 314.398 mo
936.398 307.199 li
@
934.398 310.801 mo
941.602 310.801 li
@
938 314.398 mo
938 307.199 li
@
936 310.801 mo
943.199 310.801 li
@
939.602 314.398 mo
939.602 307.199 li
@
937.602 310.801 mo
944.801 310.801 li
@
941.199 314.398 mo
941.199 307.199 li
@
939.199 310.801 mo
946.398 310.801 li
@
942.801 314.398 mo
942.801 307.199 li
@
940.801 310.801 mo
948 310.801 li
@
944.398 314.398 mo
944.398 307.199 li
@
943.199 310.801 mo
950.398 310.801 li
@
946.801 314.398 mo
946.801 307.199 li
@
944.801 310.801 mo
952 310.801 li
@
948.398 314.398 mo
948.398 307.199 li
@
946.398 310.801 mo
953.602 310.801 li
@
950 314.398 mo
950 307.199 li
@
948 310.801 mo
955.199 310.801 li
@
951.602 314.398 mo
951.602 307.199 li
@
949.602 310.801 mo
956.801 310.801 li
@
953.199 314.398 mo
953.199 307.199 li
@
951.199 310.801 mo
958.398 310.801 li
@
954.801 314.398 mo
954.801 307.199 li
@
952.801 310.801 mo
960 310.801 li
@
956.398 314.398 mo
956.398 307.199 li
@
954.398 310.801 mo
961.602 310.801 li
@
958 314.398 mo
958 307.199 li
@
956.801 310.801 mo
964 310.801 li
@
960.398 314.398 mo
960.398 307.199 li
@
958.398 310.801 mo
965.602 310.801 li
@
962 314.398 mo
962 307.199 li
@
960 310.801 mo
967.199 310.801 li
@
963.602 314.398 mo
963.602 307.199 li
@
961.602 310.801 mo
968.801 310.801 li
@
965.199 314.398 mo
965.199 307.199 li
@
963.199 310.801 mo
970.398 310.801 li
@
966.801 314.398 mo
966.801 307.199 li
@
964.801 310.801 mo
972 310.801 li
@
968.398 314.398 mo
968.398 307.199 li
@
141.602 224 mo
147.199 218.398 li
0 0 0 1 cmyk
@
141.602 218.398 mo
147.199 224 li
@
143.199 224 mo
148.801 218.398 li
@
143.199 218.398 mo
148.801 224 li
@
144.801 224 mo
150.398 218.398 li
@
144.801 218.398 mo
150.398 224 li
@
146.398 224 mo
152 218.398 li
@
146.398 218.398 mo
152 224 li
@
148 224 mo
153.602 218.398 li
@
148 218.398 mo
153.602 224 li
@
149.602 224 mo
155.199 218.398 li
@
149.602 218.398 mo
155.199 224 li
@
151.199 224 mo
156.801 218.398 li
@
151.199 218.398 mo
156.801 224 li
@
152.801 224 mo
158.398 218.398 li
@
152.801 218.398 mo
158.398 224 li
@
155.199 224 mo
160.801 218.398 li
@
155.199 218.398 mo
160.801 224 li
@
156.801 224 mo
162.398 218.398 li
@
156.801 218.398 mo
162.398 224 li
@
158.398 224 mo
164 218.398 li
@
158.398 218.398 mo
164 224 li
@
160 224 mo
165.602 218.398 li
@
160 218.398 mo
165.602 224 li
@
161.602 224 mo
167.199 218.398 li
@
161.602 218.398 mo
167.199 224 li
@
163.199 224 mo
168.801 218.398 li
@
163.199 218.398 mo
168.801 224 li
@
164.801 224 mo
170.398 218.398 li
@
164.801 218.398 mo
170.398 224 li
@
166.398 224 mo
172 218.398 li
@
166.398 218.398 mo
172 224 li
@
168 224 mo
173.602 218.398 li
@
168 218.398 mo
173.602 224 li
@
170.398 224 mo
176 218.398 li
@
170.398 218.398 mo
176 224 li
@
172 224 mo
177.602 218.398 li
@
172 218.398 mo
177.602 224 li
@
173.602 224 mo
179.199 218.398 li
@
173.602 218.398 mo
179.199 224 li
@
175.199 224 mo
180.801 218.398 li
@
175.199 218.398 mo
180.801 224 li
@
176.801 224 mo
182.398 218.398 li
@
176.801 218.398 mo
182.398 224 li
@
178.398 224 mo
184 218.398 li
@
178.398 218.398 mo
184 224 li
@
219.199 224 mo
224.801 218.398 li
@
219.199 218.398 mo
224.801 224 li
@
220.801 224 mo
226.398 218.398 li
@
220.801 218.398 mo
226.398 224 li
@
222.398 224 mo
228 218.398 li
@
222.398 218.398 mo
228 224 li
@
224 224 mo
229.602 218.398 li
@
224 218.398 mo
229.602 224 li
@
225.602 224 mo
231.199 218.398 li
@
225.602 218.398 mo
231.199 224 li
@
228 224 mo
233.602 218.398 li
@
228 218.398 mo
233.602 224 li
@
229.602 224 mo
235.199 218.398 li
@
229.602 218.398 mo
235.199 224 li
@
231.199 224 mo
236.801 218.398 li
@
231.199 218.398 mo
236.801 224 li
@
232.801 224 mo
238.398 218.398 li
@
232.801 218.398 mo
238.398 224 li
@
234.398 224 mo
240 218.398 li
@
234.398 218.398 mo
240 224 li
@
236 224 mo
241.602 218.398 li
@
236 218.398 mo
241.602 224 li
@
237.602 224 mo
243.199 218.398 li
@
237.602 218.398 mo
243.199 224 li
@
239.199 224 mo
244.801 218.398 li
@
239.199 218.398 mo
244.801 224 li
@
240.801 224 mo
246.398 218.398 li
@
240.801 218.398 mo
246.398 224 li
@
243.199 224 mo
248.801 218.398 li
@
243.199 218.398 mo
248.801 224 li
@
244.801 224 mo
250.398 218.398 li
@
244.801 218.398 mo
250.398 224 li
@
246.398 224 mo
252 218.398 li
@
246.398 218.398 mo
252 224 li
@
248 224 mo
253.602 218.398 li
@
248 218.398 mo
253.602 224 li
@
249.602 224 mo
255.199 218.398 li
@
249.602 218.398 mo
255.199 224 li
@
251.199 224 mo
256.801 218.398 li
@
251.199 218.398 mo
256.801 224 li
@
252.801 224 mo
258.398 218.398 li
@
252.801 218.398 mo
258.398 224 li
@
254.398 224 mo
260 218.398 li
@
254.398 218.398 mo
260 224 li
@
256.801 224 mo
262.398 218.398 li
@
256.801 218.398 mo
262.398 224 li
@
300.801 224 mo
306.398 218.398 li
@
300.801 218.398 mo
306.398 224 li
@
302.398 224 mo
308 218.398 li
@
302.398 218.398 mo
308 224 li
@
304 224 mo
309.602 218.398 li
@
304 218.398 mo
309.602 224 li
@
305.602 224 mo
311.199 218.398 li
@
305.602 218.398 mo
311.199 224 li
@
307.199 224 mo
312.801 218.398 li
@
307.199 218.398 mo
312.801 224 li
@
308.801 224 mo
314.398 218.398 li
@
308.801 218.398 mo
314.398 224 li
@
310.398 224 mo
316 218.398 li
@
310.398 218.398 mo
316 224 li
@
312 224 mo
317.602 218.398 li
@
312 218.398 mo
317.602 224 li
@
313.602 224 mo
319.199 218.398 li
@
313.602 218.398 mo
319.199 224 li
@
316 224 mo
321.602 218.398 li
@
316 218.398 mo
321.602 224 li
@
317.602 224 mo
323.199 218.398 li
@
317.602 218.398 mo
323.199 224 li
@
319.199 224 mo
324.801 218.398 li
@
319.199 218.398 mo
324.801 224 li
@
320.801 224 mo
326.398 218.398 li
@
320.801 218.398 mo
326.398 224 li
@
322.398 224 mo
328 218.398 li
@
322.398 218.398 mo
328 224 li
@
324 224 mo
329.602 218.398 li
@
324 218.398 mo
329.602 224 li
@
325.602 224 mo
331.199 218.398 li
@
325.602 218.398 mo
331.199 224 li
@
327.199 224 mo
332.801 218.398 li
@
327.199 218.398 mo
332.801 224 li
@
328.801 224 mo
334.398 218.398 li
@
328.801 218.398 mo
334.398 224 li
@
331.199 224 mo
336.801 218.398 li
@
331.199 218.398 mo
336.801 224 li
@
332.801 224 mo
338.398 218.398 li
@
332.801 218.398 mo
338.398 224 li
@
334.398 224 mo
340 218.398 li
@
334.398 218.398 mo
340 224 li
@
336 224 mo
341.602 218.398 li
@
336 218.398 mo
341.602 224 li
@
337.602 224 mo
343.199 218.398 li
@
337.602 218.398 mo
343.199 224 li
@
339.199 224 mo
344.801 218.398 li
@
339.199 218.398 mo
344.801 224 li
@
340.801 224 mo
346.398 218.398 li
@
340.801 218.398 mo
346.398 224 li
@
342.398 224 mo
348 218.398 li
@
342.398 218.398 mo
348 224 li
@
344.801 224 mo
350.398 218.398 li
@
344.801 218.398 mo
350.398 224 li
@
404 224 mo
409.602 218.398 li
@
404 218.398 mo
409.602 224 li
@
405.602 224 mo
411.199 218.398 li
@
405.602 218.398 mo
411.199 224 li
@
407.199 224 mo
412.801 218.398 li
@
407.199 218.398 mo
412.801 224 li
@
408.801 224 mo
414.398 218.398 li
@
408.801 218.398 mo
414.398 224 li
@
410.398 224 mo
416 218.398 li
@
410.398 218.398 mo
416 224 li
@
412 224 mo
417.602 218.398 li
@
412 218.398 mo
417.602 224 li
@
413.602 224 mo
419.199 218.398 li
@
413.602 218.398 mo
419.199 224 li
@
415.199 224 mo
420.801 218.398 li
@
415.199 218.398 mo
420.801 224 li
@
417.602 224 mo
423.199 218.398 li
@
417.602 218.398 mo
423.199 224 li
@
419.199 224 mo
424.801 218.398 li
@
419.199 218.398 mo
424.801 224 li
@
420.801 224 mo
426.398 218.398 li
@
420.801 218.398 mo
426.398 224 li
@
422.398 224 mo
428 218.398 li
@
422.398 218.398 mo
428 224 li
@
424 224 mo
429.602 218.398 li
@
424 218.398 mo
429.602 224 li
@
425.602 224 mo
431.199 218.398 li
@
425.602 218.398 mo
431.199 224 li
@
427.199 224 mo
432.801 218.398 li
@
427.199 218.398 mo
432.801 224 li
@
428.801 224 mo
434.398 218.398 li
@
428.801 218.398 mo
434.398 224 li
@
430.398 224 mo
436 218.398 li
@
430.398 218.398 mo
436 224 li
@
432.801 224 mo
438.398 218.398 li
@
432.801 218.398 mo
438.398 224 li
@
434.398 224 mo
440 218.398 li
@
434.398 218.398 mo
440 224 li
@
481.602 224 mo
487.199 218.398 li
@
481.602 218.398 mo
487.199 224 li
@
483.199 224 mo
488.801 218.398 li
@
483.199 218.398 mo
488.801 224 li
@
484.801 224 mo
490.398 218.398 li
@
484.801 218.398 mo
490.398 224 li
@
486.398 224 mo
492 218.398 li
@
486.398 218.398 mo
492 224 li
@
488 224 mo
493.602 218.398 li
@
488 218.398 mo
493.602 224 li
@
490.398 224 mo
496 218.398 li
@
490.398 218.398 mo
496 224 li
@
492 224 mo
497.602 218.398 li
@
492 218.398 mo
497.602 224 li
@
493.602 224 mo
499.199 218.398 li
@
493.602 218.398 mo
499.199 224 li
@
495.199 224 mo
500.801 218.398 li
@
495.199 218.398 mo
500.801 224 li
@
496.801 224 mo
502.398 218.398 li
@
496.801 218.398 mo
502.398 224 li
@
498.398 224 mo
504 218.398 li
@
498.398 218.398 mo
504 224 li
@
500 224 mo
505.602 218.398 li
@
500 218.398 mo
505.602 224 li
@
501.602 224 mo
507.199 218.398 li
@
501.602 218.398 mo
507.199 224 li
@
503.199 224 mo
508.801 218.398 li
@
503.199 218.398 mo
508.801 224 li
@
505.602 224 mo
511.199 218.398 li
@
505.602 218.398 mo
511.199 224 li
@
507.199 224 mo
512.801 218.398 li
@
507.199 218.398 mo
512.801 224 li
@
508.801 224 mo
514.398 218.398 li
@
508.801 218.398 mo
514.398 224 li
@
510.398 224 mo
516 218.398 li
@
510.398 218.398 mo
516 224 li
@
512 224 mo
517.602 218.398 li
@
512 218.398 mo
517.602 224 li
@
513.602 224 mo
519.199 218.398 li
@
513.602 218.398 mo
519.199 224 li
@
515.199 224 mo
520.801 218.398 li
@
515.199 218.398 mo
520.801 224 li
@
516.801 224 mo
522.398 218.398 li
@
516.801 218.398 mo
522.398 224 li
@
518.398 224 mo
524 218.398 li
@
518.398 218.398 mo
524 224 li
@
520.801 224 mo
526.398 218.398 li
@
520.801 218.398 mo
526.398 224 li
@
522.398 224 mo
528 218.398 li
@
522.398 218.398 mo
528 224 li
@
524 224 mo
529.602 218.398 li
@
524 218.398 mo
529.602 224 li
@
525.602 224 mo
531.199 218.398 li
@
525.602 218.398 mo
531.199 224 li
@
527.199 224 mo
532.801 218.398 li
@
527.199 218.398 mo
532.801 224 li
@
528.801 224 mo
534.398 218.398 li
@
528.801 218.398 mo
534.398 224 li
@
530.398 224 mo
536 218.398 li
@
530.398 218.398 mo
536 224 li
@
532 224 mo
537.602 218.398 li
@
532 218.398 mo
537.602 224 li
@
534.398 224 mo
540 218.398 li
@
534.398 218.398 mo
540 224 li
@
568 224 mo
573.602 218.398 li
@
568 218.398 mo
573.602 224 li
@
569.602 224 mo
575.199 218.398 li
@
569.602 218.398 mo
575.199 224 li
@
571.199 224 mo
576.801 218.398 li
@
571.199 218.398 mo
576.801 224 li
@
572.801 224 mo
578.398 218.398 li
@
572.801 218.398 mo
578.398 224 li
@
574.398 224 mo
580 218.398 li
@
574.398 218.398 mo
580 224 li
@
576 224 mo
581.602 218.398 li
@
576 218.398 mo
581.602 224 li
@
578.398 224 mo
584 218.398 li
@
578.398 218.398 mo
584 224 li
@
580 224 mo
585.602 218.398 li
@
580 218.398 mo
585.602 224 li
@
581.602 224 mo
587.199 218.398 li
@
581.602 218.398 mo
587.199 224 li
@
583.199 224 mo
588.801 218.398 li
@
583.199 218.398 mo
588.801 224 li
@
584.801 224 mo
590.398 218.398 li
@
584.801 218.398 mo
590.398 224 li
@
586.398 224 mo
592 218.398 li
@
586.398 218.398 mo
592 224 li
@
588 224 mo
593.602 218.398 li
@
588 218.398 mo
593.602 224 li
@
589.602 224 mo
595.199 218.398 li
@
589.602 218.398 mo
595.199 224 li
@
591.199 224 mo
596.801 218.398 li
@
591.199 218.398 mo
596.801 224 li
@
593.602 224 mo
599.199 218.398 li
@
593.602 218.398 mo
599.199 224 li
@
595.199 224 mo
600.801 218.398 li
@
595.199 218.398 mo
600.801 224 li
@
596.801 224 mo
602.398 218.398 li
@
596.801 218.398 mo
602.398 224 li
@
598.398 224 mo
604 218.398 li
@
598.398 218.398 mo
604 224 li
@
600 224 mo
605.602 218.398 li
@
600 218.398 mo
605.602 224 li
@
601.602 224 mo
607.199 218.398 li
@
601.602 218.398 mo
607.199 224 li
@
603.199 224 mo
608.801 218.398 li
@
603.199 218.398 mo
608.801 224 li
@
604.801 224 mo
610.398 218.398 li
@
604.801 218.398 mo
610.398 224 li
@
642.398 224 mo
648 218.398 li
@
642.398 218.398 mo
648 224 li
@
644 224 mo
649.602 218.398 li
@
644 218.398 mo
649.602 224 li
@
645.602 224 mo
651.199 218.398 li
@
645.602 218.398 mo
651.199 224 li
@
647.199 224 mo
652.801 218.398 li
@
647.199 218.398 mo
652.801 224 li
@
648.801 224 mo
654.398 218.398 li
@
648.801 218.398 mo
654.398 224 li
@
651.199 224 mo
656.801 218.398 li
@
651.199 218.398 mo
656.801 224 li
@
652.801 224 mo
658.398 218.398 li
@
652.801 218.398 mo
658.398 224 li
@
654.398 224 mo
660 218.398 li
@
654.398 218.398 mo
660 224 li
@
656 224 mo
661.602 218.398 li
@
656 218.398 mo
661.602 224 li
@
657.602 224 mo
663.199 218.398 li
@
657.602 218.398 mo
663.199 224 li
@
659.199 224 mo
664.801 218.398 li
@
659.199 218.398 mo
664.801 224 li
@
660.801 224 mo
666.398 218.398 li
@
660.801 218.398 mo
666.398 224 li
@
662.398 224 mo
668 218.398 li
@
662.398 218.398 mo
668 224 li
@
664 224 mo
669.602 218.398 li
@
664 218.398 mo
669.602 224 li
@
666.398 224 mo
672 218.398 li
@
666.398 218.398 mo
672 224 li
@
668 224 mo
673.602 218.398 li
@
668 218.398 mo
673.602 224 li
@
669.602 224 mo
675.199 218.398 li
@
669.602 218.398 mo
675.199 224 li
@
724 224 mo
729.602 218.398 li
@
724 218.398 mo
729.602 224 li
@
725.602 224 mo
731.199 218.398 li
@
725.602 218.398 mo
731.199 224 li
@
727.199 224 mo
732.801 218.398 li
@
727.199 218.398 mo
732.801 224 li
@
728.801 224 mo
734.398 218.398 li
@
728.801 218.398 mo
734.398 224 li
@
730.398 224 mo
736 218.398 li
@
730.398 218.398 mo
736 224 li
@
732 224 mo
737.602 218.398 li
@
732 218.398 mo
737.602 224 li
@
733.602 224 mo
739.199 218.398 li
@
733.602 218.398 mo
739.199 224 li
@
735.199 224 mo
740.801 218.398 li
@
735.199 218.398 mo
740.801 224 li
@
736.801 224 mo
742.398 218.398 li
@
736.801 218.398 mo
742.398 224 li
@
739.199 224 mo
744.801 218.398 li
@
739.199 218.398 mo
744.801 224 li
@
740.801 224 mo
746.398 218.398 li
@
740.801 218.398 mo
746.398 224 li
@
742.398 224 mo
748 218.398 li
@
742.398 218.398 mo
748 224 li
@
744 224 mo
749.602 218.398 li
@
744 218.398 mo
749.602 224 li
@
745.602 224 mo
751.199 218.398 li
@
745.602 218.398 mo
751.199 224 li
@
747.199 224 mo
752.801 218.398 li
@
747.199 218.398 mo
752.801 224 li
@
748.801 224 mo
754.398 218.398 li
@
748.801 218.398 mo
754.398 224 li
@
750.398 224 mo
756 218.398 li
@
750.398 218.398 mo
756 224 li
@
752 224 mo
757.602 218.398 li
@
752 218.398 mo
757.602 224 li
@
754.398 224 mo
760 218.398 li
@
754.398 218.398 mo
760 224 li
@
756 224 mo
761.602 218.398 li
@
756 218.398 mo
761.602 224 li
@
757.602 224 mo
763.199 218.398 li
@
757.602 218.398 mo
763.199 224 li
@
759.199 224 mo
764.801 218.398 li
@
759.199 218.398 mo
764.801 224 li
@
760.801 224 mo
766.398 218.398 li
@
760.801 218.398 mo
766.398 224 li
@
762.398 224 mo
768 218.398 li
@
762.398 218.398 mo
768 224 li
@
764 224 mo
769.602 218.398 li
@
764 218.398 mo
769.602 224 li
@
765.602 224 mo
771.199 218.398 li
@
765.602 218.398 mo
771.199 224 li
@
824.801 224 mo
830.398 218.398 li
@
824.801 218.398 mo
830.398 224 li
@
827.199 224 mo
832.801 218.398 li
@
827.199 218.398 mo
832.801 224 li
@
828.801 224 mo
834.398 218.398 li
@
828.801 218.398 mo
834.398 224 li
@
830.398 224 mo
836 218.398 li
@
830.398 218.398 mo
836 224 li
@
832 224 mo
837.602 218.398 li
@
832 218.398 mo
837.602 224 li
@
833.602 224 mo
839.199 218.398 li
@
833.602 218.398 mo
839.199 224 li
@
835.199 224 mo
840.801 218.398 li
@
835.199 218.398 mo
840.801 224 li
@
836.801 224 mo
842.398 218.398 li
@
836.801 218.398 mo
842.398 224 li
@
838.398 224 mo
844 218.398 li
@
838.398 218.398 mo
844 224 li
@
840.801 224 mo
846.398 218.398 li
@
840.801 218.398 mo
846.398 224 li
@
842.398 224 mo
848 218.398 li
@
842.398 218.398 mo
848 224 li
@
844 224 mo
849.602 218.398 li
@
844 218.398 mo
849.602 224 li
@
845.602 224 mo
851.199 218.398 li
@
845.602 218.398 mo
851.199 224 li
@
847.199 224 mo
852.801 218.398 li
@
847.199 218.398 mo
852.801 224 li
@
848.801 224 mo
854.398 218.398 li
@
848.801 218.398 mo
854.398 224 li
@
850.398 224 mo
856 218.398 li
@
850.398 218.398 mo
856 224 li
@
852 224 mo
857.602 218.398 li
@
852 218.398 mo
857.602 224 li
@
853.602 224 mo
859.199 218.398 li
@
853.602 218.398 mo
859.199 224 li
@
856 224 mo
861.602 218.398 li
@
856 218.398 mo
861.602 224 li
@
857.602 224 mo
863.199 218.398 li
@
857.602 218.398 mo
863.199 224 li
@
859.199 224 mo
864.801 218.398 li
@
859.199 218.398 mo
864.801 224 li
@
860.801 224 mo
866.398 218.398 li
@
860.801 218.398 mo
866.398 224 li
@
862.398 224 mo
868 218.398 li
@
862.398 218.398 mo
868 224 li
@
864 224 mo
869.602 218.398 li
@
864 218.398 mo
869.602 224 li
@
865.602 224 mo
871.199 218.398 li
@
865.602 218.398 mo
871.199 224 li
@
867.199 224 mo
872.801 218.398 li
@
867.199 218.398 mo
872.801 224 li
@
868.801 224 mo
874.398 218.398 li
@
868.801 218.398 mo
874.398 224 li
@
871.199 224 mo
876.801 218.398 li
@
871.199 218.398 mo
876.801 224 li
@
872.801 224 mo
878.398 218.398 li
@
872.801 218.398 mo
878.398 224 li
@
874.398 224 mo
880 218.398 li
@
874.398 218.398 mo
880 224 li
@
876 224 mo
881.602 218.398 li
@
876 218.398 mo
881.602 224 li
@
877.602 224 mo
883.199 218.398 li
@
877.602 218.398 mo
883.199 224 li
@
879.199 224 mo
884.801 218.398 li
@
879.199 218.398 mo
884.801 224 li
@
880.801 224 mo
886.398 218.398 li
@
880.801 218.398 mo
886.398 224 li
@
882.398 224 mo
888 218.398 li
@
882.398 218.398 mo
888 224 li
@
884.801 224 mo
890.398 218.398 li
@
884.801 218.398 mo
890.398 224 li
@
886.398 224 mo
892 218.398 li
@
886.398 218.398 mo
892 224 li
@
888 224 mo
893.602 218.398 li
@
888 218.398 mo
893.602 224 li
@
889.602 224 mo
895.199 218.398 li
@
889.602 218.398 mo
895.199 224 li
@
891.199 224 mo
896.801 218.398 li
@
891.199 218.398 mo
896.801 224 li
@
892.801 224 mo
898.398 218.398 li
@
892.801 218.398 mo
898.398 224 li
@
894.398 224 mo
900 218.398 li
@
894.398 218.398 mo
900 224 li
@
896 224 mo
901.602 218.398 li
@
896 218.398 mo
901.602 224 li
@
897.602 224 mo
903.199 218.398 li
@
897.602 218.398 mo
903.199 224 li
@
900 224 mo
905.602 218.398 li
@
900 218.398 mo
905.602 224 li
@
901.602 224 mo
907.199 218.398 li
@
901.602 218.398 mo
907.199 224 li
@
903.199 224 mo
908.801 218.398 li
@
903.199 218.398 mo
908.801 224 li
@
.817404 lw
0 lj
375.777 305.598 mo
375.777 132.961 li
@
375.777 297.426 mo
372.508 294.156 li
375.777 305.598 li
379.047 294.156 li
cp
ef
2 lc
375.777 297.426 mo
372.508 294.156 li
375.777 305.598 li
379.047 294.156 li
cp
@
.591317 lw
0 lc
658.301 214.305 mo
658.301 132.848 li
@
658.301 208.395 mo
655.938 206.027 li
658.301 214.305 li
660.668 206.027 li
cp
ef
2 lc
658.301 208.395 mo
655.938 206.027 li
658.301 214.305 li
660.668 206.027 li
cp
@
305.879 112.707 mo
291.664 112.707 li
291.664 113.812 li
294.207 113.812 li
294.207 127.578 li
291.664 127.578 li
291.664 128.68 li
292.559 128.605 294.93 128.605 295.965 128.605 cv
297.113 128.605 299.68 128.605 300.707 128.68 cv
300.707 127.578 li
297.535 127.578 li
297.535 121.23 li
298.715 121.23 li
300.969 121.23 301.18 122.238 301.18 123.98 cv
302.289 123.98 li
302.289 117.379 li
301.18 117.379 li
301.18 119.117 300.992 120.125 298.715 120.125 cv
297.535 120.125 li
297.535 113.812 li
300.828 113.812 li
304.609 113.812 305.156 115.617 305.5 118.367 cv
306.602 118.367 li
cp
f
314.254 126.871 mo
314.254 127.012 li
314.258 127.16 li
314.266 127.309 li
314.277 127.383 li
314.289 127.461 li
314.305 127.535 li
314.328 127.609 li
314.352 127.687 li
314.379 127.762 li
314.418 127.836 li
314.457 127.906 li
314.504 127.98 li
314.559 128.051 li
314.617 128.117 li
314.688 128.18 li
314.762 128.242 li
314.805 128.27 li
314.848 128.301 li
314.941 128.355 li
314.992 128.383 li
315.102 128.43 li
315.16 128.457 li
315.219 128.48 li
315.281 128.504 li
315.348 128.52 li
315.559 128.578 li
315.641 128.594 li
315.719 128.605 li
315.801 128.621 li
315.883 128.633 li
315.973 128.645 li
316.07 128.652 li
316.164 128.664 li
316.262 128.668 li
316.367 128.676 li
316.469 128.676 li
316.578 128.68 li
317.816 128.68 li
318.289 128.68 318.574 128.68 318.574 128.117 cv
318.574 127.578 318.27 127.578 317.961 127.578 cv
316.531 127.555 316.531 127.242 316.531 126.707 cv
316.531 121.66 li
316.531 119.566 314.855 118.043 311.355 118.043 cv
310.023 118.043 307.156 118.133 307.156 120.203 cv
307.156 121.23 307.977 121.684 308.609 121.684 cv
309.34 121.684 310.09 121.187 310.09 120.203 cv
310.09 119.496 309.645 119.094 309.574 119.051 cv
310.23 118.91 310.98 118.883 311.266 118.883 cv
313.031 118.883 313.848 119.867 313.848 121.66 cv
313.848 125.418 li
313.848 127.672 311.688 127.973 311.098 127.973 cv
309.906 127.973 308.961 127.16 308.961 126.117 cv
308.961 123.582 312.676 123.254 313.848 123.184 cv
313.848 122.457 li
312.184 122.527 306.211 122.734 306.211 126.148 cv
306.211 128.402 309.121 128.824 310.742 128.824 cv
312.629 128.824 313.73 127.855 314.254 126.871 cv
cp
f
323.855 112.375 mo
319.695 112.566 li
319.695 113.672 li
321.156 113.672 321.316 113.672 321.316 114.586 cv
321.316 127.578 li
319.695 127.578 li
319.695 128.68 li
320.449 128.656 321.578 128.605 322.586 128.605 cv
323.594 128.605 324.68 128.656 325.473 128.68 cv
325.473 127.578 li
323.855 127.578 li
cp
f
331.375 112.375 mo
327.223 112.566 li
327.223 113.672 li
328.68 113.672 328.844 113.672 328.844 114.586 cv
328.844 127.578 li
327.223 127.578 li
327.223 128.68 li
327.973 128.656 329.098 128.605 330.109 128.605 cv
331.117 128.605 332.203 128.656 333 128.68 cv
333 127.578 li
331.375 127.578 li
cp
f
353.773 112.891 mo
353.738 112.809 li
353.727 112.785 li
353.711 112.762 li
353.703 112.73 li
353.68 112.691 li
353.648 112.648 li
353.602 112.57 li
353.574 112.539 li
353.551 112.504 li
353.5 112.453 li
353.473 112.43 li
353.441 112.406 li
353.387 112.367 li
353.359 112.355 li
353.328 112.34 li
353.301 112.332 li
353.273 112.32 li
353.238 112.312 li
353.211 112.305 li
353.18 112.297 li
353.086 112.285 li
353.051 112.285 li
353.02 112.281 li
352.84 112.281 li
352.184 112.281 352.09 112.473 351.918 112.891 cv
346.094 127.039 li
345.957 127.395 345.883 127.578 344.102 127.578 cv
343.605 127.578 li
343.605 128.68 li
344.496 128.656 345.625 128.605 346.355 128.605 cv
347.27 128.605 348.586 128.605 349.457 128.68 cv
349.457 127.578 li
349.406 127.578 347.363 127.578 347.363 127.277 cv
347.363 127.242 347.43 127.016 347.457 126.988 cv
348.633 124.148 li
349.105 123.047 li
351.777 116.508 li
354.461 123.047 li
349.105 123.047 li
348.633 124.148 li
354.934 124.148 li
356.34 127.578 li
354.105 127.578 li
354.105 128.68 li
355 128.605 357.23 128.605 358.238 128.605 cv
359.184 128.605 361.246 128.605 362.074 128.68 cv
362.074 127.578 li
359.793 127.578 li
cp
f
365.742 120.32 mo
365.742 127.578 li
364.121 127.578 li
364.121 128.68 li
364.785 128.656 366.195 128.605 367.086 128.605 cv
368.004 128.605 369.391 128.656 370.047 128.68 cv
370.047 127.578 li
368.426 127.578 li
368.426 122.668 li
368.426 120.102 370.445 118.957 371.926 118.957 cv
372.727 118.957 373.215 119.449 373.215 121.23 cv
373.215 127.578 li
371.594 127.578 li
371.594 128.68 li
372.254 128.656 373.664 128.605 374.555 128.605 cv
375.477 128.605 376.863 128.656 377.516 128.68 cv
377.516 127.578 li
375.895 127.578 li
375.895 121.488 li
375.895 119.023 374.633 118.109 372.277 118.109 cv
370.023 118.109 368.777 119.449 368.164 120.648 cv
368.164 118.109 li
364.121 118.301 li
364.121 119.406 li
365.582 119.406 365.742 119.406 365.742 120.32 cv
cp
f
380.738 120.32 mo
380.738 127.578 li
379.117 127.578 li
379.117 128.68 li
379.781 128.656 381.188 128.605 382.078 128.605 cv
383.004 128.605 384.383 128.656 385.043 128.68 cv
385.043 127.578 li
383.422 127.578 li
383.422 122.668 li
383.422 120.102 385.441 118.957 386.922 118.957 cv
387.723 118.957 388.207 119.449 388.207 121.23 cv
388.207 127.578 li
386.59 127.578 li
386.59 128.68 li
387.25 128.656 388.66 128.605 389.551 128.605 cv
390.473 128.605 391.859 128.656 392.516 128.68 cv
392.516 127.578 li
390.891 127.578 li
390.891 121.488 li
390.891 119.023 389.625 118.109 387.273 118.109 cv
385.02 118.109 383.777 119.449 383.164 120.648 cv
383.164 118.109 li
379.117 118.301 li
379.117 119.406 li
380.578 119.406 380.738 119.406 380.738 120.32 cv
cp
f
405.793 123.559 mo
405.785 123.266 li
405.766 122.98 li
405.738 122.695 li
405.691 122.418 li
405.633 122.148 li
405.566 121.883 li
405.488 121.621 li
405.395 121.371 li
405.289 121.125 li
405.176 120.887 li
405.043 120.656 li
404.906 120.434 li
404.758 120.215 li
404.59 120.008 li
404.418 119.812 li
404.234 119.621 li
404.035 119.441 li
403.828 119.27 li
403.609 119.109 li
403.379 118.957 li
403.141 118.816 li
402.891 118.687 li
402.625 118.57 li
402.352 118.461 li
402.07 118.363 li
401.777 118.281 li
401.473 118.207 li
401.16 118.152 li
400.832 118.105 li
400.5 118.07 li
400.152 118.047 li
399.801 118.043 li
399.801 118.883 li
400.785 118.883 401.777 119.258 402.289 120.086 cv
402.785 120.875 402.785 122.172 402.785 123.301 cv
402.785 125.344 402.785 127.883 399.801 127.883 cv
396.816 127.883 396.816 125.344 396.816 123.301 cv
396.816 122.238 396.816 121.047 397.215 120.246 cv
397.664 119.375 398.648 118.883 399.801 118.883 cv
399.801 118.043 li
395.949 118.043 393.812 120.437 393.812 123.559 cv
393.812 126.469 395.883 128.824 399.801 128.824 cv
403.754 128.824 405.793 126.449 405.793 123.559 cv
cp
f
409 119.352 mo
409 125.797 li
409 128.305 411.047 128.824 412.719 128.824 cv
414.504 128.824 415.562 127.48 415.562 125.773 cv
415.562 124.527 li
414.453 124.527 li
414.453 125.719 li
414.453 127.32 413.703 127.883 413.047 127.883 cv
411.684 127.883 411.684 126.387 411.684 125.836 cv
411.684 119.352 li
415.109 119.352 li
415.109 118.25 li
411.684 118.25 li
411.684 113.762 li
410.578 113.762 li
410.559 116.109 409.406 118.437 407.078 118.504 cv
407.078 119.352 li
cp
f
425.898 126.871 mo
425.898 127.012 li
425.902 127.16 li
425.906 127.234 li
425.918 127.309 li
425.926 127.383 li
425.938 127.461 li
425.953 127.535 li
425.973 127.609 li
425.996 127.687 li
426.027 127.762 li
426.062 127.836 li
426.105 127.906 li
426.148 127.98 li
426.203 128.051 li
426.266 128.117 li
426.332 128.18 li
426.406 128.242 li
426.449 128.27 li
426.492 128.301 li
426.586 128.355 li
426.641 128.383 li
426.691 128.406 li
426.746 128.43 li
426.805 128.457 li
426.867 128.48 li
426.926 128.504 li
426.992 128.52 li
427.133 128.559 li
427.211 128.578 li
427.285 128.594 li
427.363 128.605 li
427.445 128.621 li
427.625 128.645 li
427.715 128.652 li
427.809 128.664 li
427.906 128.668 li
428.012 128.676 li
428.113 128.676 li
428.223 128.68 li
429.465 128.68 li
429.934 128.68 430.219 128.68 430.219 128.117 cv
430.219 127.578 429.918 127.578 429.605 127.578 cv
428.176 127.555 428.176 127.242 428.176 126.707 cv
428.176 121.66 li
428.176 119.566 426.504 118.043 423.004 118.043 cv
421.668 118.043 418.801 118.133 418.801 120.203 cv
418.801 121.23 419.621 121.684 420.254 121.684 cv
420.984 121.684 421.734 121.187 421.734 120.203 cv
421.734 119.496 421.297 119.094 421.219 119.051 cv
421.875 118.91 422.625 118.883 422.914 118.883 cv
424.676 118.883 425.492 119.867 425.492 121.66 cv
425.492 125.418 li
425.492 127.672 423.332 127.973 422.742 127.973 cv
421.551 127.973 420.605 127.16 420.605 126.117 cv
420.605 123.582 424.324 123.254 425.492 123.184 cv
425.492 122.457 li
423.828 122.527 417.859 122.734 417.859 126.148 cv
417.859 128.402 420.773 128.824 422.391 128.824 cv
424.277 128.824 425.375 127.855 425.898 126.871 cv
cp
f
432.656 119.352 mo
432.656 125.797 li
432.656 128.305 434.703 128.824 436.367 128.824 cv
438.16 128.824 439.211 127.48 439.211 125.773 cv
439.211 124.527 li
438.109 124.527 li
438.109 125.719 li
438.109 127.32 437.359 127.883 436.699 127.883 cv
435.336 127.883 435.336 126.387 435.336 125.836 cv
435.336 119.352 li
438.762 119.352 li
438.762 118.25 li
435.336 118.25 li
435.336 113.762 li
434.23 113.762 li
434.207 116.109 433.059 118.437 430.73 118.504 cv
430.73 119.352 li
cp
f
446.02 118.109 mo
441.934 118.301 li
441.934 119.406 li
443.324 119.406 443.488 119.406 443.488 120.32 cv
443.488 127.578 li
441.867 127.578 li
441.867 128.68 li
442.598 128.656 443.75 128.605 444.734 128.605 cv
445.441 128.605 446.633 128.656 447.484 128.68 cv
447.484 127.578 li
446.02 127.578 li
cp
f
446.258 114.187 mo
446.258 114.09 li
446.246 113.996 li
446.238 113.902 li
446.199 113.723 li
446.172 113.633 li
446.145 113.547 li
446.074 113.383 li
446.031 113.301 li
445.988 113.223 li
445.938 113.152 li
445.883 113.082 li
445.832 113.012 li
445.773 112.945 li
445.711 112.879 li
445.648 112.82 li
445.578 112.766 li
445.512 112.707 li
445.438 112.66 li
445.367 112.613 li
445.285 112.566 li
445.211 112.527 li
445.125 112.492 li
445.047 112.465 li
444.961 112.434 li
444.875 112.41 li
444.785 112.387 li
444.605 112.363 li
444.516 112.355 li
444.422 112.355 li
443.414 112.355 442.598 113.18 442.598 114.187 cv
442.598 115.199 443.414 116.016 444.422 116.016 cv
445.414 116.016 446.258 115.219 446.258 114.187 cv
cp
f
461.02 123.559 mo
461.012 123.266 li
460.996 122.98 li
460.961 122.695 li
460.918 122.418 li
460.863 122.148 li
460.797 121.883 li
460.715 121.621 li
460.621 121.371 li
460.52 121.125 li
460.402 120.887 li
460.273 120.656 li
460.137 120.434 li
459.984 120.215 li
459.82 120.008 li
459.645 119.812 li
459.461 119.621 li
459.266 119.441 li
459.055 119.27 li
458.84 119.109 li
458.609 118.957 li
458.367 118.816 li
458.117 118.687 li
457.855 118.57 li
457.582 118.461 li
457.297 118.363 li
457.004 118.281 li
456.703 118.207 li
456.387 118.152 li
456.062 118.105 li
455.727 118.07 li
455.383 118.047 li
455.027 118.043 li
455.027 118.883 li
456.02 118.883 457.004 119.258 457.52 120.086 cv
458.016 120.875 458.016 122.172 458.016 123.301 cv
458.016 125.344 458.016 127.883 455.027 127.883 cv
452.043 127.883 452.043 125.344 452.043 123.301 cv
452.043 122.238 452.043 121.047 452.445 120.246 cv
452.895 119.375 453.879 118.883 455.027 118.883 cv
455.027 118.043 li
451.176 118.043 449.039 120.437 449.039 123.559 cv
449.039 126.469 451.109 128.824 455.027 128.824 cv
458.98 128.824 461.02 126.449 461.02 123.559 cv
cp
f
464.488 120.32 mo
464.488 127.578 li
462.867 127.578 li
462.867 128.68 li
463.531 128.656 464.938 128.605 465.828 128.605 cv
466.75 128.605 468.133 128.656 468.789 128.68 cv
468.789 127.578 li
467.168 127.578 li
467.168 122.668 li
467.168 120.102 469.191 118.957 470.668 118.957 cv
471.473 118.957 471.961 119.449 471.961 121.23 cv
471.961 127.578 li
470.336 127.578 li
470.336 128.68 li
471 128.656 472.406 128.605 473.297 128.605 cv
474.223 128.605 475.605 128.656 476.266 128.68 cv
476.266 127.578 li
474.645 127.578 li
474.645 121.488 li
474.645 119.023 473.375 118.109 471.02 118.109 cv
468.766 118.109 467.523 119.449 466.914 120.648 cv
466.914 118.109 li
462.867 118.301 li
462.867 119.406 li
464.324 119.406 464.488 119.406 464.488 120.32 cv
cp
f
541.441 112.855 mo
541.418 112.832 li
541.395 112.805 li
541.375 112.789 li
541.332 112.746 li
541.301 112.707 li
541.281 112.695 li
541.266 112.68 li
541.246 112.668 li
541.23 112.652 li
541.215 112.645 li
541.199 112.629 li
541.18 112.621 li
541.164 112.613 li
541.125 112.598 li
541.066 112.586 li
541.043 112.578 li
541.02 112.574 li
540.992 112.57 li
540.965 112.57 li
540.938 112.566 li
540.91 112.566 li
540.875 112.562 li
535.41 112.562 li
535.41 113.641 li
537.898 113.641 li
537.898 126.594 li
537.898 127.094 537.875 127.117 537.223 127.191 cv
536.68 127.258 536.629 127.258 535.988 127.258 cv
535.41 127.258 li
535.41 128.336 li
536.289 128.262 537.594 128.262 538.492 128.262 cv
539.465 128.262 540.656 128.262 541.598 128.336 cv
541.598 127.258 li
541.02 127.258 li
540.609 127.258 540.223 127.234 539.801 127.191 cv
539.141 127.117 539.117 127.094 539.117 126.594 cv
539.117 114.559 li
550.57 128.043 li
550.805 128.312 550.824 128.336 551.191 128.336 cv
551.812 128.336 551.812 128.129 551.812 127.602 cv
551.812 114.305 li
551.812 113.805 551.836 113.781 552.48 113.707 cv
553.031 113.641 553.074 113.641 553.715 113.641 cv
554.293 113.641 li
554.293 112.562 li
553.422 112.625 552.109 112.625 551.215 112.625 cv
550.25 112.625 549.047 112.625 548.105 112.562 cv
548.105 113.641 li
548.684 113.641 li
549.098 113.641 549.492 113.664 549.902 113.707 cv
550.57 113.781 550.594 113.805 550.594 114.305 cv
550.594 123.617 li
cp
f
567.699 123.324 mo
567.691 123.035 li
567.672 122.754 li
567.645 122.477 li
567.605 122.207 li
567.547 121.941 li
567.48 121.68 li
567.402 121.426 li
567.312 121.18 li
567.207 120.941 li
567.098 120.707 li
566.973 120.48 li
566.832 120.262 li
566.684 120.051 li
566.527 119.848 li
566.355 119.652 li
566.172 119.469 li
565.984 119.293 li
565.781 119.121 li
565.562 118.965 li
565.336 118.816 li
565.102 118.68 li
564.855 118.555 li
564.602 118.437 li
564.336 118.332 li
564.059 118.234 li
563.766 118.156 li
563.473 118.082 li
563.164 118.027 li
562.848 117.98 li
562.52 117.949 li
562.184 117.926 li
561.836 117.922 li
561.836 118.742 li
562.801 118.742 563.766 119.113 564.273 119.922 cv
564.754 120.695 564.754 121.965 564.754 123.07 cv
564.754 125.066 564.754 127.559 561.836 127.559 cv
558.914 127.559 558.914 125.066 558.914 123.07 cv
558.914 122.031 558.914 120.863 559.301 120.078 cv
559.742 119.227 560.711 118.742 561.836 118.742 cv
561.836 117.922 li
558.062 117.922 555.969 120.266 555.969 123.324 cv
555.969 126.172 557.996 128.477 561.836 128.477 cv
565.703 128.477 567.699 126.152 567.699 123.324 cv
cp
f
571.094 120.152 mo
571.094 127.258 li
569.508 127.258 li
569.508 128.336 li
570.156 128.312 571.531 128.262 572.406 128.262 cv
573.309 128.262 574.664 128.312 575.309 128.336 cv
575.309 127.258 li
573.723 127.258 li
573.723 122.449 li
573.723 119.937 575.699 118.816 577.148 118.816 cv
577.934 118.816 578.406 119.297 578.406 121.043 cv
578.406 127.258 li
576.824 127.258 li
576.824 128.336 li
577.469 128.312 578.852 128.262 579.723 128.262 cv
580.625 128.262 581.98 128.312 582.621 128.336 cv
582.621 127.258 li
581.035 127.258 li
581.035 121.297 li
581.035 118.883 579.793 117.984 577.492 117.984 cv
575.285 117.984 574.066 119.297 573.469 120.473 cv
573.469 117.984 li
569.508 118.176 li
569.508 119.254 li
570.938 119.254 571.094 119.254 571.094 120.152 cv
cp
f
583.453 122.105 mo
590.473 122.105 li
590.473 124.335 li
583.453 124.335 li
cp
f
606.773 112.699 mo
592.859 112.699 li
592.859 113.781 li
595.348 113.781 li
595.348 127.258 li
592.859 127.258 li
592.859 128.336 li
593.742 128.262 596.062 128.262 597.074 128.262 cv
598.195 128.262 600.707 128.262 601.719 128.336 cv
601.719 127.258 li
598.605 127.258 li
598.605 121.043 li
599.762 121.043 li
601.969 121.043 602.18 122.031 602.18 123.734 cv
603.262 123.734 li
603.262 117.27 li
602.18 117.27 li
602.18 118.973 601.992 119.961 599.762 119.961 cv
598.605 119.961 li
598.605 113.781 li
601.832 113.781 li
605.531 113.781 606.066 115.547 606.406 118.238 cv
607.488 118.238 li
cp
f
614.973 126.562 mo
614.973 126.703 li
614.977 126.848 li
614.984 126.918 li
615 127.066 li
615.012 127.141 li
615.027 127.215 li
615.047 127.289 li
615.07 127.363 li
615.102 127.437 li
615.137 127.512 li
615.176 127.578 li
615.223 127.648 li
615.273 127.719 li
615.332 127.781 li
615.398 127.848 li
615.477 127.906 li
615.512 127.934 li
615.559 127.965 li
615.602 127.992 li
615.648 128.02 li
615.699 128.047 li
615.75 128.07 li
615.859 128.117 li
615.922 128.137 li
615.98 128.16 li
616.043 128.18 li
616.184 128.219 li
616.332 128.25 li
616.41 128.262 li
616.492 128.277 li
616.574 128.289 li
616.664 128.301 li
616.75 128.309 li
616.848 128.32 li
616.941 128.324 li
617.043 128.332 li
617.148 128.332 li
617.254 128.336 li
618.465 128.336 li
618.926 128.336 619.203 128.336 619.203 127.781 cv
619.203 127.258 618.906 127.258 618.602 127.258 cv
617.203 127.234 617.203 126.93 617.203 126.402 cv
617.203 121.461 li
617.203 119.414 615.562 117.922 612.141 117.922 cv
610.832 117.922 608.031 118.008 608.031 120.035 cv
608.031 121.043 608.828 121.484 609.445 121.484 cv
610.164 121.484 610.902 121 610.902 120.035 cv
610.902 119.344 610.469 118.949 610.395 118.91 cv
611.035 118.77 611.77 118.742 612.055 118.742 cv
613.777 118.742 614.578 119.707 614.578 121.461 cv
614.578 125.141 li
614.578 127.348 612.461 127.645 611.883 127.645 cv
610.715 127.645 609.793 126.848 609.793 125.824 cv
609.793 123.348 613.43 123.023 614.578 122.953 cv
614.578 122.242 li
612.945 122.312 607.105 122.516 607.105 125.859 cv
607.105 128.066 609.953 128.477 611.539 128.477 cv
613.387 128.477 614.461 127.527 614.973 126.562 cv
cp
f
624.375 112.371 mo
620.305 112.562 li
620.305 113.641 li
621.734 113.641 621.891 113.641 621.891 114.535 cv
621.891 127.258 li
620.305 127.258 li
620.305 128.336 li
621.039 128.312 622.145 128.262 623.133 128.262 cv
624.121 128.262 625.18 128.312 625.961 128.336 cv
625.961 127.258 li
624.375 127.258 li
cp
f
631.738 112.371 mo
627.672 112.562 li
627.672 113.641 li
629.102 113.641 629.258 113.641 629.258 114.535 cv
629.258 127.258 li
627.672 127.258 li
627.672 128.336 li
628.41 128.312 629.512 128.262 630.5 128.262 cv
631.488 128.262 632.547 128.312 633.324 128.336 cv
633.324 127.258 li
631.738 127.258 li
cp
f
653.668 112.879 mo
653.652 112.852 li
653.645 112.824 li
653.633 112.797 li
653.617 112.773 li
653.609 112.75 li
653.594 112.723 li
653.57 112.68 li
653.547 112.641 li
653.52 112.602 li
653.496 112.566 li
653.473 112.535 li
653.445 112.5 li
653.422 112.473 li
653.34 112.402 li
653.316 112.387 li
653.289 112.367 li
653.262 112.352 li
653.234 112.34 li
653.203 112.332 li
653.176 112.32 li
653.145 112.312 li
653.113 112.301 li
653.086 112.297 li
653.023 112.289 li
652.988 112.285 li
652.957 112.285 li
652.926 112.281 li
652.75 112.281 li
652.105 112.281 652.016 112.469 651.848 112.879 cv
646.152 126.73 li
646.012 127.078 645.938 127.258 644.195 127.258 cv
643.711 127.258 li
643.711 128.336 li
644.586 128.312 645.691 128.262 646.402 128.262 cv
647.297 128.262 648.59 128.262 649.438 128.336 cv
649.438 127.258 li
649.387 127.258 647.391 127.258 647.391 126.961 cv
647.391 126.93 647.457 126.707 647.484 126.68 cv
648.629 123.898 li
649.094 122.82 li
651.711 116.422 li
654.336 122.82 li
649.094 122.82 li
648.629 123.898 li
654.801 123.898 li
656.176 127.258 li
653.992 127.258 li
653.992 128.336 li
654.863 128.262 657.051 128.262 658.039 128.262 cv
658.965 128.262 660.98 128.262 661.789 128.336 cv
661.789 127.258 li
659.559 127.258 li
cp
f
665.387 120.152 mo
665.387 127.258 li
663.797 127.258 li
663.797 128.336 li
664.449 128.312 665.824 128.262 666.695 128.262 cv
667.598 128.262 668.953 128.312 669.598 128.336 cv
669.598 127.258 li
668.008 127.258 li
668.008 122.449 li
668.008 119.937 669.988 118.816 671.438 118.816 cv
672.223 118.816 672.699 119.297 672.699 121.043 cv
672.699 127.258 li
671.109 127.258 li
671.109 128.336 li
671.762 128.312 673.137 128.262 674.012 128.262 cv
674.914 128.262 676.27 128.312 676.914 128.336 cv
676.914 127.258 li
675.324 127.258 li
675.324 121.297 li
675.324 118.883 674.082 117.984 671.785 117.984 cv
669.574 117.984 668.355 119.297 667.758 120.473 cv
667.758 117.984 li
663.797 118.176 li
663.797 119.254 li
665.223 119.254 665.387 119.254 665.387 120.152 cv
cp
f
680.062 120.152 mo
680.062 127.258 li
678.48 127.258 li
678.48 128.336 li
679.125 128.312 680.508 128.262 681.379 128.262 cv
682.277 128.262 683.637 128.312 684.277 128.336 cv
684.277 127.258 li
682.691 127.258 li
682.691 122.449 li
682.691 119.937 684.664 118.816 686.117 118.816 cv
686.906 118.816 687.379 119.297 687.379 121.043 cv
687.379 127.258 li
685.793 127.258 li
685.793 128.336 li
686.445 128.312 687.82 128.262 688.691 128.262 cv
689.594 128.262 690.949 128.312 691.59 128.336 cv
691.59 127.258 li
690.004 127.258 li
690.004 121.297 li
690.004 118.883 688.766 117.984 686.461 117.984 cv
684.254 117.984 683.035 119.297 682.438 120.473 cv
682.438 117.984 li
678.48 118.176 li
678.48 119.254 li
679.906 119.254 680.062 119.254 680.062 120.152 cv
cp
f
704.594 123.324 mo
704.582 123.035 li
704.566 122.754 li
704.539 122.477 li
704.496 122.207 li
704.441 121.941 li
704.371 121.68 li
704.293 121.426 li
704.203 121.18 li
704.098 120.941 li
703.988 120.707 li
703.863 120.48 li
703.727 120.262 li
703.578 120.051 li
703.418 119.848 li
703.25 119.652 li
703.062 119.469 li
702.875 119.293 li
702.672 119.121 li
702.453 118.965 li
702.23 118.816 li
701.992 118.68 li
701.75 118.555 li
701.496 118.437 li
701.227 118.332 li
700.949 118.234 li
700.66 118.156 li
700.363 118.082 li
700.055 118.027 li
699.738 117.98 li
699.414 117.949 li
699.074 117.926 li
698.73 117.922 li
698.73 118.742 li
699.695 118.742 700.66 119.113 701.168 119.922 cv
701.648 120.695 701.648 121.965 701.648 123.07 cv
701.648 125.066 701.648 127.559 698.73 127.559 cv
695.805 127.559 695.805 125.066 695.805 123.07 cv
695.805 122.031 695.805 120.863 696.195 120.078 cv
696.633 119.227 697.602 118.742 698.73 118.742 cv
698.73 117.922 li
694.953 117.922 692.859 120.266 692.859 123.324 cv
692.859 126.172 694.887 128.477 698.73 128.477 cv
702.594 128.477 704.594 126.152 704.594 123.324 cv
cp
f
707.73 119.203 mo
707.73 125.512 li
707.73 127.969 709.742 128.477 711.371 128.477 cv
713.125 128.477 714.152 127.16 714.152 125.488 cv
714.152 124.27 li
713.074 124.27 li
713.074 125.437 li
713.074 127.004 712.336 127.559 711.695 127.559 cv
710.359 127.559 710.359 126.09 710.359 125.555 cv
710.359 119.203 li
713.715 119.203 li
713.715 118.125 li
710.359 118.125 li
710.359 113.73 li
709.277 113.73 li
709.254 116.027 708.129 118.309 705.848 118.375 cv
705.848 119.203 li
cp
f
724.273 126.562 mo
724.277 126.703 li
724.285 126.848 li
724.285 126.918 li
724.301 127.066 li
724.316 127.141 li
724.328 127.215 li
724.348 127.289 li
724.402 127.437 li
724.438 127.512 li
724.477 127.578 li
724.523 127.648 li
724.574 127.719 li
724.633 127.781 li
724.703 127.848 li
724.777 127.906 li
724.82 127.934 li
724.859 127.965 li
724.902 127.992 li
724.953 128.02 li
725 128.047 li
725.055 128.07 li
725.105 128.094 li
725.164 128.117 li
725.223 128.137 li
725.285 128.16 li
725.352 128.18 li
725.414 128.199 li
725.484 128.219 li
725.633 128.25 li
725.711 128.262 li
725.793 128.277 li
725.875 128.289 li
725.965 128.301 li
726.051 128.309 li
726.148 128.32 li
726.246 128.324 li
726.344 128.332 li
726.449 128.332 li
726.555 128.336 li
727.77 128.336 li
728.23 128.336 728.504 128.336 728.504 127.781 cv
728.504 127.258 728.207 127.258 727.906 127.258 cv
726.504 127.234 726.504 126.93 726.504 126.402 cv
726.504 121.461 li
726.504 119.414 724.871 117.922 721.445 117.922 cv
720.137 117.922 717.332 118.008 717.332 120.035 cv
717.332 121.043 718.129 121.484 718.754 121.484 cv
719.465 121.484 720.203 121 720.203 120.035 cv
720.203 119.344 719.77 118.949 719.695 118.91 cv
720.336 118.77 721.074 118.742 721.355 118.742 cv
723.078 118.742 723.883 119.707 723.883 121.461 cv
723.883 125.141 li
723.883 127.348 721.766 127.645 721.191 127.645 cv
720.023 127.645 719.098 126.848 719.098 125.824 cv
719.098 123.348 722.734 123.023 723.883 122.953 cv
723.883 122.242 li
722.254 122.312 716.406 122.516 716.406 125.859 cv
716.406 128.066 719.258 128.477 720.844 128.477 cv
722.691 128.477 723.766 127.527 724.273 126.562 cv
cp
f
730.891 119.203 mo
730.891 125.512 li
730.891 127.969 732.895 128.477 734.523 128.477 cv
736.277 128.477 737.312 127.16 737.312 125.488 cv
737.312 124.27 li
736.227 124.27 li
736.227 125.437 li
736.227 127.004 735.492 127.559 734.852 127.559 cv
733.52 127.559 733.52 126.09 733.52 125.555 cv
733.52 119.203 li
736.871 119.203 li
736.871 118.125 li
733.52 118.125 li
733.52 113.73 li
732.434 113.73 li
732.414 116.027 731.289 118.309 729.008 118.375 cv
729.008 119.203 li
cp
f
743.98 117.984 mo
739.973 118.176 li
739.973 119.254 li
741.34 119.254 741.496 119.254 741.496 120.152 cv
741.496 127.258 li
739.91 127.258 li
739.91 128.336 li
740.625 128.312 741.75 128.262 742.715 128.262 cv
743.406 128.262 744.574 128.312 745.406 128.336 cv
745.406 127.258 li
743.98 127.258 li
cp
f
744.211 114.148 mo
744.207 114.051 li
744.203 113.961 li
744.188 113.867 li
744.172 113.781 li
744.152 113.691 li
744.129 113.605 li
744.094 113.52 li
744.062 113.437 li
744.027 113.359 li
743.988 113.281 li
743.941 113.203 li
743.895 113.133 li
743.844 113.062 li
743.734 112.93 li
743.676 112.867 li
743.609 112.809 li
743.547 112.754 li
743.477 112.699 li
743.406 112.652 li
743.332 112.605 li
743.258 112.562 li
743.18 112.523 li
743.102 112.488 li
742.938 112.434 li
742.766 112.387 li
742.684 112.371 li
742.59 112.363 li
742.504 112.352 li
742.414 112.352 li
741.426 112.352 740.625 113.16 740.625 114.148 cv
740.625 115.137 741.426 115.937 742.414 115.937 cv
743.379 115.937 744.211 115.156 744.211 114.148 cv
cp
f
758.66 123.324 mo
758.652 123.035 li
758.633 122.754 li
758.605 122.477 li
758.562 122.207 li
758.508 121.941 li
758.441 121.68 li
758.359 121.426 li
758.273 121.18 li
758.168 120.941 li
758.055 120.707 li
757.934 120.48 li
757.793 120.262 li
757.645 120.051 li
757.488 119.848 li
757.316 119.652 li
757.133 119.469 li
756.945 119.293 li
756.742 119.121 li
756.523 118.965 li
756.297 118.816 li
756.062 118.68 li
755.816 118.555 li
755.562 118.437 li
755.297 118.332 li
755.02 118.234 li
754.727 118.156 li
754.434 118.082 li
754.121 118.027 li
753.809 117.98 li
753.48 117.949 li
753.145 117.926 li
752.793 117.922 li
752.793 118.742 li
753.762 118.742 754.727 119.113 755.234 119.922 cv
755.715 120.695 755.715 121.965 755.715 123.07 cv
755.715 125.066 755.715 127.559 752.793 127.559 cv
749.875 127.559 749.875 125.066 749.875 123.07 cv
749.875 122.031 749.875 120.863 750.262 120.078 cv
750.703 119.227 751.672 118.742 752.793 118.742 cv
752.793 117.922 li
749.02 117.922 746.93 120.266 746.93 123.324 cv
746.93 126.172 748.957 128.477 752.793 128.477 cv
756.664 128.477 758.66 126.152 758.66 123.324 cv
cp
f
762.055 120.152 mo
762.055 127.258 li
760.465 127.258 li
760.465 128.336 li
761.117 128.312 762.492 128.262 763.367 128.262 cv
764.27 128.262 765.625 128.312 766.266 128.336 cv
766.266 127.258 li
764.684 127.258 li
764.684 122.449 li
764.684 119.937 766.656 118.816 768.109 118.816 cv
768.891 118.816 769.367 119.297 769.367 121.043 cv
769.367 127.258 li
767.785 127.258 li
767.785 128.336 li
768.43 128.312 769.812 128.262 770.684 128.262 cv
771.586 128.262 772.941 128.312 773.582 128.336 cv
773.582 127.258 li
771.996 127.258 li
771.996 121.297 li
771.996 118.883 770.754 117.984 768.453 117.984 cv
766.246 117.984 765.027 119.297 764.43 120.473 cv
764.43 117.984 li
760.465 118.176 li
760.465 119.254 li
761.898 119.254 762.055 119.254 762.055 120.152 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/TJGJUB+DejaVuSans*1 uf
/TJGJUB+DejaVuSans uf
/PBAAAA+DejaVuSans uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
